name: Run tests

on: [push, pull_request]

jobs:
  pre_job:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf
        with:
          cancel_others: true
          concurrent_skipping: same_content_newer

  build_and_test:
    name: ${{ matrix.config.preset }}

    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: ${{ matrix.config.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        config:
          # Windows MSVC
          - {
              os: windows-latest,
              preset: windows-msvc-debug,
              vcpkg_cache_triplet: x64-windows
            }
          - {
              os: windows-latest,
              preset: windows-msvc-release,
              vcpkg_cache_triplet: x64-windows
            }

          # Windows clang-cl
          - {
              os: windows-latest,
              preset: windows-clang-cl-release,
              vcpkg_cache_triplet: x64-windows
            }

          # Linux clang
          - {
              os: ubuntu-latest,
              preset: linux-clang-debug,
              vcpkg_cache_triplet: x64-linux
            }
          - {
              os: ubuntu-latest,
              preset: linux-clang-release,
              vcpkg_cache_triplet: x64-linux
            }

          # Linux sanitizers
          - {
              os: ubuntu-latest,
              preset: linux-asan-ubsan,
              vcpkg_cache_triplet: x64-linux
            }
          - {
              os: ubuntu-latest,
              preset: linux-tsan,
              vcpkg_cache_triplet: x64-linux
            }
          - {
              os: ubuntu-latest,
              preset: linux-msan,
              vcpkg_cache_triplet: x64-linux-msan
            }

    env:
      VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg-binary-cache,read

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        
      - name: Install clang
        if: matrix.config.os == 'ubuntu-latest'
        uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40
        with:
          packages: clang-19
          version: 1

      - name: Get CMake
        uses: lukka/get-cmake@56d043d188c3612951d8755da8f4b709ec951ad6

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/out/build/${{ matrix.config.preset }}/src" >> "$GITHUB_OUTPUT"
          echo "vcpkg-cache-key=vcpkg-${{ matrix.config.vcpkg_cache_triplet }}-${{ hashFiles('vcpkg.json', 'vcpkg-configuration.json') }}" >> "$GITHUB_OUTPUT"

      - name: Restore cached MSan libc++
        if: matrix.config.preset == 'linux-msan'
        id: cache-msan-libcxx
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684
        with:
           path: |
              toolchains/llvm-project/build/msan/include/
              toolchains/llvm-project/build/msan/lib/
           key: msan-libcxx-${{ hashFiles('toolchains/build-msan-libcxx.sh') }}

      - name: Install llvm-dev packages
        if: ${{ matrix.config.preset == 'linux-msan' && steps.cache-msan-libcxx.outputs.cache-hit != 'true' }}
        uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40
        with:
          packages: libclang-19-dev llvm-19-dev
          version: 1

      - name: Build MSan libc++
        if: ${{ matrix.config.preset == 'linux-msan' && steps.cache-msan-libcxx.outputs.cache-hit != 'true' }}
        working-directory: toolchains
        run: |
          bash build-msan-libcxx.sh

      - name: Restore cached VCPKG binaries
        id: cache-vcpkg-binaries
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684
        with:
           path: |
              ${{ github.workspace }}/vcpkg-binary-cache
           key: ${{ steps.strings.outputs.vcpkg-cache-key }}

      - name: CMake configure & build
        uses: lukka/run-cmake@af1be47fd7c933593f687731bc6fdbee024d3ff4
        with:
          configurePreset: ${{ matrix.config.preset }}
          configurePresetAdditionalArgs: "['-DTARGETS_TO_BUILD=tests']"
          buildPreset: ${{ matrix.config.preset }}
          buildPresetAdditionalArgs: "['--target', 'tests']"
   
      - name: Run tests
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: tests/tests

      - name: Install Valgrind
        if: matrix.config.preset == 'linux-clang-debug'
        uses: awalsh128/cache-apt-pkgs-action@5902b33ae29014e6ca012c5d8025d4346556bd40
        with:
          packages: valgrind
          version: 1

      - name: Run tests under Valgrind
        if: matrix.config.preset == 'linux-clang-debug'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          valgrind --leak-check=full --track-origins=yes --show-leak-kinds=all --error-exitcode=1 tests/tests
