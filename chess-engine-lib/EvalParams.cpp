#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,     0.000000,    0.218131,
        0.180748,    0.332013,    0.672957,    0.797925,    2.188127,     1.000000,    1.000000,
        1.000000,    -0.005847,   0.085860,    0.101796,    0.048913,     -126.884598, 197.820160,
        451.862701,  457.473083,  477.681000,  522.256592,  612.505188,   912.932922,  1278.097656,
        1537.296875, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -37.803089,  -4.957443,
        -39.560894,  -9.857241,   -34.352917,  -11.095605,  -47.828854,   -51.682804,  -9.881852,
        5.131762,    20.290291,   -6.076652,   42.810017,   -7.512667,    -36.872066,  -26.284060,
        -7.872891,   -4.926974,   -13.752673,  -1.461539,   -26.242647,   -12.941279,  -1.135684,
        -7.173956,   7.328010,    -11.970747,  9.154954,    -0.374877,    25.450550,   -1.039370,
        4.137433,    -19.895950,  3.488000,    -3.365079,   -8.449171,    5.148815,    -0.996327,
        -4.229762,   17.470802,   -7.677262,   4.200606,    3.685538,     19.037724,   3.438220,
        -1.909469,   15.495635,   -1.546525,   -4.029170,   23.420967,    40.126244,   10.113444,
        35.618492,   11.459973,   24.231428,   29.524998,   -1.391116,    40.072903,   -3.541022,
        16.785679,   21.872633,   -37.211910,  25.910053,   18.256931,    1.848459,    18.669708,
        71.925583,   19.590622,   74.422218,   47.805420,   61.431801,    41.602104,   5.087917,
        73.674744,   -36.638699,  114.346786,  -6.348530,   9.417335,     31.557140,   105.111389,
        -14.556400,  207.343201,  199.855225,  235.913269,  258.366211,   239.450027,  210.560806,
        244.989243,  165.527496,  177.513382,  136.200272,  124.582672,   177.290771,  -36.771049,
        197.539307,  72.796478,   156.118896,  0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -271.660461, -30.179834,
        -36.309303,  -67.297211,  -69.046600,  -41.751320,  -22.797838,   -7.318813,   5.306401,
        -58.532833,  -7.062478,   -58.542217,  -18.635984,  -97.141472,   -155.286819, -100.228180,
        -45.229149,  -87.035881,  -98.432999,  -11.514456,  -14.018738,   -1.832952,   7.112468,
        -12.771646,  1.690187,    -22.888472,  -8.418970,   -15.670902,   19.072130,   -64.373039,
        -30.187340,  -57.673954,  -38.704430,  -12.036709,  -3.639662,    -8.946188,   -20.504597,
        -26.264742,  9.261154,    14.500205,   41.248886,   18.252348,    5.097592,    -24.065531,
        13.633121,   -46.534939,  -21.982773,  -71.808937,  -22.200077,   -24.716082,  -3.872839,
        4.947611,    22.767105,   27.324203,   0.455993,    40.169273,    9.644817,    34.597301,
        14.677643,   10.525205,   38.669899,   -9.717188,   -5.814449,    -18.129366,  -31.863281,
        9.903431,    3.651324,    15.570263,   18.344488,   29.794376,    61.152359,   28.885082,
        5.350947,    33.633408,   71.405617,   18.031630,   1.346237,     4.364634,    9.088391,
        -15.914482,  -47.892624,  -36.345901,  -5.781360,   16.905523,    33.472107,   29.018461,
        61.223988,   29.474833,   73.742485,   -3.252812,   153.749268,   14.533440,   28.151852,
        17.086451,   -22.069069,  -5.911033,   -89.541992,  6.431342,     -34.246399,  17.560822,
        -22.170971,  -0.359540,   59.107079,   22.028881,   15.747135,    17.018072,   131.501678,
        -27.695055,  31.532047,   -30.623072,  -149.347382, -43.145596,   -246.706833, -83.051994,
        -97.147308,  -5.032650,   -125.430267, -19.556664,  -46.949718,   -11.567421,  38.362652,
        -21.950449,  -39.893532,  -1.552642,   -67.381187,  -48.334522,   -180.822388, -138.878143,
        -90.344872,  -23.422056,  -34.822208,  -16.856503,  -32.770832,   -6.132362,   -35.160355,
        26.192360,   -18.059029,  14.952180,   -31.838999,  -13.528833,   -10.905009,  -26.436966,
        -94.757835,  41.556049,   3.242478,    -50.180370,  -7.130173,    -22.642353,  0.868871,
        -22.198139,  -10.913397,  9.836562,    10.539063,   8.647025,     25.393528,   2.875004,
        52.669743,   -32.608768,  -31.599110,  -39.321552,  -20.827650,   0.102147,    19.653381,
        -22.145090,  14.017983,   0.200366,    18.051929,   9.118064,     12.493079,   8.313605,
        46.969234,   -6.857311,   26.388756,   -31.899317,  21.806698,    -13.190989,  14.666974,
        -46.924343,  -5.144565,   9.967723,    12.645356,   8.903813,     30.021797,   11.221576,
        34.241695,   -1.493098,   8.747405,    1.806968,    31.206463,    -15.776804,  28.209755,
        -59.827991,  -32.226036,  -5.549785,   0.677523,    20.715302,    18.934795,   5.759398,
        51.519634,   3.353508,    37.382080,   15.330281,   52.477764,    9.340575,    -7.986846,
        8.051837,    -2.755644,   -6.027891,   10.525178,   16.013472,    8.981061,    13.880437,
        10.010358,   13.827754,   89.024734,   -26.183275,  54.072460,    6.241843,    99.911453,
        1.243450,    20.297153,   -2.955899,   49.073338,   -20.073578,   -3.530308,   -11.460642,
        -22.373089,  25.643963,   3.156066,    -4.371919,   -0.544639,    26.627003,   25.657501,
        6.702345,    -9.203629,   3.402403,    30.585499,   -0.518608,    -58.498642,  -80.937553,
        -184.389603, -14.635615,  -85.119186,  -18.205057,  -102.148407,  10.267066,   -177.652908,
        14.960750,   -23.609058,  6.321427,    -105.120872, -1.031373,    59.848568,   -36.986843,
        61.373425,   -7.760377,   25.934725,   -21.171637,  12.337477,    -23.549227,  -2.625435,
        -11.785524,  9.405588,    -16.878984,  4.179810,    -22.376093,   -20.928932,  -8.309822,
        -53.317966,  -9.125277,   -32.548710,  -38.654049,  2.218552,     -7.866210,   -12.664477,
        -22.973526,  -25.475767,  -5.966079,   -18.320456,  -10.439557,   1.917691,    -17.678944,
        -6.697752,   -21.205280,  -28.080008,  -4.556815,   -108.765274,  3.210599,    -28.960325,
        -13.549445,  -30.840593,  -20.701313,  -24.180666,  -15.072271,   -1.785082,   -9.585518,
        -4.125793,   -26.420650,  -6.557532,   -32.168716,  -0.581951,    -15.938377,  -25.321795,
        -31.701057,  -41.367039,  6.555561,    9.591006,    -4.823332,    -19.425844,  11.987968,
        -10.260620,  -2.656862,   -19.845470,  4.113552,    -22.347469,   -2.796507,   -24.164314,
        8.136124,    -46.382614,  3.615005,    -0.108316,   15.025322,    10.174721,   3.691423,
        -10.294084,  15.755568,   31.525270,   -6.635156,   -54.898514,   15.731522,   -0.233524,
        6.486406,    -13.273419,  1.690073,    10.371337,   2.657382,     -28.974667,  36.006310,
        -12.747728,  6.105278,    -2.523530,   13.655632,   -3.241246,    -2.250145,   9.642298,
        5.618715,    -5.058774,   7.213754,    72.582100,   -4.349042,    -4.862192,   12.099306,
        19.076458,   28.873995,   -17.565264,  36.606056,   19.124208,    34.957867,   23.619045,
        25.771364,   -8.276942,   37.326183,   58.096138,   18.891512,    17.353943,   22.291243,
        65.461990,   16.654646,   29.924202,   -10.235710,  14.489861,    16.693621,   -24.430326,
        30.178530,   -2.380220,   34.148640,   -23.329529,  30.585409,    -52.175755,  44.026989,
        -13.929493,  35.433357,   -36.353172,  37.218239,   -37.388332,   32.424110,   -7.207479,
        -6.768274,   7.132333,    -102.426788, -8.418103,   -11.466219,   -6.884278,   -56.720329,
        -56.049557,  -118.018883, -146.845901, -11.002998,  -202.981308,  96.318619,   -16.223106,
        -50.704166,  -9.972550,   -27.480015,  10.120025,   -60.527103,   -10.417382,  7.824884,
        12.554688,   -62.558804,  -6.646276,   -56.509182,  -14.439794,   -139.378464, -24.522743,
        -205.045135, -32.641502,  87.836639,   0.077622,    1.230374,     -20.795624,  40.568443,
        5.790462,    -21.772625,  -6.355107,   -9.307312,   15.203679,    -26.586868,  12.615098,
        -26.856670,  -15.239217,  -20.593920,  14.952464,   -24.009920,   0.844575,    31.179029,
        -9.442430,   11.073401,   21.173120,   -20.183382,  8.626197,     31.353033,   6.393443,
        19.045357,   -7.824613,   -18.856014,  10.103913,   -34.667912,   -10.597047,  77.724976,
        -17.542500,  78.445778,   -16.031738,  76.026230,   17.220591,    30.308290,   28.641422,
        -7.862048,   18.127232,   33.375179,   16.252724,   -5.043655,    8.799823,    -10.293568,
        -9.318913,   6.568132,    20.044588,   43.167149,   16.094028,    36.911228,   26.146822,
        10.414515,   25.142271,   27.941620,   109.927612,  -60.044895,   113.800171,  -100.714493,
        23.526848,   11.161147,   18.121489,   -8.786556,   -18.297905,   99.195503,   9.859475,
        71.637703,   46.351929,   -23.097193,  27.491888,   49.564011,    -45.420528,  160.306961,
        151.443253,  -162.956146, 101.197578,  -43.196468,  -47.277271,   137.886841,  -2.928628,
        90.081505,   -38.438084,  126.851341,  6.226033,    42.781528,    4.154279,    88.774994,
        -4.818952,   95.882828,   95.275978,   -113.938896, -10.901917,   140.674194,  8.512391,
        -6.852780,   12.014962,   0.051852,    0.133847,    11.423174,    -112.690331, 25.414936,
        -42.177181,  6.632035,    -63.910271,  20.629095,   19.104479,    21.520868,   13.819135,
        5.670714,    -37.820850,  9.005622,    15.420748,   10.065929,    -27.143888,  -17.186880,
        -97.299751,  5.929163,    -110.732277, 11.538529,   -66.377678,   10.555178,   10.421561,
        -0.078622,   12.333561,   -2.855680,   -44.996738,  -35.147484,   -11.742565,  -32.421059,
        -88.375565,  -13.470904,  -21.540709,  -11.086629,  -52.909286,   -4.511877,   -80.748871,
        -3.814711,   -10.788708,  -27.396870,  -41.985561,  -29.623091,   -18.850710,  -59.817589,
        20.066666,   -34.124401,  14.857777,   -24.041588,  -17.505219,   -12.272346,  -11.838164,
        -9.314933,   -25.868336,  -14.803597,  -12.078405,  -43.935432,   -100.738785, -55.617153,
        24.551517,   -34.184593,  25.655409,   -4.177819,   -9.251076,    -0.782183,   -54.174152,
        3.984283,    -53.211494,  -9.662304,   17.801552,   -21.293409,   1.104245,    -15.815487,
        -0.145680,   -45.742252,  -21.940420,  16.252728,   -24.632566,   27.487583,   33.706821,
        24.484039,   -57.725861,  15.607842,   -44.050301,  1.654428,     55.208096,   13.344200,
        -18.549109,  19.184668,   -130.814621, 7.161061,    -36.419415,   -11.703723,  -15.601021,
        34.895660,   -6.709429,   28.661985,   -23.027929,  29.842945,    36.018719,   -7.931808,
        4.140896,    -17.524265,  -159.801895, 44.995930,   -337.060486,  -30.352327,  -106.622421,
        -68.222420,  2.581270,    17.854717,   -25.257446,  35.058014,    -15.320234,  10.687558,
        -41.632053,  -4.793625,   43.787239,   -45.321251,  -74.566010,   3.268050,    -291.803589,
        -150.589508, 0.000000,    0.000000,    90.000000,   90.000000,    153.161011,  155.631866,
        86.182709,   77.589172,   62.290901,   28.554895,   60.713478,    -24.027044,  74.466087,
        -38.707142,  50.239792,   48.279625,   16.546011,   29.872982,    -5.526899,   4.093680,
        24.161905,   0.471468,    19.707781,   -0.432209,   7.908815,     -4.566138,   0.000000,
        0.000000,    -6.482751,   -2.741811,   -8.571821,   -11.304019,   -55.299751,  -87.752785,
        45.575039,   -123.669189, 5.036063,    4.649099,    31.105663,    -1.068856,   21.245277,
        0.111765,    9.474030,    2.519100,    -0.000000,   0.000000,     -6.666688,   -12.331857,
        1.805783,    -23.945610,  -53.703098,  39.116165,   81.713844,    226.091812,  49.862316,
        90.057861,   1.683134,    14.974627,   -30.779814,  -75.462975,   17.837320,   22.298157,
        35.908955,   4.052167,    -420.681274, 26.857758,   -37.627148,   -62.109077,  -23.608997,
        -36.635231,  18.616144,   -23.343386,  0.000000,    0.000000,     8.219951,    12.189109,
        10.602941,   27.972153,   17.553644,   47.993118,   -7.105941,    167.660904,  -128.063232,
        -29.962141,  -122.461533, -64.829834,  -64.600960,  -41.855904,   -14.808466,  -28.868338,
        0.000000,    0.000000,    19.510468,   29.402411,   18.386847,    68.211357,   7.201844,
        117.191444,  -49.342350,  127.100182,  70.081390,   -1110.520020, -373.402832, -145.481567,
        -284.951965, -27.310270,  -178.760040, -4.474472,   0.000000,     0.000000,    154.828186,
        38.633156,   354.854187,  4.329546,    581.058350,  -65.080391,   944.632446,  -299.094360,
        3.044044,    0.520335,    0.000000,    0.000000,    2.982996,     3.434711,    4.180404,
        5.723691,    4.198851,    5.402647,    2.674004,    7.521446,     0.000000,    0.000000,
        5.755135,    -0.209031,   -2.344393,   4.146055,    -0.603310,    -1.728538,   2.186548,
        -0.213173,   3.651496,    2.127854,    11.856913,   1.406783,     2.685767,    3.981995,
        0.201854,    12.937243,   -3.281293,   -4.364459,   3.392087,     0.193983,    -3.455042,
        -0.685783,   9.283496,    -3.906501,   -1.852470,   11.451325,    -5.199646,   -3.429138,
        -0.117135,   -6.987030,   -4.954801,   -14.481239,  20.000000,    10.000000,   1.333373,
        -0.950034,   -10.141956,  -50.354263,  12.881577,   -13.407238,   9.460425,    6.907084,
        -54.049953,  -37.908306,  -4.271746,   -16.248343,  3.244824,     12.707149,   -48.457626,
        -49.463856,  -21.687445,  -17.685303,  3.569780,    12.058280,    -62.636471,  -13.310066,
        -9.989356,   5.862479,    2.172733,    35.206459,   -87.497704,   -39.224449,  -66.131096,
        25.371468,   0.000000,    0.000000,    -30.089937,  -52.580158,   -23.020271,  -51.996685,
        -6.405308,   -49.345821,  17.176823,   -60.340851,  50.496521,    -73.971405,  95.885208,
        -81.790955,  113.859169,  -80.548851,  178.086838,  -91.287415,   0.000000,    0.000000,
        43.095390,   37.705727,   62.281067,   41.753498,   59.635983,    53.943352,   54.814568,
        43.428982,   59.600746,   50.051514,   0.000000,    0.000000,     0.000000,    0.000000,
        -25.689220,  -3.096071,   -71.177933,  -47.287312,  -89.386497,   -90.394485,  -131.547150,
        -114.942169, -130.549500, -148.182022, -15.266794,  4.501874,     -10.161953,  -86.073112,
        -13.441430,  -51.031082,  -96.178955,  -15.288654,  -69.015045,   -66.117447,  -17.935194,
        13.145873,   -7.592614,   8.467119};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
