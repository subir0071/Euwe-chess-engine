#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,    -173.350601,
        193.107300,  411.988068,  419.699341,  399.024048,  475.431000,  527.576355,  810.665405,
        1210.685913, 1360.381104, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -17.913527,
        -3.575707,   -15.208901,  -14.159386,  -27.185213,  -4.194280,   -39.631344,  -39.645267,
        -11.210065,  4.958291,    2.981333,    -6.755517,   31.398930,   -11.917976,  -30.159227,
        -25.703089,  6.738579,    -1.292434,   4.426206,    0.624905,    -15.856133,  -0.358114,
        -2.670247,   -7.095356,   -9.332839,   -4.168647,   -4.737262,   -3.760673,   23.476501,
        -7.104938,   -3.719682,   -25.455416,  18.874519,   7.478390,    4.173680,    23.217659,
        4.906030,    -2.947317,   17.501322,   1.542070,    -5.394118,   11.057806,   8.417645,
        5.008289,    -12.796258,  8.750811,    -25.535532,  -1.841536,   36.691448,   23.489616,
        24.787689,   30.821198,   18.656683,   0.172456,    13.935187,   0.703601,    18.252342,
        6.451436,    -8.111007,   21.178640,   -29.273474,  14.316959,   -23.207399,  14.324619,
        21.953934,   61.198467,   28.068766,   52.192333,   10.614250,   35.801750,   34.424423,
        -12.542535,  36.379971,   -23.019274,  59.219769,   35.237926,   19.983671,   36.134426,
        -14.063645,  17.108870,   214.657715,  157.422226,  174.134171,  186.273743,  188.449387,
        136.501236,  194.070175,  123.257256,  152.567307,  107.799889,  118.241562,  190.709000,
        -130.575668, 202.867142,  -38.558903,  159.818314,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -279.841248,
        -54.802601,  -34.749638,  -59.841976,  -150.782364, -7.200404,   -21.170599,  9.329354,
        -24.723162,  -34.585545,  5.983790,    -62.014133,  -61.105019,  -86.119576,  -173.550720,
        -31.322134,  -60.887283,  -65.400177,  -81.032982,  3.505798,    -17.539537,  -34.407692,
        5.986473,    -14.671937,  -8.437037,   -28.407640,  -13.819428,  -14.915166,  -6.138778,
        -14.314981,  -19.444422,  -25.357824,  -38.713039,  -17.363253,  -19.988020,  -13.415618,
        -13.465791,  -17.779772,  9.693300,    14.602918,   54.451710,   13.767337,   3.332556,
        -15.850425,  21.072994,   -42.191807,  -44.397835,  2.446384,    -29.384989,  -16.342150,
        19.522034,   13.441837,   24.511726,   28.005630,   9.273687,    24.210867,   20.671484,
        36.794796,   38.910103,   1.325732,    38.887379,   -13.611732,  2.278819,    -15.854196,
        -14.011893,  0.563394,    20.548231,   5.357501,    11.058940,   23.773193,   55.810097,
        30.784052,   1.596638,    20.829691,   62.675034,   15.260837,   -15.637383,  6.702059,
        -14.235793,  0.958635,    -8.469071,   -30.431032,  3.718993,    10.816851,   39.689552,
        13.659856,   69.579300,   26.587912,   53.327538,   -18.730970,  116.082924,  13.364072,
        27.228491,   0.263294,    -63.528091,  12.248858,   -64.945488,  -1.400511,   -9.573178,
        -19.747633,  15.256302,   -0.006705,   45.838985,   28.235731,   24.550583,   9.679865,
        24.516369,   -11.354243,  -44.779148,  -31.470007,  -103.357040, -30.619467,  14.571212,
        -25.884169,  -159.938919, -1.750919,   -133.247467, -10.614232,  -83.779732,  -31.300444,
        17.361668,   8.487961,    66.340515,   8.716879,    -244.613800, 33.785202,   -102.848145,
        -209.784470, -77.739258,  -51.556004,  -54.708736,  -38.439266,  -31.735607,  -6.571690,
        -44.147388,  28.068350,   -17.422125,  4.681183,    -25.264692,  3.406508,    -3.544808,
        -2.475923,   -126.137878, 24.555748,   -3.642086,   -13.766539,  -13.668507,  -25.281525,
        -2.244431,   -5.849287,   -15.539435,  11.611897,   5.296611,    10.906517,   -12.280213,
        3.541377,    34.608894,   -18.251318,  -51.602684,  -7.029130,   -14.838525,  -10.074682,
        17.807178,   -14.321039,  15.382808,   -3.495018,   9.811876,    12.975866,   17.007349,
        13.487436,   37.571392,   -11.294257,  15.665740,   -28.098475,  -7.904263,   -52.307049,
        20.066227,   -61.923306,  -20.667011,  2.643667,    17.748516,   8.505758,    43.109913,
        9.265726,    30.739979,   -8.624855,   20.124458,   -7.555756,   43.137775,   11.563286,
        17.326075,   -40.386276,  -20.931717,  -4.396546,   18.592140,   18.539417,   27.937534,
        -5.483941,   58.737667,   6.677410,    38.507389,   16.339144,   69.600594,   17.076546,
        0.984801,    2.970463,    -19.325186,  -2.750217,   -7.615802,   -7.931844,   35.946056,
        3.010104,    40.784592,   -8.940314,   46.733742,   -14.544610,  38.390640,   22.976927,
        116.823837,  22.892643,   133.199829,  -28.606377,  59.079124,   -23.237032,  17.634819,
        -51.658508,  -26.730017,  0.001022,    -6.669918,   -4.788213,   -14.262361,  41.217098,
        7.858196,    -12.983570,  51.135418,   -4.139429,   45.409420,   18.631130,   35.520500,
        -33.953644,  -44.814892,  2.922815,    -72.592560,  -36.885223,  -10.928491,  -0.767290,
        -288.440887, 8.890837,    -70.054253,  11.131787,   -0.504236,   -4.817040,   8.575227,
        6.064140,    106.480156,  -35.510288,  36.661091,   -21.986645,  22.187468,   -14.354742,
        1.256646,    -8.764643,   9.178895,    -14.609674,  -6.762328,   -21.806885,  -25.712336,
        -9.704970,   -49.580772,  -12.504812,  -31.094879,  -28.081621,  15.515012,   -15.777739,
        -30.782604,  -7.437621,   -22.948040,  -3.538677,   -15.169893,  -18.924099,  7.471015,
        -39.314655,  -37.302456,  -18.782633,  -71.654175,  -5.148965,   -143.717987, 11.008131,
        -25.731310,  -6.053718,   -7.310046,   -4.907651,   -38.570732,  1.220223,    -13.643899,
        -6.810549,   -12.592197,  -28.553587,  -23.055836,  -44.913319,  -16.027714,  -21.072474,
        -61.991028,  -38.060257,  9.901620,    -9.458324,   11.682588,   -7.087337,   -5.201350,
        4.679779,    -11.328321,  0.448220,    -55.609962,  0.343421,    -50.618958,  -3.543641,
        -49.765671,  3.312177,    -111.340363, 9.996289,    -9.846165,   12.472219,   -11.791470,
        12.391346,   -52.530094,  13.812062,   8.663987,    -9.409328,   -90.253853,  10.429942,
        -14.646181,  14.172544,   -44.776230,  18.011026,   -84.458244,  19.598270,   -32.262230,
        32.351315,   -25.355259,  12.887903,   -27.856094,  12.610146,   -19.650990,  -3.141987,
        -25.843859,  11.965080,   -23.391088,  15.797097,   117.396751,  -25.634485,  -69.549049,
        19.755896,   15.537530,   25.780535,   -29.750854,  28.433659,   -13.042420,  26.609674,
        -17.163317,  35.479916,   -28.448168,  29.910631,   19.907896,   23.407423,   15.021054,
        14.969590,   46.980957,   2.469923,    -19.239950,  10.461695,   -32.108238,  18.683462,
        -76.746246,  29.719835,   -31.985680,  33.992805,   -19.315147,  23.901880,   -65.040161,
        47.329842,   -25.388645,  39.781384,   -79.888168,  20.498014,   -8.371016,   14.720032,
        -12.631378,  11.062309,   19.613523,   -123.292854, -5.734540,   -21.394732,  -12.467022,
        -23.098423,  -42.241764,  -102.058441, -42.854141,  -150.096924, -178.683884, 161.113510,
        -14.009594,  -47.396549,  15.282045,   -35.210350,  4.679511,    -27.368484,  -1.630987,
        3.003824,    1.188471,    -50.477184,  -11.936781,  -65.840530,  -29.570303,  -120.808228,
        -38.095528,  -178.622101, -15.638559,  48.065830,   11.905283,   -3.262572,   -19.937769,
        42.646481,   5.321322,    -31.663265,  -1.079683,   -43.822433,  -12.332439,  -4.997508,
        8.395960,    -24.158558,  -5.772359,   -59.972149,  16.837698,   -53.823719,  21.369707,
        18.872513,   -2.052907,   16.938286,   27.153856,   -45.504696,  0.094534,    23.199532,
        8.093878,    14.924290,   7.347800,    -70.763275,  5.025694,    -28.358675,  2.783053,
        27.698849,   -28.503147,  125.590012,  -25.441107,  84.769836,   8.084105,    58.718418,
        6.050326,    67.959274,   12.464552,   41.024837,   -9.731806,   33.529449,   0.094908,
        3.160367,    -7.051713,   25.627361,   25.343203,   0.846138,    11.764257,   34.874233,
        11.911657,   25.926208,   14.051474,   74.071625,   72.710648,   -15.274631,  110.127724,
        -144.773392, 32.223614,   0.175701,    37.445942,   -46.405697,  -12.737381,  97.351967,
        2.587470,    107.157425,  31.224184,   32.805737,   -2.392068,   90.596680,   27.567606,
        8.965485,    24.369097,   26.731747,   38.042873,   -11.506034,  13.683290,   68.344841,
        91.956184,   -42.322605,  -10.712732,  83.993057,   -5.955385,   79.498901,   -9.153963,
        89.227219,   -15.624006,  107.715088,  145.123138,  -144.875809, -32.224434,  158.774185,
        10.175173,   9.589019,    8.646248,    -1.576622,   -47.326965,  24.505669,   -132.187698,
        46.871849,   -39.841663,  0.451687,    -60.405746,  20.971048,   13.996786,   14.607526,
        3.070429,    6.912674,    41.108391,   0.644716,    -68.338081,  15.824019,   10.429281,
        -12.807092,  -68.010735,  15.241927,   -73.532379,  5.687558,    -27.968477,  4.391785,
        9.722600,    5.720756,    5.123834,    5.102595,    60.688911,   -37.303810,  -15.299212,
        -28.061245,  -20.286764,  -15.897550,  -49.476589,  -10.210109,  -18.820593,  -7.661853,
        -51.059673,  -7.947667,   -16.653536,  -22.621080,  -40.424492,  -22.057198,  -12.909343,
        -36.124065,  28.323444,   -31.595552,  -18.779356,  -11.770617,  -12.674480,  -11.547353,
        6.383493,    -8.415422,   22.623718,   -16.545889,  25.571810,   -38.438869,  -25.780195,
        -54.999378,  -13.581308,  -24.001654,  39.643608,   -3.655931,   26.550297,   -19.185860,
        -90.496269,  10.599735,   13.552949,   -7.634459,   84.869904,   -31.990614,  62.198563,
        -14.798753,  105.720795,  -40.315643,  -26.814617,  5.485975,    32.895191,   2.696869,
        30.902679,   20.003235,   -33.427071,  10.126585,   -90.618355,  16.595367,   57.565685,
        25.756514,   0.010404,    31.011536,   41.797825,   6.851922,    -58.570301,  -6.691633,
        -45.760475,  32.382923,   30.036247,   12.530401,   11.838667,   2.059045,    3.247725,
        4.390809,    66.571442,   10.800046,   -104.024933, 46.110416,   -217.960327, 0.782264,
        45.185371,   -16.311518,  12.103709,   0.372685,    -22.392849,  -5.629647,   -54.106216,
        14.670426,   -89.827087,  6.904649,    34.992485,   -31.345510,  -104.225067, 31.540527,
        -295.929688, -75.758217,  0.000000,    0.000000,    90.000000,   90.000000,   141.281616,
        128.215454,  75.335770,   62.494713,   49.411102,   9.510098,    60.813808,   -30.442757,
        65.667427,   -39.128391,  67.147240,   -9.225866,   10.443024,   25.140860,   9.243906,
        1.108618,    29.016615,   -1.285459,   19.343210,   -0.724326,   10.669525,   -2.784310,
        0.000000,    0.000000,    -8.371725,   -6.477470,   -14.244789,  1.048402,    -40.463627,
        -50.538719,  147.133911,  -276.587158, 32.568115,   -0.943342,   40.589401,   -7.714978,
        27.647873,   -1.586310,   16.100414,   -2.652736,   -0.000000,   0.000000,    -9.687610,
        -19.576883,  -12.920765,  -16.551874,  -47.636185,  12.120434,   157.933777,  -4.345553,
        47.448048,   76.294853,   12.328730,   6.028453,    -61.258167,  -52.263603,  18.219864,
        15.778432,   34.238331,   5.076461,    -387.978516, 42.187286,   -35.620373,  -46.240559,
        -2.043073,   -33.054821,  12.593707,   -13.226142,  0.000000,    0.000000,    -0.609989,
        20.475420,   4.602539,    32.820881,   -1.051485,   59.391476,   -18.305136,  150.510757,
        -112.856575, -33.897594,  -74.262672,  -62.090076,  -43.658180,  -40.729790,  -26.213879,
        -25.759140,  0.000000,    0.000000,    11.210225,   21.033566,   18.295492,   54.584145,
        -12.375680,  102.007462,  -116.067551, 150.081421,  -34.790516,  -978.157837, -456.818054,
        -56.033306,  -324.835815, 17.343235,   -133.317108, -66.034058,  0.000000,    0.000000,
        169.911850,  -27.656317,  336.456909,  -37.787720,  619.083557,  -220.916260, 1065.919312,
        -525.946045, 2.090460,    0.317007,    0.000000,    0.000000,    0.963531,    3.048918,
        3.572264,    5.470736,    3.837193,    4.680152,    2.152104,    7.985111,    0.000000,
        0.000000,    7.532421,    -0.843965,   -1.524817,   2.384727,    1.651218,    -2.582659,
        2.931664,    -0.333707,   4.796113,    1.735335,    14.314037,   -3.000510,   5.159827,
        2.486836,    0.581163,    12.668512,   2.326403,    -5.341674,   1.229885,    -0.584601,
        -4.777222,   -0.773058,   12.737946,   -3.339186,   0.258645,    5.740426,    0.426604,
        -5.485231,   4.139004,    -7.609586,   2.019688,    -15.325644,  20.000000,   10.000000,
        3.060486,    -2.030594,   -9.670569,   -45.086479,  9.459856,    -13.428203,  8.446782,
        6.359214,    -46.348927,  -35.218319,  -4.094940,   -11.947738,  5.321525,    11.962673,
        -43.156403,  -46.400108,  -15.888763,  -14.909345,  6.324566,    10.104218,   -49.388062,
        -17.533773,  -5.392536,   -7.342513,   -1.942926,   36.157009,   -77.755913,  -69.808510,
        -65.648712,  21.773294,   0.000000,    0.000000,    4.705529,    -51.276611,  5.667044,
        -51.479218,  26.873392,   -49.039673,  60.467659,   -61.161049,  80.744263,   -69.971039,
        121.066742,  -76.100449,  142.919693,  -68.119522,  246.079697,  -73.451729,  0.000000,
        0.000000,    -11.954399,  35.047127,   8.835329,    46.357399,   7.281814,    48.392563,
        5.761758,    38.853558,   6.862290,    42.548149,   0.000000,    0.000000,    0.000000,
        0.000000,    -7.592486,   -2.567919,   5.809140,    -47.337700,  33.861534,   -87.178383,
        28.565109,   -112.837463, 67.431282,   -147.939255, 0.268695,    0.199683,    0.292774,
        0.995476,    0.807893,    1.000000,    1.000000,    1.000000,    1.000000,    -0.004341,
        0.121154,    0.120667,    0.044368,    -4.385065,   -0.663220,   -17.850111,  -63.216980,
        -11.861349,  -57.169868,  -82.635757,  -6.824970,   -55.084278,  -90.531120};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
