#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.318135,   1.000000,    1.664864,   2.882205,   8.633334,    0.000000,    -9.023063,
        92.147148,   328.012207,  306.795502, 344.860199, 356.723572,  411.575836,  556.753418,
        905.479980,  971.999817,  0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    -26.654219,
        15.252563,   -17.047403,  -2.251436,  -20.218798, 4.619574,    -18.980721,  -49.135387,
        -2.629994,   24.051031,   10.863873,  -5.213197,  32.360489,   -8.246887,   -8.280996,
        -12.994834,  -11.920262,  9.232957,   -9.452184,  1.359448,    -8.144792,   -2.134491,
        -6.992340,   0.466883,    -9.288008,  0.294348,   0.286822,    2.606650,    33.504410,
        -11.482068,  8.872692,    -10.943394, -7.089634,  9.855374,    -11.755516,  12.439922,
        1.856259,    -0.465010,   8.925371,   -13.778741, -5.624106,   -5.003205,   9.836844,
        -0.408827,   -7.145261,   0.789825,   -16.492290, -4.639621,   -8.024286,   37.367573,
        -0.355431,   18.678291,   -7.314757,  3.811342,   1.784401,    -1.710175,   14.317350,
        0.285277,    6.047919,    -6.090259,  -4.488608,  4.069086,    -12.590841,  0.460027,
        -8.689022,   44.878750,   27.179167,  22.318474,  -8.401953,   20.033031,   23.061571,
        -13.388682,  42.253445,   -25.081457, 22.056585,  -4.174395,   83.957329,   12.654717,
        34.185398,   -17.025892,  111.140968, 57.732323,  49.863770,   93.206207,   79.603416,
        48.346275,   106.118332,  64.852768,  69.913628,  50.034821,   36.235435,   73.420319,
        6.530087,    122.943741,  26.367310,  59.629654,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    -171.382584,
        -64.749771,  -31.983238,  -35.607784, -59.021946, -18.276510,  -19.022945,  -32.290367,
        -37.273647,  -26.195839,  -14.261079, -28.663597, -48.576679,  -63.138458,  -125.878708,
        -45.458832,  -68.136559,  -58.493946, -77.437050, -18.143583,  -31.841896,  -27.789017,
        -6.831817,   3.024739,    -4.221643,  -14.494480, 20.573902,   -11.500634,  -26.316133,
        -32.722706,  -41.466381,  -46.643528, -29.958111, -30.972439,  -12.573858,  -2.166883,
        -2.129485,   -5.185518,   -2.351393,  3.943542,   45.090122,   4.786189,    2.350609,
        -15.582479,  11.412242,   -13.454207, -35.908325, -9.625574,   -26.242128,  -13.894977,
        -36.545841,  -4.805786,   25.495623,  12.348762,  1.097775,    28.285257,   15.912342,
        22.621574,   28.061821,   5.500851,   10.379189,  15.435325,   -10.011334,  -12.784764,
        -20.263790,  -9.243033,   8.835810,   9.877913,   41.429413,   12.055860,   60.000839,
        17.316183,   25.433292,   17.508877,  60.289223,  15.423696,   5.151028,    9.900664,
        25.199591,   -23.449671,  -27.509211, -30.478256, 4.606789,    17.454874,   14.752339,
        32.794132,   78.506996,   16.202843,  122.276825, -15.688812,  106.273911,  -1.762511,
        28.860447,   2.430073,    -15.229323, -0.051274,  -28.434849,  -7.780284,   -36.923515,
        -4.970020,   11.231724,   0.657795,   57.239998,  5.564778,    39.098385,   3.188148,
        36.853634,   -1.853191,   -60.358421, -2.567023,  29.053682,   -23.202972,  -104.221588,
        -63.863380,  -56.335526,  -41.308392, -12.520741, -11.754315,  -58.597809,  -15.009220,
        21.295355,   -12.356915,  -62.201496, -11.897045, -37.922260,  11.321323,   -236.279709,
        -37.077549,  -13.873322,  -39.569260, -9.975870,  -36.708237,  -4.587296,   -23.320034,
        -33.994781,  -1.225607,   1.346118,   -19.165298, -27.092543,  -34.298485,  -69.632401,
        -12.114985,  2.758449,    -7.173429,  -6.647934,  -27.686089,  6.385574,    -20.317909,
        7.360656,    -13.966594,  -0.769518,  0.840906,   2.103644,    -13.695628,  11.454932,
        -8.629529,   19.086586,   -36.037457, -42.139992, -50.241409,  0.114218,    -18.672628,
        10.854139,   -0.771757,   12.672990,  4.272181,   1.102058,    4.775751,    3.783882,
        6.734371,    16.156233,   -13.776547, 3.214060,   -5.434813,   -15.459846,  -23.483955,
        13.719001,   -11.172398,  9.340497,   0.921059,   -2.371775,   21.759674,   30.106022,
        15.215577,   14.311056,   3.589579,   -5.039666,  5.634848,    11.401820,   5.691168,
        10.833825,   -4.483064,   -26.670292, 1.941423,   -7.857201,   12.993129,   6.632949,
        7.249948,    21.063927,   18.690004,  43.997459,  8.332390,    28.975826,   -2.304822,
        -17.170300,  10.403427,   -14.985439, 26.690653,  -22.842909,  -2.538182,   -9.857580,
        13.874180,   -1.698506,   19.655918,  11.196672,  -1.310640,   35.316223,   12.802292,
        89.267899,   12.794033,   86.426132,  -6.651175,  31.679794,   7.211613,    7.676168,
        -4.272713,   -27.901148,  22.185087,  -8.216200,  15.776997,   -59.485352,  28.472748,
        10.932187,   -0.959827,   -32.803738, 16.681162,  -36.379551,  -0.266895,   -68.394279,
        -18.263432,  -184.173340, 54.291546,  41.290337,  -3.312990,   -36.016319,  -12.742711,
        -13.911968,  2.986040,    -45.663662, 24.288971,  -137.589523, -4.566284,   95.807320,
        5.316796,    -60.639950,  -15.860577, 26.505518,  -23.268229,  10.786456,   -23.936718,
        -1.626130,   -13.524411,  0.755994,   -17.067736, -10.208587,  -19.495707,  -13.916058,
        -14.168649,  -31.355806,  -14.328784, -9.906657,  -36.759243,  -26.653122,  -10.618992,
        -22.956137,  -11.370451,  -17.624334, -12.082443, -14.296833,  -13.016673,  -21.035732,
        -10.594221,  -33.376789,  -10.402711, -44.209599, -3.683287,   -51.643841,  -9.500443,
        -11.617674,  -15.537530,  -21.985033, -2.410640,  -36.011215,  7.119781,    -32.330803,
        -0.554644,   -36.907997,  -4.229743,  -27.411572, -16.440430,  -8.749034,   -25.502287,
        -34.117561,  0.557935,    -10.005871, 3.210845,   -23.896606,  6.783234,    -32.745075,
        13.208359,   -29.442106,  8.600691,   -53.115223, 13.301170,   -38.044292,  6.538693,
        -29.645838,  -4.283440,   -43.297329, 1.738058,   -33.826618,  19.942751,   -28.273859,
        18.156534,   -49.928200,  18.422033,  -19.676699, 12.113717,   -101.469963, 30.862364,
        -12.080992,  1.237960,    -30.599962, 13.249874,  -74.000023,  19.350405,   -37.202145,
        31.578245,   -28.947271,  21.157911,  -45.249905, 27.520634,   -8.722190,   19.984379,
        -25.554485,  29.079170,   37.428310,  -1.245112,  99.074669,   -9.973732,   -25.407497,
        20.587265,   -20.765497,  17.184359,  -13.868259, 27.005089,   -8.427117,   27.201193,
        -16.184130,  28.127554,   -3.396370,  22.281174,  40.084198,   16.956964,   -9.306754,
        25.243240,   6.971308,    12.930745,  24.327892,  -4.381966,   18.034063,   20.950699,
        -4.398830,   22.630936,   -1.267148,  26.895267,  8.391954,    30.959841,   57.850033,
        22.672468,   71.398010,   14.593312,  -77.202461, 30.751541,   9.113052,    -10.170728,
        22.276476,   -44.220497,  4.374137,   -15.276340, 17.818382,   -21.932634,  20.490515,
        -72.386116,  9.378038,    -65.584518, -9.419327,  -102.805023, -48.619411,  -25.227701,
        -11.095035,  -6.802571,   -8.272023,  26.017603,  -0.059451,   -22.334959,  -4.134865,
        -5.138119,   7.122929,    -16.852283, 23.878897,  -71.893456,  18.744331,   -104.950897,
        28.963854,   -164.239792, -4.193941,  -53.330765, -19.011484,  -3.260646,   -32.303802,
        5.175570,    -19.185658,  -21.604139, -5.997200,  -33.130974,  -14.932672,  4.522878,
        4.311004,    -34.982300,  -5.473890,  -32.440300, -21.606813,  2.999844,    -21.156918,
        13.753472,   -41.217026,  28.918367,  -9.896281,  -28.010534,  -34.918907,  8.988616,
        -15.126133,  -4.566651,   -33.985146, 13.163151,  -31.423504,  38.156406,   -12.487890,
        -1.368293,   -36.833099,  19.493752,  -37.915375, 57.699516,   -46.720760,  42.528915,
        -21.849813,  7.779093,    -30.547476, 26.732113,  -60.181557,  86.459328,   -28.303503,
        35.309311,   -6.930713,   2.099025,   1.552472,   -23.585638,  -52.489006,  55.532536,
        -66.604836,  56.021126,   -48.262173, 61.637451,  47.901852,   -20.448181,  23.231302,
        -24.195234,  -40.106182,  65.535004,  29.618551,  -41.750046,  -62.394711,  100.972153,
        -28.980976,  33.676132,   -54.069557, 53.652691,  -50.535477,  53.755482,   -57.645950,
        69.482208,   -52.674118,  68.953163,  -15.522325, 64.360283,   50.296661,   -1.954920,
        30.755400,   17.729546,   -58.881557, 70.820274,  -61.604042,  90.604446,   0.330053,
        25.473343,   136.078323,  -86.989288, 1.803603,   32.260559,   98.665146,   -55.715485,
        -34.586018,  -38.887173,  7.412876,   -30.073933, -18.656261,  -0.489937,   -62.081245,
        -1.330134,   -1.589569,   -29.718182, -57.068562, -10.562759,  6.433418,    -25.219706,
        -27.543720,  -36.390446,  -35.593075, -28.815418, -14.821529,  -19.646967,  17.568136,
        -14.016858,  -22.872341,  5.324851,   -4.816503,  3.190066,    14.454015,   0.623415,
        23.468500,   -4.918707,   5.265147,   -24.885002, 29.081255,   -44.410099,  -24.211681,
        -15.072617,  29.811646,   -9.017200,  6.058530,   13.258099,   -19.326109,  22.315470,
        -9.007526,   14.227260,   -17.634729, -0.051982,  -56.484825,  -1.984259,   -83.681526,
        -1.607988,   -4.657982,   -3.456597,  -63.981945, 28.799471,   -54.259457,  33.466724,
        -60.198387,  28.180191,   -34.352863, 27.407467,  -42.605827,  18.202051,   -30.920099,
        -2.606824,   -46.087505,  20.345045,  -83.777992, 33.006332,   -59.455437,  28.481766,
        -153.352371, 45.651413,   -83.403717, 37.176659,  -89.100113,  34.155487,   -34.673687,
        33.855114,   -17.100283,  9.905560,   9.331073,   -3.509995,   -8.761489,   19.026289,
        -7.903615,   38.289150,   -99.408035, 42.262432,  -109.852226, 48.478436,   -43.817287,
        49.126293,   -108.776161, 51.050610,  -60.374992, 20.276138,   70.109428,   -17.975035,
        -17.634342,  18.343575,   25.932217,  -5.109485,  -29.203979,  25.627508,   -33.302364,
        31.935068,   -30.982838,  39.096203,  -39.791824, 33.338173,   -204.689056, 31.113865,
        210.843719,  -95.024689,  63.459248,  -14.897739, 80.132492,   -31.398336,  25.884722,
        -27.769072,  97.533989,   -29.271997, 60.797241,  -12.704711,  -49.446819,  26.005636,
        -312.990326, -37.688446,  0.000000,   0.000000,   90.000000,   90.000000,   72.406380,
        95.259003,   14.090453,   61.600506,  -8.250427,  38.634239,   -7.260951,   13.612509,
        -4.803552,   15.196724,   17.369698,  14.342371,  10.142944,   10.948315,   -3.997702,
        -9.729558,   22.722351,   72.217636,  -1.772358,  1.860838,    -20.973051,  -14.433909,
        19.887764,   8.354688,    32.167389,  0.202534,   5.648318,    14.414228,   10.553156,
        23.867983,   64.535858,   30.740953,  3.166254,   1.208494,    0.000000,    0.000000,
        -0.756305,   1.290606,    3.144289,   2.939796,   2.967430,    3.284766,    1.729424,
        4.899973,    0.000000,    0.000000,   0.000000,   0.000000,    5.099723,    -2.377727,
        1.698699,    -3.004347,   10.503366,  -4.864935,  16.793968,   2.581496,    0.000000,
        0.000000,    20.000000,   10.000000,  3.642802,   -2.032730,   -5.120923,   -44.442474,
        11.709194,   -17.109304,  6.997411,   4.196935,   -47.200268,  -30.805254,  -3.683779,
        -14.355513,  7.867878,    4.826338,   -28.269075, -42.559517,  -12.257905,  -12.618246,
        4.891200,    9.216635,    -55.845417, -11.202193, -9.063047,   -6.708473,   1.607502,
        18.152208,   -68.850319,  -5.243069,  -53.566154, 18.467880};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
