#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.029219,   1.000000,    0.592578,    2.183934,    7.688072,    0.000000,    0.251109,
        0.173975,    0.381639,    0.655484,    7.345517,    7.355375,    1.893484,    1.000000,
        1.000000,    -0.005536,   0.140942,    0.086826,    0.043020,    -64.093674,  225.785553,
        464.721252,  476.947144,  484.954132,  547.099365,  639.470093,  961.199219,  1512.613525,
        1530.594238, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -51.442326,  -6.666942,
        -55.693764,  -16.851097,  -42.230305,  -0.810479,   -40.629417,  -41.609398,  -5.310373,
        -5.210446,   26.999805,   1.500598,    57.499958,   -17.513880,  -33.156914,  -28.439854,
        -22.874043,  -14.043331,  -31.811089,  -12.453994,  -29.883986,  -10.139074,  5.149557,
        -1.106193,   7.186773,    7.773037,    23.697344,   6.037127,    28.431271,   -6.938207,
        8.666950,    -21.280928,  -12.379668,  -1.513756,   -23.276245,  -0.370561,   -2.639178,
        -2.766959,   17.183594,   22.245716,   9.798729,    22.133146,   15.579135,   13.844136,
        4.481865,    9.925559,    18.087492,   -9.046428,   10.737425,   26.274616,   -3.672178,
        27.651503,   -0.255697,   21.586580,   46.524483,   1.136934,    47.741791,   6.011006,
        16.491091,   24.812229,   -29.259533,  16.825737,   21.989826,   -0.056048,   3.274247,
        19.344030,   9.166913,    62.206512,   65.976028,   20.795311,   101.541580,  -31.436890,
        84.621071,   192.439896,  135.950256,  -2.215251,   141.694901,  21.953611,   86.549423,
        -19.373201,  225.287186,  196.532516,  171.494598,  258.680267,  198.865707,  226.898315,
        236.900986,  148.589706,  140.645340,  145.674835,  47.982845,   149.688614,  -116.997528,
        228.500122,  -6.193273,   176.356995,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -144.688202, -58.554138,
        -59.967491,  -112.781998, -79.744766,  -40.654896,  -65.890060,  16.941792,   -35.741714,
        -22.604118,  -27.151865,  -41.847282,  -55.063606,  -62.433811,  -163.146057, -95.039604,
        -62.053604,  -44.266308,  -139.777557, 16.814756,   -15.697514,  -16.541733,  -0.925103,
        -11.609817,  -6.435886,   -22.372341,  -6.670153,   -36.873917,  20.945841,   -45.701904,
        -60.104881,  -27.270704,  -33.642387,  -36.223831,  13.189949,   -10.627973,  -21.277128,
        -14.841503,  18.272560,   31.322115,   35.452240,   24.239824,   5.291224,    -26.755522,
        23.374674,   -49.390938,  -60.175179,  -42.945606,  -14.886174,  -14.347705,  -10.963144,
        13.059897,   34.189472,   29.914740,   15.810204,   41.661533,   30.037840,   22.473728,
        35.404812,   7.840345,    32.266968,   -14.047533,  -7.703446,   -12.971539,  -7.850770,
        22.539097,   12.842962,   22.347797,   26.502760,   41.807236,   111.939995,  22.568226,
        22.327852,   37.120323,   98.843300,   11.358790,   19.228809,   14.257979,   43.107201,
        -19.954529,  -95.366127,  -30.585306,  50.711136,   9.307090,    58.483276,   9.604316,
        89.487083,   33.644447,   102.967735,  8.273425,    172.853302,  -3.164379,   45.664597,
        2.808265,    22.146317,   -19.830360,  -48.347168,  1.046330,    -30.663713,  19.698814,
        6.742500,    -8.256647,   51.948582,   26.059797,   49.498318,   14.447978,   166.661407,
        -19.025858,  7.182872,    -14.087167,  -225.791870, 16.663994,   -240.464355, -105.756630,
        -62.987717,  -58.871944,  -144.660950, -8.723016,   -76.788361,  0.795224,    54.213085,
        -59.246521,  -64.013344,  -3.975930,   -112.146690, -31.271105,  -152.476349, -145.742798,
        -5.556234,   -38.441090,  -33.323284,  -29.419977,  -39.328278,  1.735199,    -18.062449,
        17.782875,   -30.045877,  13.602761,   -35.234692,  -28.960022,  -43.320404,  -30.803465,
        108.875252,  8.856980,    0.717110,    -45.738590,  0.084890,    -27.678169,  -4.572810,
        -15.951681,  -7.035441,   13.782677,   2.922412,    4.680985,    24.999254,   16.664135,
        53.312531,   -38.307575,  -68.130760,  -26.397589,  -2.625725,   -12.900932,  19.224438,
        -33.226765,  13.277777,   15.297287,   25.984043,   -0.488663,   11.891472,   12.184916,
        41.628891,   -5.180796,   24.716980,   -31.752119,  11.592684,   -41.975006,  2.325526,
        -43.072777,  11.290106,   -1.745364,   23.178236,   -1.242666,   27.344692,   15.147329,
        43.968136,   -3.629107,   15.169897,   11.152275,   36.376595,   -9.259007,   16.784046,
        -52.598969,  -1.358863,   -6.963980,   18.169731,   34.753677,   33.249718,   -2.462097,
        61.558743,   -5.973909,   40.736904,   24.439123,   87.882935,   -0.701515,   -10.097144,
        21.768522,   -15.686681,  -9.779737,   38.968323,   -11.142845,  36.534557,   15.418906,
        57.801498,   8.886196,    100.232414,  -35.536098,  78.842354,   1.780997,    117.919342,
        5.001411,    42.669670,   10.742068,   63.027317,   -17.291792,  -35.621010,  -9.702209,
        -0.810677,   26.012424,   32.800724,   9.955549,    -13.431844,  18.665398,   38.050030,
        -0.269061,   -13.701735,  24.932350,   48.305626,   6.886552,    -66.454010,  -77.222763,
        -40.352688,  -21.758230,  -35.744827,  -7.725526,   -49.013828,  23.052610,   -131.225204,
        32.737957,   14.281628,   -3.350578,   -105.724785, 18.385229,   54.434883,   -26.094652,
        196.274582,  -62.670708,  17.045378,   -7.273296,   7.502679,    -16.286516,  -3.658713,
        -5.004532,   8.158179,    -16.657751,  8.350249,    -29.576883,  -18.438992,  -4.462330,
        -41.235718,  -6.009791,   -33.127609,  -29.101112,  7.701822,    4.278387,    -9.972255,
        -15.617439,  -14.624196,  -5.687766,   -12.097620,  -0.663599,   12.980672,   -8.725819,
        12.616390,   -34.306374,  -18.953186,  -12.164196,  -78.411583,  1.198786,    -36.671520,
        -2.188628,   -54.480583,  -12.213704,  -34.481964,  2.248018,    5.127066,    -11.285515,
        1.185166,    -22.076735,  -8.104828,   -13.224592,  10.348575,   -18.939032,  -14.324464,
        -30.026821,  -43.841206,  10.704443,   -16.143133,  7.317062,    -12.747979,  5.429867,
        -6.172751,   -1.515018,   12.877110,   -4.901632,   -31.309031,  9.868128,    -26.200329,
        20.129095,   -48.573704,  13.786734,   -13.470602,  22.526060,   19.411991,   2.791691,
        22.173042,   3.919825,    35.218868,   -14.158071,  -20.141850,  10.472155,   19.095371,
        1.874439,    19.273827,   2.267572,    -19.796888,  4.967457,    9.831907,    32.379906,
        1.191228,    7.342545,    20.074629,   7.208645,    21.249992,   -1.060369,   69.772919,
        -14.343326,  31.382635,   -8.151278,   63.205524,   2.067043,    63.677357,   -0.467924,
        14.501630,   31.564135,   7.185928,    35.457092,   33.667816,   31.807947,   69.482491,
        13.499866,   42.992290,   27.459742,   97.982384,   6.044760,    29.827881,   19.628283,
        157.803406,  -6.266840,   37.412521,   -10.113975,  59.299885,   -0.750599,   52.897316,
        16.054190,   27.376703,   22.402929,   20.638350,   25.361216,   12.800652,   32.454258,
        17.585186,   26.148237,   70.288231,   17.181646,   -10.493597,  6.124732,    4.534209,
        -2.642797,   -1.707864,   -63.490345,  -1.305142,   -42.318394,  7.705064,    -87.355507,
        -44.948364,  -89.377975,  -116.737068, -27.306650,  -293.458649, 248.900101,  -9.060998,
        -18.024113,  -1.228147,   -50.197269,  11.499219,   -26.204288,  -1.454883,   1.461466,
        24.191374,   -96.261742,  18.626846,   -116.707100, -25.851328,  -157.172211, -25.344507,
        -82.613831,  -32.814793,  75.984200,   -8.523192,   12.973689,   -29.239874,  73.025063,
        1.262384,    -7.115831,   -9.984911,   10.356589,   15.950130,   -14.902579,  23.947552,
        -81.076370,  -44.176445,  70.465668,   -19.852167,  27.447409,   -9.905725,   22.810469,
        -19.669744,  18.038401,   9.767723,    11.518870,   -0.020400,   32.326729,   -13.521331,
        49.950020,   -13.875815,  -11.443624,  1.791492,    -38.671768,  -25.913582,  57.397758,
        -48.180962,  118.019928,  -48.621113,  101.199524,  1.267044,    49.577507,   22.755630,
        -12.365367,  11.491738,   14.827037,   5.388859,    -0.543466,   5.377995,    -37.677166,
        -37.896553,  23.933584,   8.692904,    0.558878,    -30.041862,  83.534180,   -1.378369,
        22.084894,   5.364239,    18.857038,   86.088196,   -13.039607,  113.539574,  -106.655487,
        19.202003,   -31.939962,  -48.829098,  32.840622,   -54.349617,  109.417831,  -17.209164,
        78.182816,   9.039151,    19.315607,   17.546200,   9.108092,    -21.112141,  105.151062,
        110.754494,  -84.510956,  152.826569,  -159.136337, -112.224152, 234.070633,  -63.443542,
        121.426178,  -48.603531,  133.481949,  -31.805687,  56.463608,   3.026354,    46.755852,
        -23.175402,  95.947968,   37.154148,   -9.042859,   -67.868896,  194.261063,  30.210188,
        -13.369343,  10.747702,   -5.493914,   0.543410,    20.031113,   -107.392838, 37.319412,
        -49.255802,  5.123772,    -76.814461,  32.902786,   25.675278,   21.342342,   37.302071,
        2.256317,    -14.254760,  5.902465,    41.054958,   -0.153350,   -33.712685,  -15.761678,
        -120.685364, 19.229130,   -129.112442, 17.181301,   -92.817383,  15.146830,   5.381786,
        -2.068724,   22.248213,   -7.289590,   -6.211845,   -41.777557,  -5.140124,   -21.946751,
        -92.460144,  -11.085347,  -45.300159,  -13.190584,  -95.815910,  3.443830,    -128.007828,
        1.361912,    -30.394583,  -27.073610,  -57.862610,  -27.981518,  -30.647263,  -36.363152,
        31.376591,   -39.011971,  14.629681,   -37.436874,  -48.933273,  -13.201859,  -3.731830,
        -20.747726,  -60.666969,  -20.140390,  -41.614399,  -38.854790,  -119.597473, -48.730835,
        -6.780395,   -40.568447,  -4.128941,   -6.982001,   -60.258446,  2.278527,    -50.720753,
        -0.171226,   -55.959583,  -14.547775,  42.248100,   -33.845337,  65.047943,   -44.108761,
        -33.411747,  -54.077702,  -4.813560,   -4.309372,   -56.565327,  33.014610,   10.765485,
        20.358704,   -87.316879,  13.379737,   -0.183958,   -9.347459,   43.322563,   -1.363490,
        -12.402415,  16.369020,   -110.361870, -12.285432,  74.661972,   -3.377849,   -30.537291,
        36.076675,   12.325345,   28.154339,   9.971247,    35.740875,   62.935863,   0.194400,
        23.164541,   -36.158669,  -228.780350, 46.624306,   127.964890,  -65.670403,  32.619396,
        -91.808769,  56.055725,   -6.347415,   -9.415002,   26.308548,   59.848915,   -4.384969,
        -33.729439,  -3.233354,   85.535561,   -48.223480,  -223.787781, 49.965569,   -126.155342,
        -154.839706, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    -52.529411,  138.384521,  -125.298790, 155.693069,
        -83.895744,  150.319855,  -120.970154, 188.936859,  29.602976,   116.342896,  -6.285771,
        127.371872,  -4.374306,   137.424149,  -111.254234, 113.527603,  -64.886116,  167.395157,
        -83.990471,  169.747375,  -96.242867,  162.277908,  -62.681797,  141.144989,  -47.971291,
        156.558151,  -72.565941,  176.859772,  -77.511375,  184.962982,  -14.233128,  116.047653,
        -23.769405,  232.510818,  -59.569939,  239.482407,  -74.895828,  213.846451,  -43.639095,
        180.194366,  -58.124393,  213.270584,  3.572995,    211.650406,  -59.213966,  239.463837,
        -23.826385,  219.697922,  22.495386,   342.287750,  -2.930734,   334.797241,  -3.204329,
        308.572205,  -4.744017,   255.698547,  -16.481256,  240.740921,  -55.234703,  272.887878,
        -45.964272,  299.827423,  -49.452015,  292.857819,  92.883308,   466.365509,  84.267555,
        451.887634,  93.323242,   427.610077,  87.991814,   363.958160,  84.908051,   309.199738,
        63.838085,   301.885529,  83.771950,   356.075409,  127.702599,  317.355957,  283.561829,
        488.679047,  192.266678,  568.035278,  236.733643,  532.179016,  230.897095,  445.770203,
        143.275085,  444.732483,  43.607876,   443.754608,  -115.424446, 539.096069,  8.135807,
        480.603790,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    57.687290,   10.323988,   13.377820,   35.115475,
        14.663610,   21.018480,   29.043568,   -5.031822,   19.709288,   -3.516728,   11.467986,
        -10.129731,  0.000000,    0.000000,    -5.146535,   -2.320659,   -5.069632,   4.041855,
        -24.270760,  -116.742851, 13.939837,   -206.784729, 20.458824,   1.746656,    41.522804,
        -9.095694,   25.609425,   -9.456679,   10.132125,   0.055921,    -0.000000,   0.000000,
        -5.591792,   -2.218178,   2.394223,    11.926368,   -29.887394,  8.579870,    19.467436,
        287.944855,  36.714935,   98.815887,   0.361063,    19.873270,   -20.730061,  -74.665443,
        19.460325,   27.827660,   41.237595,   5.218864,    -643.260681, 108.508194,  -26.827297,
        -61.904270,  -29.476519,  -35.597733,  33.176853,   -23.921501,  0.000000,    0.000000,
        9.711806,    13.545010,   12.348202,   19.720787,   10.004413,   58.899639,   -18.643227,
        127.835449,  -317.315979, 98.479080,   -150.108139, -13.887550,  -52.504772,  -26.331861,
        -17.197762,  -24.078535,  0.000000,    0.000000,    18.558283,   30.667465,   4.704375,
        80.679192,   -2.987632,   124.310059,  -153.567490, 223.710876,  865.343994,  -1428.204102,
        -137.296997, -238.715866, -163.965897, -78.242928,  -120.976555, -34.515301,  0.000000,
        0.000000,    105.161972,  52.320320,   290.608612,  -7.030096,   483.552246,  -99.217499,
        1010.936768, -588.343384, 1.811582,    0.880945,    0.000000,    0.000000,    1.284241,
        3.721306,    3.558064,    6.903164,    3.505307,    5.692035,    2.414483,    6.931505,
        0.000000,    0.000000,    4.330016,    -0.750908,   1.144339,    3.795606,    2.211159,
        -1.200616,   4.238695,    -1.852508,   -0.778937,   6.126937,    11.098991,   -2.654587,
        0.752481,    4.518623,    2.389653,    17.039467,   -4.423011,   -5.399211,   0.627106,
        1.492636,    -3.938502,   -1.687552,   6.578314,    -3.662297,   0.064350,    13.267111,
        -5.883239,   -3.211195,   -1.291038,   -9.321374,   -2.973257,   -14.916724,  20.000000,
        10.000000,   1.917587,    -4.177342,   -11.491371,  -54.930698,  11.514256,   -15.646755,
        16.948242,   7.416547,    -54.714863,  -35.438774,  2.087981,    -17.847115,  4.721193,
        12.504105,   -51.916935,  -49.372543,  -22.032158,  -16.981773,  0.278240,    16.410650,
        -65.690910,  -6.955019,   -12.905887,  9.313758,    4.531446,    29.854670,   -102.337875,
        -11.978870,  -64.093536,  4.287004,    0.000000,    0.000000,    -45.927540,  -47.113342,
        -37.276272,  -48.066673,  -26.988861,  -43.464653,  -3.998898,   -56.508240,  30.888271,
        -72.305443,  54.361794,   -81.189819,  101.314171,  -77.926376,  251.093735,  -160.193146,
        0.000000,    0.000000,    61.376415,   31.723179,   81.774246,   34.020397,   85.414413,
        45.375603,   80.839912,   33.988575,   77.292000,   46.631538,   0.000000,    0.000000,
        0.000000,    0.000000,    -37.599838,  -2.956897,   -104.206001, -41.221527,  -129.774734,
        -80.958069,  -161.206177, -101.689766, -189.771164, -129.154037, -16.752621,  1.812045,
        -0.164927,   -104.855804, 8.850266,    -77.456772,  -122.040596, 3.926097,    -66.572701,
        -7.455536,   -28.311583,  21.792492,   -6.968749,   8.928108};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

std::string getPstPieceTypeName(int idx) {
    if (idx == EvalParams::kPassedPawnPstIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

std::string getTropismPieceTypeName(int idx) {
    if (idx == EvalParams::kDoubledPawnTropismIdx) {
        return "Doubled pawn";
    } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
        return "Isolated pawn";
    } else if (idx == EvalParams::kPassedPawnTropismIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

void writeSquareTable(const EvalParams::SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(
        const EvalParams::PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < pieceSquareTables.size(); ++pieceIdx) {
        out << "\t" << getPstPieceTypeName(pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

void writeTropismTable(
        const std::array<TaperedTerm, EvalParams::kNumTropismPieceTypes>& tropism,
        std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n",
                getTropismPieceTypeName(pieceIdx),
                taperedTermToString(tropism[pieceIdx]));
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    writeTropismTable(params.ownKingTropism, oss);
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    writeTropismTable(params.enemyKingTropism, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
