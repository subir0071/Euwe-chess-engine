#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,   8.599006,    0.000000,    14.301018,
        92.975197,   307.195648,  317.970490,  281.631866, 323.116425,  383.971069,  559.559021,
        862.737305,  1001.244080, 0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -26.800735,
        13.885860,   -20.194304,  -2.868974,   -19.842806, 0.731936,    -23.152918,  -29.093445,
        -2.988941,   23.299871,   14.467656,   -5.957143,  33.137150,   -3.517104,   -6.280215,
        -14.130275,  -11.163579,  6.306601,    -14.439426, 2.823936,    -10.194947,  -4.042459,
        -9.263298,   -5.076688,   -10.956016,  1.072245,   6.492902,    -0.864271,   30.140665,
        -4.085095,   10.695392,   -9.878129,   -6.677505,  5.713506,    -13.033844,  12.121523,
        -0.466686,   -0.502782,   6.631702,    -13.071774, -7.139566,   -6.525237,   9.831171,
        -0.007059,   -2.393159,   1.798274,    -14.593449, -4.683822,   -6.713640,   32.433018,
        -1.818404,   16.865381,   -6.919345,   -2.731895,  0.232686,    -3.172257,   11.681166,
        -0.647536,   1.044367,    -5.764589,   -1.576660,  3.787729,    -23.840557,  -0.287061,
        -5.412704,   44.171787,   20.088266,   29.827414,  15.215475,   11.757809,   31.447931,
        -15.320178,  41.784748,   -18.795788,  32.964836,  -0.054566,   69.040848,   19.728672,
        28.173340,   -12.519213,  73.730438,   69.921402,  54.727047,   96.650551,   77.562637,
        57.027039,   96.810478,   61.662807,   55.646931,  77.432213,   17.919781,   80.718323,
        -33.806530,  120.047600,  -0.520411,   76.917084,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -241.757751,
        -60.659443,  -32.026810,  -36.876125,  -63.344543, -17.423706,  -22.043348,  -38.562469,
        -34.278618,  -26.096275,  -4.908386,   -28.113491, -43.781281,  -70.803413,  -167.851166,
        -37.515095,  -59.808994,  -61.731365,  -84.652580, -17.789726,  -33.510914,  -32.753429,
        -5.775735,   -2.361969,   -6.285086,   -16.390604, 23.537840,   -10.979655,  -34.313950,
        -12.623870,  -38.133266,  -34.380901,  -31.504080, -22.633059,  -10.303558,  -6.769943,
        -0.763990,   -0.503705,   -1.198979,   1.349901,   40.306442,   6.252400,    1.170197,
        -13.006227,  15.018126,   -14.607919,  -30.790436, -25.111776,  -17.627485,  -22.098932,
        -18.896698,  -8.280053,   29.738878,   9.145183,   0.095477,    28.804461,   20.200073,
        21.441126,   23.352091,   12.696257,   8.816182,   22.454357,   -11.524472,  -17.696512,
        -13.106859,  -17.553238,  6.762923,    1.522491,   35.261730,   15.460982,   58.668003,
        18.698032,   21.839485,   20.071140,   58.018848,  16.715492,   -0.441130,   7.366644,
        14.836817,   -26.229065,  -40.385582,  -28.205696, -0.765929,   12.053967,   35.997749,
        27.570566,   71.717773,   19.903982,   88.840424,  -0.342200,   112.337006,  0.518830,
        28.429071,   5.844616,    -22.283997,  -2.503534,  -6.520037,   -26.568899,  -35.250824,
        -10.365399,  15.244635,   -11.371162,  36.126545,  16.874582,   16.480391,   4.215078,
        30.920544,   -15.127963,  -58.743347,  -0.848199,  -1.339953,   -20.857130,  -120.457924,
        -77.628754,  -4.901872,   -19.509195,  -64.328575, -19.500494,  -54.678886,  -8.602427,
        51.658413,   0.431756,    3.135414,    -33.108398, -173.673965, -13.295148,  -242.430664,
        -75.877769,  4.610404,    -39.579807,  -16.813713, -42.482803,  -8.062135,   -20.331377,
        -33.660408,  -5.499485,   -0.761615,   -17.664949, -25.072828,  -28.019712,  -28.538776,
        -19.675241,  -9.814313,   -17.737003,  -6.884355,  -20.558523,  3.038079,    -18.292416,
        5.461895,    -8.190483,   -4.929151,   4.433629,   3.190786,    -12.030616,  9.283531,
        -7.560523,   23.634415,   -31.462948,  -41.274445, -36.239315,  -6.074882,   -13.676569,
        11.835451,   2.184111,    16.142281,   2.805859,   5.512196,    7.917462,    1.819512,
        8.590613,    17.968237,   -17.846491,  11.942572,  -8.705878,   -12.478061,  -16.148462,
        12.142551,   -16.279026,  7.593937,    2.034920,   1.471057,    14.606692,   25.926184,
        15.151435,   20.441164,   1.817346,    -5.431484,  6.009640,    2.821765,    9.673268,
        12.263427,   -7.230437,   -20.219238,  -0.782423,  -3.171182,   11.123180,   -4.878066,
        5.775556,    25.399656,   18.610266,   39.904781,  10.380818,   24.628290,   -1.454829,
        -14.750280,  7.411628,    4.117296,    10.058869,  -13.956559,  0.344519,    -7.274896,
        6.222102,    2.747643,    9.083268,    17.451408,  -1.328360,   34.367054,   12.552373,
        87.046349,   15.183472,   71.465897,   -11.323610, 20.740164,   12.859318,   -1.885586,
        -17.475084,  -38.835247,  14.891811,   -8.059916,  17.561548,   -71.840820,  29.740736,
        -0.094026,   -3.941560,   -26.655993,  13.568238,  -40.233849,  4.158378,    -62.857327,
        -17.946100,  -118.722992, 39.851765,   47.286755,  -8.047876,   -1.374855,   -16.339359,
        -27.250099,  10.749493,   -73.743172,  17.425909,  -64.700996,  -18.012577,  89.797523,
        -1.486021,   -63.895222,  -27.097712,  25.830210,  -24.427082,  13.477376,   -22.889616,
        1.613455,    -12.298646,  1.051020,    -14.425493, -10.467635,  -17.217106,  -14.431036,
        -12.307230,  -28.459715,  -19.867132,  -9.057900,  -35.104614,  -29.217028,  -13.226097,
        -12.607945,  -11.598611,  -14.262932,  -4.640949,  -15.001427,  -12.210450,  -23.282492,
        -7.919444,   -32.475319,  -15.777843,  -37.107647, -14.938971,  -56.273846,  -13.392519,
        -14.789928,  -12.641935,  -23.297110,  0.287447,   -43.462029,  3.962617,    -24.914043,
        -5.822647,   -38.225067,  -3.435920,   -13.526012, -23.411663,  -16.397003,  -21.995743,
        -35.772270,  -6.037792,   -10.049727,  -2.438927,  -7.187332,   -2.176515,   -22.877813,
        9.060512,    -27.316801,  7.028862,    -48.370609, 5.573212,    -40.069183,  5.706114,
        -29.361866,  -11.358445,  -35.272209,  -4.003276,  -22.757126,  14.393676,   -39.410595,
        15.771381,   -49.748863,  14.499633,   -23.424644, 14.662682,   -92.765572,  23.987698,
        -13.668436,  2.842967,    -28.140362,  10.559620,  -58.488628,  11.519307,   -26.983364,
        27.080334,   -35.951191,  19.115755,   -47.679237, 23.419258,   -15.191428,  20.536869,
        -50.836285,  36.335514,   19.812834,   8.802362,   83.038445,   -6.205753,   -15.455294,
        14.595542,   -16.287279,  18.318300,   -23.230320, 25.821394,   -18.336672,  27.862309,
        -24.805380,  28.902349,   -19.349302,  28.481468,  12.832899,   24.031254,   -30.920052,
        25.770840,   13.672843,   13.910073,   12.810332,  0.742611,    -2.322163,   19.985674,
        -19.854019,  25.505692,   -17.487261,  29.342804,  -10.789453,  34.267826,   21.437967,
        29.329212,   13.672011,   26.128239,   -62.212849, 25.011753,   7.976139,    -15.840448,
        27.270126,   -73.696030,  15.187223,   -49.717125, 18.279404,   -15.727684,  14.458556,
        -52.730671,  4.489632,    -66.516068,  6.834121,   -155.540207, -43.222218,  -69.448860,
        3.898417,    -29.133450,  -0.770318,   8.505472,   2.985510,    -20.268461,  -2.644864,
        -21.832705,  4.708820,    -6.531723,   15.066090,  -43.439255,  19.724180,   -120.098785,
        13.036252,   -128.527374, 8.200743,    -67.377617, -17.129032,  7.439504,    -30.733603,
        6.367177,    -20.936367,  -19.606543,  -11.362130, -29.351536,  -14.250461,  15.019311,
        11.467813,   -58.354801,  -3.626430,   -50.646641, -22.122267,  -11.931480,  -21.936804,
        5.267489,    -40.283768,  15.433915,   -15.861270, -8.408569,   -30.481495,  -1.457832,
        -14.643585,  -8.704840,   -33.339130,  19.022518,  -25.864624,  13.116436,   -8.852715,
        -14.034126,  -28.669355,  5.457139,    -49.048752, 65.461205,   -50.258659,  52.705353,
        -37.519863,  20.973322,   -30.058130,  37.204868,  -67.808594,  82.904884,   -26.648933,
        20.675011,   -22.102781,  11.067649,   -0.319912,  -10.691027,  -40.838680,  40.323612,
        -51.653111,  32.601803,   -36.403137,  44.466522,  16.405069,   16.350380,   4.687078,
        -21.410610,  -39.776356,  46.981194,   26.960072,  -38.480198,  -43.719566,  55.367767,
        -32.302505,  35.677608,   -49.458168,  51.213520,  -49.185184,  39.102608,   -51.894211,
        75.653099,   -38.439682,  55.538338,   -32.962414, 59.035049,   17.230627,   25.937979,
        60.539841,   -26.557690,  -50.141228,  58.521252,  -41.445446,  57.473320,   -26.957743,
        61.087658,   19.504280,   17.837671,   -28.265282, 70.405609,   41.041954,   8.570374,
        -23.494856,  -33.552994,  8.532250,    -27.555241, -21.451874,  1.136222,    -66.863533,
        -10.905632,  -3.436998,   -25.815496,  -53.369766, -17.498905,  5.958454,    -21.415276,
        -25.924063,  -35.138863,  -6.535492,   -32.281422, -21.662420,  -11.653674,  1.656204,
        -10.599291,  -15.344522,  2.245644,    -6.162989,  0.001963,    6.957495,    2.796639,
        21.191069,   -2.534285,   5.726018,    -21.955395, 50.575424,   -38.470451,  -24.335115,
        -12.753643,  17.737974,   -2.567694,   -9.513080,  12.570252,   -9.608566,   20.478546,
        -1.226834,   11.877077,   -14.596416,  -1.056268,  -46.523083,  -2.541098,   -29.569094,
        -5.083676,   7.264548,    -3.201232,   -44.538288, 24.376917,   -67.125183,  31.194096,
        -70.934532,  25.668074,   -35.082649,  27.716965,  -31.040991,  13.009614,   -13.276227,
        -10.419122,  5.061973,    17.915743,   -72.331612, 28.014782,   -62.778114,  32.327000,
        -146.436890, 39.006939,   -119.149391, 33.478264,  -99.518105,  32.809368,   -22.393351,
        28.880901,   0.417513,    6.598030,    25.939377,  -14.411476,  3.000680,    17.507702,
        -59.123817,  43.541245,   -83.763748,  39.290211,  -138.433075, 41.906078,   -28.904976,
        47.132763,   -84.397079,  49.410496,   -45.095337, 19.567122,   43.236301,   -16.484779,
        -63.210224,  23.575787,   -6.594257,   0.510784,   -22.288202,  15.803229,   -41.595699,
        32.762157,   -27.727522,  32.445408,   16.285414,  39.349258,   -135.518280, 8.530325,
        133.786743,  -91.372253,  59.827721,   -26.104414, 51.246922,   -5.614352,   33.707726,
        -9.805573,   48.533100,   -20.635916,  66.900589,  -15.732238,  3.907766,    10.796595,
        -147.032806, -61.399254,  0.000000,    0.000000,   90.000000,   90.000000,   59.660820,
        94.546478,   16.079153,   60.196075,   -4.136081,  34.735058,   -4.323223,   13.250278,
        -1.060649,   9.754553,    14.238158,   16.571476,  9.940074,    9.301438,    -5.446893,
        -4.342035,   -7.060883,   2.061977,    29.917456,  66.712372,   -1.629188,   -3.377256,
        -23.717817,  -14.851508,  18.185162,   10.336349,  28.060638,   4.117293,    1.409923,
        11.503549,   8.369921,    17.019358,   48.789005,  19.347479,   2.794660,    1.074020,
        0.000000,    0.000000,    -1.271271,   0.978691,   3.153361,    3.379994,    2.864426,
        3.311944,    2.012494,    3.982355,    0.000000,   0.000000,    0.000000,    0.000000,
        5.106637,    -2.023321,   0.640841,    -2.890130,  10.975609,   -4.232266,   17.635046,
        -0.835862,   0.000000,    0.000000,    20.000000,  10.000000,   3.103237,    -1.153720,
        -5.424042,   -40.600449,  9.896673,    -13.716454, 7.897441,    3.150294,    -43.932461,
        -33.358292,  -4.119900,   -12.973024,  7.834134,   5.800920,    -27.872616,  -38.517262,
        -10.551428,  -12.567161,  6.565158,    8.607020,   -46.695827,  -17.061556,  -5.822687,
        -5.783468,   1.211817,    15.901701,   -68.162338, -8.302994,   -58.316101,  27.558971};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
