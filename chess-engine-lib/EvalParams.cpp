#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,     0.000000,    0.247651,
        0.181720,    0.329361,    0.752030,    0.861747,    1.000000,     1.000000,    1.000000,
        1.000000,    -0.003709,   0.127981,    0.093367,    0.043559,     -146.433807, 198.355652,
        455.379486,  466.801086,  460.784058,  508.931122,  614.102234,   896.773621,  1306.725342,
        1544.477051, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -31.891350,  -4.880303,
        -38.651924,  -10.317943,  -38.283684,  -8.389074,   -37.352909,   -44.615173,  -15.334353,
        7.049276,    24.527376,   -12.407692,  47.973598,   -8.511006,    -26.829433,  -26.464287,
        -8.847164,   -7.463259,   -18.317924,  -2.931788,   -29.944965,   -13.131709,  -5.950013,
        -1.200235,   0.371634,    -7.600462,   8.832284,    -4.935559,    30.211506,   -0.577766,
        4.125299,    -21.983946,  -1.807096,   4.082960,    -15.334308,   5.506870,    -5.749347,
        -2.577016,   14.769659,   -6.137869,   -4.285494,   6.888453,     17.083668,   3.495373,
        -0.458981,   19.688627,   -14.095092,  -1.664350,   17.474152,    42.849781,   5.314646,
        34.921703,   9.963382,    15.362880,   15.049128,   -0.779138,    32.472519,   1.405880,
        -1.910781,   18.208447,   -38.352036,  22.029886,   -19.985067,   6.249837,    -1.706105,
        88.657074,   13.823954,   80.685722,   18.806274,   49.919270,    30.877039,   2.760578,
        83.313049,   -39.146099,  98.489334,   -3.075692,   4.708337,     22.315012,   43.630314,
        -6.713939,   200.279343,  198.979370,  191.386734,  236.149368,   213.703918,  186.824448,
        246.313324,  138.290009,  174.783493,  126.437920,  221.923431,   134.194687,  -99.682281,
        188.618332,  22.506910,   141.519989,  0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -341.748779, -48.235374,
        -51.591484,  -59.799782,  -102.542427, -41.684639,  -26.231531,   -21.342743,  -24.967438,
        -52.128799,  -11.081571,  -47.152935,  -49.401379,  -62.806770,   -124.335228, -57.408760,
        -68.413300,  -65.357010,  -92.281853,  17.062906,   -23.731594,   -20.154968,  0.248834,
        -12.330759,  -10.290553,  -28.654106,  -9.811526,   -25.461269,   -21.476736,  -33.123844,
        -28.898508,  -49.381912,  -52.179222,  -10.344594,  -8.737000,    -15.129654,  -21.388012,
        -27.307953,  7.647247,    13.604945,   43.794975,   22.091921,    9.057672,    -22.327301,
        22.143446,   -54.273945,  12.262940,   -66.622894,  -14.480714,   -24.869921,  -2.458085,
        14.808179,   20.556704,   36.943394,   4.890729,    36.525311,    16.603617,   35.552162,
        19.660572,   11.601947,   50.752098,   -13.944430,  1.395270,     -15.848406,  -28.433769,
        5.084305,    4.168272,    18.911184,   22.396935,   30.709286,    64.375618,   33.973385,
        14.979175,   25.011454,   83.340706,   9.330407,    23.904772,    3.845585,    15.208888,
        -5.802915,   -47.372421,  -34.095142,  -5.723102,   17.144905,    65.210419,   11.392966,
        102.484940,  23.707361,   119.046524,  -4.645463,   131.870743,   29.107403,   39.023617,
        7.526064,    -19.685890,  -18.884348,  -88.738808,  -8.086070,    -8.140291,   -0.961811,
        1.763570,    -4.951451,   61.942249,   25.036222,   33.060028,    24.924540,   151.841187,
        -29.515507,  27.238546,   -34.631535,  -53.512074,  -45.180744,   -285.473358, -61.751984,
        -156.845428, -23.690620,  -134.220459, -19.516497,  -33.151276,   -14.633905,  63.149940,
        -20.775532,  56.054428,   -27.021599,  19.670963,   -31.185186,   -96.160393,  -138.133987,
        -101.974579, -19.579191,  -51.914108,  2.034971,    -34.021622,   -2.227021,   -28.579956,
        18.318197,   -19.600660,  18.625586,   -39.852234,  -8.602510,    -4.110090,   -9.053104,
        -94.193527,  24.759558,   -8.011038,   -18.614418,  -11.581982,   -7.835528,   -1.518386,
        -14.623844,  -14.935143,  20.341553,   3.631792,    9.083650,     18.910749,   6.357591,
        40.206066,   -24.004457,  -43.941547,  -16.873274,  -14.398320,   -1.466678,   18.039976,
        -8.003420,   15.369956,   7.147530,    16.048418,   6.825981,     16.458834,   10.999217,
        35.826836,   -12.465488,  22.050932,   -20.460136,  -24.406414,   -24.223978,  23.351809,
        -66.668274,  14.803281,   1.095256,    28.966318,   8.329204,     35.884899,   6.071056,
        29.375254,   -13.844809,  19.591028,   3.072687,    41.908760,    -8.252720,   14.590058,
        -56.193760,  -9.858936,   2.464063,    18.322573,   26.093708,    25.705671,   -6.583313,
        65.529434,   5.177890,    46.652096,   6.984393,    63.426796,    11.402351,   -1.841463,
        0.999323,    2.366106,    -9.532206,   14.959075,   13.413215,    50.693367,   7.343859,
        53.258377,   1.690250,    124.040489,  -36.668095,  109.747452,   -1.410127,   137.324997,
        -13.087093,  55.039490,   -19.706629,  58.985474,   -27.738844,   46.153744,   -27.359388,
        -3.383620,   22.278587,   17.115053,   -2.352704,   -12.531093,   13.775303,   20.502680,
        -1.725155,   -4.462608,   1.458976,    77.660210,   -8.592190,    -6.179469,   -75.665405,
        -50.962936,  0.345575,    -64.179550,  -25.132147,  -36.692623,   0.895836,    -239.858231,
        7.078196,    -71.954819,  23.454708,   -103.803062, -23.874567,   168.179962,  -47.313232,
        50.683403,   -26.999983,  31.905951,   -22.417250,  19.301962,    -19.071909,  -2.640875,
        -9.643764,   6.364657,    -17.291088,  -1.373906,   -21.495409,   -22.507919,  -9.032279,
        -67.853592,  0.209211,    -33.693474,  -42.922768,  -2.854101,    -16.408117,  -25.850910,
        -19.242987,  -26.393784,  -5.757050,   -22.921635,  -9.202370,    -1.830149,   -21.887177,
        -10.613244,  -21.121330,  -18.775265,  -28.281960,  -102.395248,  -6.305978,   -17.156290,
        -11.170718,  -24.836849,  -12.957847,  -35.653416,  -8.178988,    -13.390583,  -8.009272,
        -3.173132,   -28.360338,  -8.158210,   -33.458965,  -16.481386,   -12.726280,  -58.919151,
        -27.666130,  -22.045544,  -2.531986,   13.308751,   -7.398331,    -13.351396,  4.336194,
        -4.318063,   -2.837070,   -32.307640,  8.081209,    -35.117550,   1.527725,    -34.016956,
        13.586103,   -83.287575,  20.722073,   6.310182,    9.978209,     -7.591155,   9.440613,
        -21.106260,  12.465366,   8.336123,    -5.223351,   -59.758648,   9.158926,    -5.415022,
        2.869642,    -26.264732,  3.568918,    -27.393192,  4.894655,     -53.221836,  38.271168,
        -33.131348,  11.308636,   -4.879109,   9.318645,    -9.890723,    -1.132163,   -1.758986,
        8.825960,    -11.890929,  6.319186,    92.458160,   -10.031470,   -25.464380,  13.265518,
        13.285836,   25.975506,   -24.942705,  33.293575,   11.690089,    34.797035,   0.846320,
        31.378929,   -31.098782,  43.182999,   45.893917,   17.321602,    21.687757,   19.664421,
        74.382286,   7.839913,    11.887328,   -8.367297,   -12.491052,   14.210279,   -54.069805,
        34.450165,   -32.573429,  40.042912,   -23.945744,  24.309189,    -91.754997,  52.551498,
        7.393947,    31.375599,   -50.865417,  38.137413,   -13.752741,   0.597165,    -1.247490,
        -5.728765,   18.091364,   -121.243279, -4.452988,   -18.898678,   -7.949921,   -30.744104,
        -52.741802,  -97.533859,  -125.491669, -30.865664,  -262.807404,  173.890610,  -15.634082,
        -24.283522,  -7.009030,   -16.571234,  9.922674,    -58.688160,   -14.809807,  6.869756,
        5.422046,    -60.449936,  -7.950714,   -49.861237,  -22.591841,   -103.525337, -2.863177,
        -213.873199, -22.352730,  78.659096,   4.914779,    5.833726,     -21.308727,  44.940117,
        -0.325302,   -12.894579,  -7.242921,   -9.404849,   5.004261,     -9.246937,   18.047586,
        -40.838421,  2.269769,    -15.164828,  17.248388,   -45.925789,   6.234430,    24.702646,
        -11.397982,  19.093405,   18.415453,   -34.603500,  -2.873642,    59.634594,   3.096748,
        14.619547,   -8.202368,   -33.427670,  5.707275,    1.953933,     -31.703434,  90.039452,
        -21.392874,  90.205132,   -26.349178,  84.238312,   17.573320,    17.378130,   8.369213,
        21.908079,   11.556875,   17.261404,   -4.582478,   35.079170,    -2.510954,   13.369158,
        -33.866116,  27.194960,   30.969088,   7.692850,    16.661783,    10.967186,   13.623228,
        7.094932,    20.259352,   25.878988,   87.434975,   -18.429159,   105.926796,  -111.908859,
        17.189245,   9.996971,    3.143163,    14.438730,   -17.931902,   71.233536,   11.467318,
        58.148502,   39.658386,   2.609241,    22.215738,   37.422733,    -37.977486,  127.102150,
        112.152306,  -154.575531, 91.644249,   -56.591175,  -26.485500,   81.061996,   17.286631,
        42.124165,   -34.543896,  121.588081,  -20.777876,  78.912048,    -12.656392,  87.645645,
        44.328697,   -0.489247,   105.976067,  -147.152802, -3.222897,    140.076736,  -7.168903,
        4.605485,    9.530129,    6.005872,    -22.806082,  19.943405,    -108.292633, 28.181181,
        -42.359829,  15.931247,   -67.017548,  31.143135,   13.553839,    26.786692,   6.199253,
        14.485493,   -50.772217,  23.737507,   -33.059681,  20.874815,    1.497327,    -10.001648,
        -59.865555,  7.173265,    -83.130035,  11.759156,   -33.344158,   8.480359,    23.770452,
        1.568578,    13.114818,   1.007898,    -31.995510,  -26.381260,   1.894688,    -28.489725,
        -51.682251,  -23.464523,  5.070060,    -18.523911,  -18.901869,   -11.860875,  -36.937618,
        -10.166787,  18.615311,   -31.267792,  -21.022266,  -32.681343,   8.576805,    -50.214012,
        60.854485,   -43.400360,  48.254597,   -26.538496,  12.047526,    -21.770794,  33.552597,
        -17.712257,  9.620797,    -20.969669,  39.134342,   -50.080788,   -44.360401,  -61.987785,
        41.021061,   -30.896181,  38.621189,   -12.569723,  5.128311,     -13.678973,  -43.456192,
        1.586714,    -56.096436,  -13.428219,  72.991722,   -32.332207,   59.523125,   -20.124147,
        89.441368,   -51.673595,  -7.544402,   17.807131,   -40.779465,   32.254124,   9.410235,
        22.130800,   -44.375507,  6.582484,    -1.025894,   -7.348277,    62.705845,   12.833370,
        -7.043467,   18.670479,   -97.554016,  14.928259,   -24.605997,   -6.323021,   -11.624546,
        32.693962,   22.216908,   29.352430,   -41.980103,  30.030350,    41.813324,   -8.077760,
        63.035576,   -20.000238,  -114.354721, 30.214886,   -300.512115,  -4.814138,   -36.170788,
        -55.422729,  -18.610573,  28.746283,   -4.379816,   11.551115,    -19.722570,  28.838854,
        -62.858112,  11.167449,   11.391429,   -35.763397,  -220.875946,  42.243549,   -330.684570,
        -98.935860,  0.000000,    0.000000,    90.000000,   90.000000,    154.256073,  136.720993,
        92.980850,   57.928486,   71.718193,   5.762329,    71.361092,    -40.302509,  88.361053,
        -53.041092,  58.205421,   21.676064,   18.208231,   27.750717,    -3.444209,   3.729108,
        26.248993,   6.068472,    18.476593,   2.234819,    11.034802,    -1.154298,   0.000000,
        0.000000,    -6.673066,   -1.727935,   -15.558536,  -15.251935,   -37.914902,  -27.209457,
        131.778244,  -280.580292, 16.125288,   -3.775883,   37.776310,    -9.754093,   19.147821,
        -4.530012,   12.165266,   -1.334201,   -0.000000,   0.000000,     -8.349459,   -11.973321,
        -14.601331,  -7.651588,   -49.303425,  43.881454,   138.141785,   -3.297102,   39.054588,
        86.363853,   7.639913,    13.558549,   -49.155216,  -61.082767,   20.995514,   19.105560,
        35.834251,   5.695634,    -431.906830, 26.254515,   -22.600080,   -63.110638,  -17.215357,
        -40.962357,  28.125832,   -25.173075,  0.000000,    0.000000,     10.841800,   18.991507,
        17.994701,   30.393095,   19.708961,   51.179173,   -6.078067,    167.612686,  -142.470581,
        -35.273731,  -131.876160, -64.754890,  -67.595879,  -47.564705,   -26.907911,  -32.078960,
        0.000000,    0.000000,    10.400958,   34.920750,   17.833204,    76.356499,   13.614596,
        123.623611,  -101.113518, 180.704498,  -12.650655,  -1187.435791, -456.524414, -153.115768,
        -326.469147, -58.796577,  -182.320847, -54.890324,  0.000000,     0.000000,    191.053162,
        -3.095783,   388.443451,  -18.614330,  623.196472,  -84.319351,   1118.673096, -447.589172,
        2.484535,    0.413531,    0.000000,    0.000000,    2.255066,     2.044370,    4.274479,
        5.834206,    3.992878,    5.299209,    2.817692,    8.736781,     0.000000,    0.000000,
        4.204972,    -0.054408,   -1.871413,   3.251018,    2.341890,     -2.406194,   2.956454,
        -0.692193,   3.449539,    2.295141,    11.674149,   -1.156495,    1.754411,    4.047063,
        -4.075715,   14.481404,   -0.275924,   -5.282791,   0.669842,     0.504035,    -6.036408,
        0.766786,    11.194591,   -4.387757,   0.626670,    7.232858,     -3.191010,   -3.492671,
        2.473835,    -8.088761,   -0.773115,   -14.737138,  20.000000,    10.000000,   3.076945,
        -1.801540,   -10.427833,  -50.826763,  12.331556,   -14.803786,   7.994923,    6.480103,
        -48.486305,  -38.620468,  -4.993424,   -16.153942,  5.562468,     14.005037,   -46.376144,
        -49.449368,  -18.058100,  -17.635330,  5.065906,    10.904559,    -61.098061,  -12.958568,
        -6.428743,   2.197039,    3.526362,    33.419018,   -85.542198,   -40.589909,  -64.465927,
        25.224655,   0.000000,    0.000000,    28.310713,   -59.033375,   34.528603,   -60.264637,
        51.895405,   -55.142380,  78.441505,   -65.081619,  100.063576,   -74.594170,  155.611038,
        -84.452545,  201.045731,  -91.898514,  239.446823,  -93.286850,   0.000000,    0.000000,
        -47.781025,  44.395134,   -34.820042,  48.030537,   -31.588602,   59.477966,   -32.081142,
        47.389923,   -31.608786,  55.253429,   0.000000,    0.000000,     0.000000,    0.000000,
        8.830394,    -1.177474,   55.968880,   -53.534252,  130.600266,   -105.948807, 168.582764,
        -138.055359, 264.780762,  -182.929169, -3.351969,   -0.204492,    -0.949287,   -84.247818,
        -24.065279,  -57.231503,  -86.455978,  -12.510046,  -79.878548,   -32.623280,  -16.312078,
        12.869720,   -6.963120,   7.317796};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
