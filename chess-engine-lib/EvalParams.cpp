#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,    -196.203018,
        162.926987,  382.273224,  371.648010,  372.105042,  449.658417,  484.815491,  694.229858,
        1177.456909, 1147.288940, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -18.606264,
        1.040051,    -24.281586,  -8.070428,   -28.885334,  -8.779228,   -38.569309,  -4.701952,
        -6.460812,   1.356132,    2.876060,    -4.956161,   28.247200,   -10.051954,  -12.317874,
        -26.080618,  -0.910442,   -2.550948,   -2.656339,   -0.080199,   -23.399458,  1.441250,
        -7.624403,   0.881373,    -8.444502,   -2.431607,   -5.480704,   2.042889,    26.310276,
        -3.693273,   13.717064,   -25.816505,  13.900970,   7.575652,    -1.314912,   15.214864,
        7.528294,    1.040637,    15.723402,   -3.056464,   -10.615275,  10.145253,   10.810167,
        4.513288,    -1.939974,   9.127506,    -9.444048,   -2.592571,   27.022236,   23.908798,
        23.235765,   24.198389,   11.499811,   1.129613,    9.165375,    -1.117569,   21.755169,
        7.703986,    5.871528,    17.186785,   -18.869942,  5.789490,    -4.913327,   4.840734,
        16.492537,   52.082359,   41.781197,   47.919605,   -1.694810,   36.988422,   24.740286,
        -3.950025,   44.249912,   -23.012157,  57.868740,   26.615164,   -11.227161,  28.172079,
        19.599823,   -3.018819,   200.358475,  126.488930,  155.271545,  151.868912,  226.295181,
        112.006836,  193.939285,  103.524704,  180.550293,  112.973892,  133.996078,  126.741158,
        -72.100044,  154.437714,  79.653526,   90.263847,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -1086.605957,
        9.282093,    -32.676914,  -40.137611,  -110.445419, -17.321892,  -34.238079,  -0.681412,
        -30.468124,  -20.848284,  -7.338540,   -47.947475,  -17.774174,  -77.790977,  -143.159454,
        -46.151020,  -19.492851,  -70.089233,  -102.786789, -6.655417,   -34.506401,  -18.500057,
        1.357343,    -12.173482,  -13.899053,  -18.311861,  -16.549067,  8.315729,    -44.045555,
        -0.874031,   -30.186327,  -29.701658,  -26.963102,  -4.242442,   -22.108580,  -17.943928,
        -12.766841,  0.208289,    14.557368,   14.436489,   44.273857,   4.649761,    1.938907,
        -14.481956,  7.072028,    -27.439775,  -6.825576,   -2.394575,   -30.787529,  -15.130252,
        70.239975,   9.853611,    22.333076,   18.578863,   10.651248,   27.154306,   10.555732,
        37.586658,   27.039200,   7.225591,    47.681763,   -4.171859,   0.311402,    -24.326256,
        -30.753555,  -12.430352,  16.335796,   -2.621902,   23.352242,   16.589943,   56.723312,
        26.052465,   15.806903,   19.944914,   76.409599,   -1.393941,   -6.065446,   -7.893128,
        -14.325833,  -8.422188,   -36.984032,  -44.209206,  -14.038777,  16.869932,   51.848289,
        9.104933,    78.391144,   9.880791,    82.249222,   -28.141439,  156.108505,  0.993718,
        38.185383,   21.538656,   -45.671013,  9.932428,    -113.344040, -20.093851,  -11.394956,
        -24.854568,  28.011230,   1.916820,    57.205635,   27.471834,   17.498310,   -3.903045,
        45.746964,   -18.278267,  -32.696846,  -3.008444,   -65.898636,  -4.817939,   -85.670029,
        -67.550171,  -144.705978, -19.108900,  -81.101395,  -10.102976,  -48.532383,  -15.178120,
        -25.937029,  8.752497,    -13.939611,  11.350075,   -275.114838, 21.431391,   -60.209309,
        -129.100357, -73.688271,  -50.759827,  -27.655045,  -50.940907,  -27.378395,  -1.207638,
        -47.501377,  19.631674,   -18.342932,  -9.081122,   -35.074467,  -1.688772,   -13.472960,
        -9.088805,   -98.934929,  19.359140,   1.218278,    -23.370703,  -9.512209,   -26.843943,
        -4.596992,   -12.692199,  -15.763784,  11.583516,   3.152529,    9.136851,    -8.548415,
        -1.087470,   21.824129,   -11.715966,  -45.719444,  -16.895634,  -11.163543,  -9.417148,
        16.411673,   -6.195291,   20.996935,   3.668055,    9.582610,    17.755302,   14.232266,
        15.172898,   34.995728,   -6.517360,   20.030260,   -13.739292,  10.183003,   -43.120968,
        16.900969,   -61.003609,  -13.376423,  -4.270374,   18.578518,   13.867284,   47.448811,
        13.508128,   29.068005,   -5.323933,   16.865284,   2.734376,    31.144651,   -0.287699,
        13.564562,   -16.040867,  -23.627796,  -11.506232,  20.446123,   6.402660,    16.609346,
        -3.228341,   57.285503,   10.694880,   52.482845,   20.695713,   44.790089,   -0.814328,
        -0.077271,   8.758292,    -7.052551,   -1.304326,   -6.711995,   -1.616189,   38.618176,
        0.250492,    42.903130,   -20.863962,  28.412552,   -16.990211,  91.060623,   11.681039,
        94.539703,   25.698969,   101.223228,  -21.846777,  36.032059,   -9.158422,   29.150423,
        -38.644745,  9.361731,    -12.872364,  6.792461,    3.405856,    -28.979433,  6.236401,
        18.481180,   -8.115744,   42.106220,   4.562619,    44.337059,   -17.122768,  50.916943,
        -43.403614,  -37.467857,  0.231405,    -47.884556,  -34.732368,  9.344537,    -16.719316,
        -241.089645, 3.030949,    -66.874817,  -6.463446,   -78.077438,  -25.191370,  28.555592,
        -2.692295,   29.462933,   -40.200676,  34.104778,   -24.678116,  19.437075,   -12.518730,
        5.099001,    -11.883599,  4.940699,    -11.306839,  -8.676497,   -14.140769,  -22.640574,
        -10.460159,  -42.451111,  -14.092076,  -20.471485,  -26.209639,  2.874323,    -19.096178,
        -14.100697,  -3.262932,   7.138247,    -12.725217,  -18.871025,  -7.621426,   -5.623222,
        -28.285482,  -39.561489,  -15.572195,  -77.861519,  -5.431269,   -99.216949,  -0.579722,
        -26.138367,  -5.621692,   -17.016605,  0.547051,    -43.375050,  0.038777,    -32.468941,
        -3.289919,   -25.801979,  -10.495232,  -19.583635,  -42.063515,  -12.192392,  -16.887882,
        -45.331154,  -17.881741,  -2.860361,   -5.651796,   3.994501,    -6.112153,   -14.831896,
        8.692074,    -20.116676,  6.110882,    -69.436241,  4.965197,    -59.029881,  1.473563,
        -45.355316,  2.001142,    -91.991737,  12.881036,   -18.083813,  12.896029,   -33.416195,
        13.224135,   -52.293842,  13.704417,   -5.592571,   -1.078964,   -93.018181,  7.174181,
        -22.863508,  6.745622,    -54.095490,  16.918749,   -91.588234,  12.499421,   -21.473417,
        29.304699,   -30.301031,  12.788587,   -32.391788,  8.268806,    -15.559542,  -4.605701,
        -27.116913,  16.366610,   -16.034130,  9.857234,    90.634117,   -18.255407,  -31.231688,
        12.711801,   0.937962,    23.202017,   -47.106251,  31.755970,   -4.584511,   21.609379,
        -14.378186,  25.400038,   -22.113472,  19.537592,   24.438993,   17.082474,   -1.317257,
        15.725753,   40.910034,   0.334885,    -24.114552,  6.327051,    -29.618505,  17.147169,
        -20.755600,  23.408260,   -29.713436,  26.372429,   -14.587377,  21.880745,   -50.741882,
        32.257812,   -19.172373,  32.799698,   -22.614504,  11.296924,   -3.272919,   30.986795,
        5.601793,    -1.084123,   26.777508,   -91.920311,  0.098383,    -0.575429,   -8.216621,
        -59.182407,  -36.199619,  -98.105133,  -39.803131,  -28.120338,  -171.963745, 103.521729,
        -24.797869,  22.467955,   15.061134,   -44.366440,  13.124817,   -30.533148,  3.510300,
        -13.942620,  2.250137,    -48.844368,  -12.232521,  -66.122391,  -17.287550,  -132.519272,
        -40.173969,  -183.862991, 7.344109,    13.112426,   8.230534,    -15.830821,  -16.640728,
        42.936413,   -2.451483,   -26.804998,  -3.101500,   -32.492535,  -16.702440,  -19.377241,
        0.400887,    -34.627300,  -11.884280,  -119.527649, 10.703312,   -26.427118,  1.090410,
        34.428181,   -18.030516,  14.711947,   16.124870,   -34.562580,  -12.835817,  40.909924,
        -1.517969,   2.086333,    -7.329532,   -49.294437,  -6.101795,   7.194110,    -0.337173,
        -11.253615,  -28.527636,  84.790703,   -31.198114,  69.575638,   1.270256,    43.937695,
        -3.694361,   50.109638,   -4.409906,   53.775616,   -4.304941,   44.722866,   -17.963490,
        31.379427,   -9.784837,   1.946013,    0.266140,    48.082157,   3.716253,    44.000172,
        -3.891178,   30.395891,   0.420351,    87.009171,   68.466263,   -57.305447,  74.712219,
        -83.765144,  2.225250,    -6.999654,   32.586861,   -48.863239,  -31.117846,  93.775352,
        -12.182590,  103.066177,  9.677696,    67.930611,   -34.158230,  72.074860,   -26.718727,
        50.358540,   -2.106493,   34.405216,   37.381538,   -46.127560,  6.137506,    65.235069,
        77.642807,   -25.478275,  -44.970188,  119.174667,  -5.879385,   34.724010,   -28.201199,
        73.115257,   31.303364,   7.622924,    122.719376,  -126.076187, 74.883171,   -9.343888,
        18.204214,   10.615692,   49.029655,   -3.079626,   -30.543774,  15.107390,   -97.340996,
        38.006615,   -36.318737,  -1.546700,   -52.020359,  17.402609,   17.642239,   6.554563,
        10.436691,   -10.163454,  26.639343,   12.409630,   17.338570,   1.399052,    -11.053226,
        -1.739872,   -70.699753,  12.960255,   -73.031815,  6.714552,    -35.686378,  6.902438,
        -6.599287,   6.249894,    -3.961177,   2.665485,    82.010368,   -61.084515,  -67.651848,
        -16.081800,  -26.748718,  -10.373692,  -34.657669,  -5.767175,   -43.366520,  -1.045066,
        -65.744980,  -2.722522,   -32.391785,  -18.268307,  -49.514603,  -6.541390,   -63.477642,
        -45.269711,  19.910486,   -28.215509,  -33.892719,  -9.407028,   -41.025982,  -8.949132,
        -50.085693,  -4.678799,   -24.724560,  -9.694898,   -22.306694,  -21.067867,  -56.010048,
        -36.947971,  0.426942,    -14.028953,  -15.927114,  -4.160314,   -24.421968,  -11.125614,
        -89.435593,  -0.364554,   -24.741861,  -2.299101,   24.825756,   -17.343487,  17.877289,
        -8.256287,   61.081825,   -23.725805,  -47.934937,  -12.562127,  -7.042195,   -1.825153,
        36.116997,   11.385651,   -36.146381,  12.985796,   -103.692383, 10.224343,   8.705152,
        22.573568,   -60.289120,  23.505760,   -6.652511,   3.584063,    -62.635128,  -13.929505,
        -59.601440,  8.234966,    9.287174,    -1.721228,   -46.059120,  9.397826,    -35.706238,
        10.447677,   -45.552368,  1.701958,    -131.811768, 36.174961,   -226.282593, -4.059130,
        54.225315,   -41.904507,  10.401844,   -18.964001,  -98.307724,  9.604941,    -39.422710,
        -21.092714,  -91.446999,  -6.291819,   4.039907,    -25.114811,  -48.518909,  -9.482560,
        -159.943420, -75.806282,  0.000000,    0.000000,    90.000000,   90.000000,   138.661652,
        117.691429,  75.186340,   61.904690,   51.068760,   16.117718,   62.756168,   -18.816019,
        66.646568,   -27.718241,  52.287788,   10.223866,   16.287369,   22.012690,   -2.096338,
        -23.027231,  26.122040,   -14.415965,  20.520914,   -9.753958,   11.433784,   -5.485518,
        0.000000,    0.000000,    -4.974208,   2.473517,    -19.175716,  8.160737,    -35.571526,
        5.890093,    118.204285,  -284.167694, 9.052772,    -33.588959,  29.846018,   -22.617115,
        21.966900,   -9.962947,   14.938621,   -9.276476,   -0.000000,   0.000000,    -4.657438,
        -8.902291,   -13.243886,  -1.965874,   -32.444500,  12.437567,   157.956421,  -26.395332,
        44.099941,   77.640152,   11.266052,   -1.699859,   -25.806547,  -28.288113,  20.494488,
        15.646461,   34.906582,   2.868169,    -316.640533, -88.727837,  -70.061577,  -73.382034,
        -25.368538,  -52.426018,  2.610917,    -22.350552,  0.000000,    0.000000,    11.592778,
        22.081108,   13.057953,   39.773617,   8.669272,    73.295990,   0.519498,    138.572861,
        -84.882980,  -162.719284, -70.552528,  -118.507980, -77.607758,  -63.497471,  -35.847778,
        -34.396713,  0.000000,    0.000000,    16.393860,   37.871532,   15.543053,   92.339493,
        24.100277,   140.317535,  6.495087,    187.090805,  -293.733887, -841.168640, -528.452698,
        -169.444672, -318.522858, -128.712921, -175.272003, -62.810760,  0.000000,    0.000000,
        188.336731,  16.977938,   427.869476,  -17.818972,  661.509521,  -71.997223,  968.891479,
        -174.168854, 2.052191,    0.172735,    0.000000,    0.000000,    -0.533832,   2.513902,
        3.900543,    3.635128,    3.786601,    3.858289,    2.658671,    5.725345,    0.000000,
        0.000000,    6.379502,    -0.918731,   -0.693102,   0.083728,    2.323403,    -4.115931,
        1.041953,    -0.568768,   3.212386,    3.163485,    11.407057,   -2.325847,   4.750261,
        2.080817,    -0.576586,   10.369145,   -0.047058,   -5.192109,   1.190135,    1.650947,
        -4.659257,   0.258196,    12.453607,   -2.464309,   3.911022,    6.323008,    -1.235102,
        -2.837263,   1.981714,    -7.433416,   -0.411014,   -13.981628,  20.000000,   10.000000,
        4.215858,    -2.511669,   -13.299392,  -38.909058,  9.282677,    -12.786749,  11.627419,
        7.916625,    -51.523441,  -28.714779,  -1.790197,   -10.707117,  6.923344,    9.869141,
        -39.648193,  -42.705925,  -16.701174,  -14.290929,  6.463259,    8.932686,    -49.157719,
        -16.442753,  -8.843925,   -8.972297,   -0.402490,   20.204189,   -77.482620,  -22.761076,
        -57.157520,  -6.877535,   0.000000,    0.000000,    0.257877,    10.708985,   -13.041697,
        12.898991,   -32.517593,  12.153707,   -65.116936,  23.916159,   -79.142273,  29.146774,
        -105.473389, 20.274630,   -163.360275, 32.419979,   -225.373398, -1.049581,   0.000000,
        0.000000,    0.5,         0.5,         0.5,         1.0,         1.0,         1.0,
        1.0,         1.0,         1.0,         0.5,         0.5,         0.5,         0.5};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    return oss.str();
}
