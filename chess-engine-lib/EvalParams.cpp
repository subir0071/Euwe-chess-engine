#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -103.752144,
        140.602661,  292.989441,  352.963104,  305.957672,  402.976257,  427.353760,  625.940979,
        862.998474,  1160.475952, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -18.941069,
        9.637159,    -19.251844,  -4.235597,   -16.403946,  -11.596763,  -26.787336,  -34.365990,
        -5.402798,   13.839167,   2.060862,    -6.191566,   21.213276,   -8.167393,   -12.684512,
        -22.352518,  -3.295050,   3.763734,    -3.981482,   1.501794,    -13.508092,  0.807594,
        -0.614119,   -7.868575,   -10.048501,  -2.070562,   -6.562726,   -2.407080,   20.776354,
        -4.647026,   10.672409,   -20.659746,  10.716622,   6.115759,    1.013863,    16.451715,
        11.617031,   -0.268994,   17.578537,   -10.473509,  -7.951667,   2.398788,    10.365954,
        4.759720,    -2.825969,   4.543793,    -19.348196,  -3.728175,   24.783537,   30.340406,
        17.143097,   18.108864,   16.474693,   0.620976,    11.312672,   -1.983209,   21.548626,
        4.861625,    -2.669238,   10.796980,   -29.553431,  9.879443,    -9.202518,   7.207388,
        12.963186,   53.686867,   43.776428,   41.155914,   8.914917,    33.088966,   30.572535,
        -5.860975,   30.175554,   -6.829681,   59.509289,   20.736460,   69.975159,   21.773752,
        36.034679,   6.996324,    154.782837,  119.288910,  121.723106,  149.534332,  244.640442,
        112.933792,  188.079178,  110.939575,  143.749573,  112.221207,  142.448990,  130.476166,
        -29.278591,  145.490067,  -5.851686,   125.825287,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -212.175476,
        -36.415043,  -24.440556,  -50.382038,  -111.750587, 0.642180,    -33.659542,  -25.339518,
        -33.467377,  -11.619707,  -13.219602,  -31.356964,  -48.592117,  -64.054703,  -233.162827,
        0.803512,    -58.048328,  -55.341064,  -76.146271,  0.004420,    -27.912653,  -29.757196,
        3.922318,    -0.991054,   -9.959064,   1.792281,    -2.235618,   -5.161743,   -49.783382,
        -1.236652,   -28.328205,  -13.327812,  -25.575947,  -21.955309,  -2.857466,   -4.706135,
        -4.840922,   -5.826495,   7.944711,    14.026105,   34.115311,   14.508052,   0.499884,
        -14.673133,  1.436353,    -20.790627,  -35.892796,  -26.495523,  -19.847374,  -16.330021,
        10.704398,   -0.156611,   26.489601,   18.739233,   6.996215,    30.236792,   5.474893,
        30.008043,   24.545292,   3.536926,    23.647346,   7.605119,    -10.856480,  -20.048960,
        -0.609848,   -27.806431,  7.758516,    -8.726093,   28.897991,   10.359128,   53.441200,
        16.240088,   16.615494,   13.731460,   57.608932,   11.925197,   -12.167862,  3.901174,
        6.239130,    -22.021158,  -17.287092,  -29.096069,  6.105723,    4.491018,    65.097916,
        6.541295,    67.882240,   5.305441,    68.103394,   5.091340,    113.997864,  5.827639,
        38.790565,   9.465344,    -42.404545,  -3.028649,   -8.039217,   -30.004641,  -38.092503,
        -22.659578,  21.035730,   -7.273594,   61.254013,   6.923052,    15.979138,   2.375945,
        -4.584479,   -16.743433,  -31.230303,  -20.440224,  -32.971230,  -11.464376,  -22.102859,
        -95.326866,  -15.875614,  -31.033991,  -62.515675,  -35.961292,  -84.315094,  -15.550546,
        60.249779,   2.798880,    -14.792100,  -1.132423,   -173.528625, -3.842852,   -175.072205,
        -93.595406,  -71.925438,  -56.353092,  -40.378563,  -64.042412,  -27.435137,  1.835207,
        -54.975533,  9.665874,    -20.829844,  -3.251025,   -35.647484,  -14.541531,  -34.713367,
        -16.162518,  -62.712227,  1.814603,    -14.939177,  -37.579388,  -6.226021,   -18.885782,
        -11.103318,  -4.560883,   -11.247565,  7.041376,    2.352278,    3.436325,    14.040932,
        -3.810277,   22.098030,   -25.392439,  -42.181454,  -20.459034,  -5.536392,   -19.672901,
        14.984159,   -7.501826,   16.358505,   2.067091,    10.406052,   19.980816,   12.931276,
        15.770834,   35.388275,   -20.454603,  19.554255,   -20.941080,  4.300175,    -42.053154,
        22.556736,   -30.095327,  -10.792899,  0.849307,    14.951500,   9.671654,    32.727978,
        19.767691,   21.880758,   -4.397016,   18.287079,   -1.876366,   33.217300,   -0.118365,
        21.937897,   -17.493706,  9.401669,    1.349893,    28.031715,   -5.009775,   12.487469,
        6.243209,    45.709213,   10.469637,   56.676079,   21.726311,   46.299221,   -10.488645,
        8.012373,    14.376583,   0.409515,    -11.093142,  25.898354,   -8.116702,   45.713512,
        -3.964798,   47.666618,   -16.749260,  24.234478,   -1.237943,   51.990845,   15.323269,
        127.628975,  29.429085,   95.606392,   -32.473335,  46.854252,   20.310186,   36.869450,
        -19.465870,  25.786469,   -5.142693,   31.298615,   0.375296,    -80.205544,  15.973232,
        50.780632,   -10.033550,  34.784698,   10.747335,   -7.660687,   7.729932,    -27.328474,
        -29.914326,  -57.491714,  21.535351,   60.717228,   -23.214128,  72.901115,   -10.063560,
        -36.656349,  12.464029,   -19.841303,  12.737545,   -56.255196,  -22.188892,  -22.213243,
        22.347935,   35.436783,   -26.924574,  25.327927,   -22.049179,  9.131966,    -14.438537,
        3.589915,    -11.097814,  0.707519,    -8.298074,   -10.932807,  -11.108437,  -16.765709,
        -11.183817,  -23.018700,  -11.110043,  -2.235530,   -40.170258,  -25.663960,  -12.138992,
        -19.338451,  -6.991519,   -7.101418,   -10.241475,  -23.236076,  -12.817487,  -19.814844,
        -18.773731,  -38.864147,  -18.436905,  -44.871159,  -7.294959,   -33.016171,  -15.631056,
        -10.250469,  -11.234101,  -30.871031,  -1.271123,   -39.831299,  -1.601900,   -22.630074,
        -3.148522,   -30.134457,  -11.551013,  -5.244035,   -33.727016,  -6.787664,   -28.304197,
        -29.045887,  -18.297617,  -3.456224,   -0.374473,   -5.075835,   -1.783604,   -18.905161,
        0.051642,    -15.425130,  14.444366,   -58.497200,  4.824777,    -43.602825,  7.263687,
        -45.579967,  5.577499,    -83.229393,  1.021703,    -15.262527,  10.529432,   -37.169231,
        10.712782,   -55.690109,  7.949422,    -4.499690,   1.325435,    -96.167053,  14.990110,
        -13.058726,  5.558460,    -36.578896,  10.550282,   -68.523735,  15.685646,   -21.377558,
        27.903427,   -28.134628,  9.253546,    -27.810301,  11.397909,   -20.457441,  10.392294,
        -10.942286,  21.244011,   3.923489,    13.645514,   79.291100,   -8.217337,   -26.757820,
        16.163067,   6.058947,    19.441261,   -51.400703,  29.892605,   1.574125,    23.495220,
        -23.534634,  26.427113,   -17.519825,  16.340435,   30.705177,   19.323853,   -50.796936,
        29.313259,   -4.300920,   18.735424,   -9.972724,   1.179415,    -48.297989,  20.132030,
        -42.087769,  28.558365,   -31.864086,  24.989162,   -43.614849,  29.696583,   -17.053942,
        28.839767,   -6.552641,   26.734940,   -55.165771,  21.268215,   18.759497,   -12.445251,
        15.300483,   -1.813370,   24.416918,   -62.161076,  5.230420,    -19.245956,  -5.875513,
        -15.931408,  -45.103409,  -68.502411,  -18.387613,  -148.321121, -69.267708,  -111.886360,
        -21.612753,  -4.614439,   22.568213,   -26.984369,  8.580592,    -15.354470,  -0.398807,
        -29.748798,  2.166878,    -21.891293,  -3.013330,   -43.419842,  -6.132498,   -137.511581,
        -65.471748,  -114.419151, 7.282282,    -37.014275,  -1.658887,   -6.566085,   -18.970144,
        22.145260,   -6.950268,   -26.336214,  -4.582377,   -23.715635,  -14.036660,  -17.988619,
        0.524333,    -36.890774,  -1.408603,   -72.472328,  5.995890,    -40.688694,  9.226529,
        -11.834002,  -17.745609,  25.691517,   11.209434,   -6.968302,   -25.166256,  22.842075,
        -4.693682,   -6.031453,   -23.465494,  23.764557,   -27.165401,  72.461632,   2.476134,
        -26.159971,  -29.806129,  31.555864,   -29.611998,  57.595043,   -7.782826,   36.005775,
        -6.853934,   37.240177,   -17.485031,  36.231407,   -41.870743,  73.633934,   -2.245202,
        -18.281712,  -7.970663,   -12.720349,  1.746287,    15.371177,   -2.535144,   9.408514,
        -21.424885,  38.168133,   -5.986977,   32.109089,   73.949738,   -49.399426,  64.599731,
        -101.947525, -20.756390,  63.212845,   15.023032,   -27.773840,  -42.040218,  77.416138,
        -37.107338,  95.864212,   17.247850,   51.678951,   -60.291355,  110.377533,  -28.911083,
        80.420029,   -19.582352,  46.097721,   -35.587219,  84.164070,   11.660705,   29.985003,
        41.380093,   12.441564,   -66.326836,  134.464569,  -68.331894,  106.049706,  -7.127193,
        55.196510,   80.222511,   -26.541288,  87.679855,   -40.408592,  116.177124,  -46.065426,
        -7.268089,   49.724689,   28.598591,   0.168712,    -34.934208,  9.444433,    -111.067230,
        26.537155,   -42.346451,  -2.564711,   -71.954117,  13.113281,   21.158772,   8.587235,
        19.084816,   -13.563970,  -35.074638,  22.710524,   0.212547,    4.980901,    -28.649567,
        -13.830491,  -64.948799,  4.214029,    -78.093048,  2.805449,    -31.267653,  6.417136,
        -8.386301,   6.958278,    1.029167,    2.781137,    50.146469,   -47.743595,  -48.688869,
        -21.968863,  -47.802261,  -11.050221,  -38.552078,  -9.812657,   -41.778576,  -1.636082,
        -43.432808,  -9.816294,   -32.159237,  -18.080761,  -56.168930,  -9.945472,   -114.018074,
        -40.983368,  0.543383,    -27.712873,  -52.134560,  -13.147459,  -69.246696,  -9.618500,
        -66.654106,  -7.107091,   -35.229874,  -12.482926,  -10.659365,  -21.536943,  -64.263939,
        -33.823277,  -30.080339,  -12.771971,  -92.624222,  10.362657,   -68.955223,  -1.058229,
        -165.857635, 5.601332,    -101.298767, 3.155354,    -45.010143,  -3.144306,   -11.788754,
        -6.411563,   0.248877,    -15.490788,  -94.365700,  -13.921511,  -35.256432,  0.388282,
        -88.296898,  24.399641,   -86.851357,  13.626019,   -141.347260, 13.775549,   -2.767195,
        16.966852,   -70.040833,  23.132246,   -70.200584,  10.523005,   -54.570286,  -19.680195,
        -28.923578,  8.031249,    -14.297591,  -12.435915,  -59.422298,  0.733359,    -110.912376,
        26.801853,   -118.702087, 23.882332,   -105.920326, 35.349121,   -242.438965, 5.729006,
        15.388956,   -29.278791,  32.362568,   10.234153,   -0.224356,   -20.746542,  -13.018413,
        -10.974748,  -126.943512, -13.855492,  108.816704,  -44.087669,  -61.582165,  18.659664,
        -242.074127, -64.392632,  0.000000,    0.000000,    90.000000,   90.000000,   122.732185,
        113.701843,  72.199928,   63.827751,   48.181973,   17.026716,   63.542591,   -18.070904,
        64.147102,   -29.478188,  41.432659,   36.398277,   11.796278,   17.363213,   -3.245831,
        1.346357,    -4.270531,   4.178876,    30.644688,   68.497467,   2.222566,    -7.476913,
        -60.181805,  -13.517848,  16.980251,   17.172094,   31.788744,   2.550672,    4.989758,
        16.997072,   17.974405,   17.303951,   85.978951,   37.853542,   2.105666,    0.250192,
        0.000000,    0.000000,    -0.567311,   2.331861,    3.352859,    3.456783,    2.774392,
        4.312808,    2.821877,    2.418363,    0.000000,    0.000000,    6.382396,    -0.411329,
        0.979820,    -1.307039,   3.612577,    -2.048048,   0.171502,    -0.227171,   1.642881,
        3.337491,    9.815644,    0.134307,    4.417653,    2.547531,    -0.196608,   10.107259,
        -0.103104,   -3.649028,   2.400569,    2.757466,    -4.612359,   -0.789398,   10.283957,
        -1.954418,   5.181607,    2.085545,    -0.332169,   -1.249166,   2.136256,    -6.213729,
        -0.696062,   -12.300671,  20.000000,   10.000000,   5.795781,    -2.289999,   -8.787390,
        -36.543644,  12.848714,   -11.263954,  7.366368,    6.450143,    -44.566963,  -33.510094,
        -5.552680,   -13.247789,  6.348825,    12.428633,   -32.509743,  -42.066597,  -14.770465,
        -11.760956,  5.430687,    9.570117,    -56.164185,  -12.544196,  -5.917404,   -7.059207,
        1.666248,    15.552958,   -78.179916,  -12.768838,  -55.342625,  8.780577,    0.000000,
        0.000000,    -2.138707,   10.204585,   -14.538827,  12.212874,   -36.908760,  13.373304,
        -57.027672,  20.686930,   -72.991882,  25.075718,   -90.105949,  16.123678,   -141.591568,
        24.983187,   -196.021683, 2.588864,    0.000000,    0.000000};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    return oss.str();
}
