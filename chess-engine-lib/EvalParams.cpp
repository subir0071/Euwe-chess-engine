#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -108.440002,
        131.471909,  283.761536,  327.667206,  304.639008,  361.733765,  411.061584,  565.645752,
        852.934326,  1034.891724, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -14.406135,
        5.360454,    -17.209244,  -3.525394,   -16.457588,  -10.530228,  -27.184170,  -33.319466,
        -7.806672,   13.444300,   -0.942584,   -5.552824,   19.255669,   -6.133732,   -15.863177,
        -17.058498,  2.197169,    0.284691,    -2.343753,   0.474369,    -13.055854,  -1.870373,
        -0.613294,   -7.346690,   -11.848788,  -3.713830,   -9.892177,   -1.528358,   18.935625,
        -2.358573,   9.183316,    -15.418551,  16.589914,   3.119189,    3.862427,    14.085119,
        12.775954,   -2.986571,   19.087788,   -10.356548,  -9.719081,   0.395619,    7.865129,
        5.749090,    -3.916980,   5.291215,    -20.283489,  -1.466345,   31.919123,   26.987913,
        22.029728,   15.608654,   19.320875,   -1.248488,   13.954206,   0.534260,    21.589733,
        5.445702,    -2.553306,   6.984656,    -28.129009,  8.725975,    -5.884900,   8.497157,
        20.491583,   46.280933,   47.641815,   37.593616,   21.615023,   33.839809,   41.055820,
        -3.307145,   35.480694,   -7.899364,   66.655670,   14.733772,   87.620499,   20.597696,
        40.501953,   3.249920,    166.627762,  89.899391,   143.121597,  122.612396,  245.507095,
        80.224060,   198.926086,  84.620491,   152.374176,  90.742378,   147.356522,  92.429756,
        5.512061,    105.594353,  5.823234,    93.344879,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -259.788086,
        -45.114223,  -17.914803,  -50.337620,  -98.436066,  -7.002959,   -24.182686,  -32.545082,
        -34.746128,  -21.726885,  -10.887538,  -33.762299,  -47.129333,  -58.888706,  -224.280289,
        -28.587265,  -51.594189,  -61.470306,  -71.664993,  -9.251099,   -36.267693,  -27.069710,
        5.753978,    -4.035386,   -8.292824,   1.306382,    5.969835,    -9.962438,   -44.895390,
        -7.134295,   -32.319134,  -19.577341,  -15.241548,  -25.877844,  -2.124400,   -5.889595,
        -4.804671,   -7.094839,   1.522037,    15.564677,   35.319920,   15.766929,   -2.301451,
        -9.379200,   2.155584,    -19.882610,  -27.435692,  -27.920551,  -17.978882,  -18.924788,
        -8.989969,   4.628552,    27.022406,   15.736670,   4.931687,    29.175394,   7.009717,
        29.362040,   25.182682,   4.210920,    24.087307,   5.333541,    -13.146944,  -16.908857,
        1.982185,    -27.096436,  5.550673,    -8.616996,   26.892637,   20.110731,   49.715424,
        16.001862,   15.273536,   11.230170,   57.264385,   10.772756,   -4.007613,   4.464139,
        14.356938,   -17.634907,  -27.920732,  -25.595175,  12.849434,   3.450905,    53.005695,
        13.566016,   70.034180,   -0.640405,   75.091888,   8.841639,    129.492981,  -4.133359,
        47.427601,   4.002754,    -30.104736,  -2.338967,   -31.246950,  -29.508053,  -43.690865,
        -20.598703,  26.380423,   -5.216661,   42.502739,   7.639495,    21.094408,   5.097337,
        6.956472,    -10.236836,  -23.297537,  -15.783113,  -20.483522,  -12.073372,  -18.649784,
        -93.456573,  -24.438457,  -14.079596,  -37.078415,  -33.283146,  -87.751877,  -11.292578,
        37.564613,   3.257858,    -51.921951,  -5.289438,   -128.316910, -9.055246,   -200.819489,
        -76.539307,  -71.266296,  -50.366943,  -41.478733,  -55.875996,  -26.786890,  1.648861,
        -56.683037,  12.148103,   -21.644014,  0.226205,    -37.054073,  -11.455335,  -34.646038,
        -16.331234,  -60.498810,  -3.419709,   -13.308202,  -31.836063,  -6.849738,   -14.245067,
        -10.575419,  -0.593649,   -12.349160,  7.441961,    0.331574,    5.662209,    13.396465,
        2.049639,    20.753607,   -21.460321,  -33.544029,  -25.545120,  -8.063142,   -16.430887,
        15.104692,   -4.279876,   14.537058,   1.555870,    9.978045,    19.358324,   13.427793,
        17.277473,   33.801273,   -17.432089,  21.543251,   -13.817290,  3.633855,    -34.327915,
        19.955721,   -26.555471,  -8.502814,   1.812852,    14.806933,   9.185891,    33.158035,
        15.390800,   21.954657,   -4.914563,   16.808043,   0.002063,    30.320379,   -2.267287,
        25.561609,   -8.149712,   5.657338,    6.113101,    27.147699,   -5.387155,   19.563951,
        1.585015,    48.334610,   6.067597,    65.035950,   15.614302,   48.546230,   -11.932607,
        9.412353,    13.445583,   7.697512,    -14.794270,  24.883238,   -9.789499,   37.913799,
        -6.622053,   40.709339,   -13.331211,  31.885807,   -4.235462,   57.367081,   10.214347,
        132.479141,  15.848717,   99.554497,   -34.814457,  60.720612,   12.213246,   31.400433,
        -20.043877,  28.208069,   -6.167557,   27.348318,   4.805461,    -75.498131,  11.175664,
        45.863503,   -11.949306,  37.886040,   5.066591,    30.117445,   1.154495,    -12.577321,
        -27.996391,  -50.384544,  15.936085,   48.579910,   -12.560992,  75.890823,   -15.853778,
        -36.693691,  3.797356,    -19.970154,  3.214175,    -43.360088,  -22.176796,  8.854909,
        12.267286,   16.141039,   -24.231100,  26.032331,   -21.704733,  12.176578,   -16.256556,
        4.098292,    -12.096065,  0.394543,    -8.790614,   -11.996975,  -9.114923,   -18.206945,
        -11.418185,  -24.207617,  -18.040571,  -4.166864,   -40.684269,  -29.428362,  -10.352849,
        -19.164768,  -6.357995,   -7.753139,   -11.539212,  -23.956381,  -13.088201,  -24.842583,
        -18.442360,  -37.628654,  -16.396263,  -45.027599,  -8.559955,   -24.208082,  -18.734640,
        -10.425010,  -9.489236,   -22.002911,  -0.306750,   -44.081482,  0.428597,    -19.410301,
        -3.491021,   -33.025051,  -8.802808,   0.224597,    -33.221066,  -4.061357,   -26.631678,
        -31.037430,  -16.035807,  -3.738662,   1.181217,    -6.910436,   -1.034139,   -21.180681,
        2.079734,    -20.413260,  16.168655,   -56.723202,  5.779931,    -44.836208,  8.803247,
        -41.046764,  1.244277,    -83.506035,  1.495423,    -19.014631,  13.698224,   -40.752190,
        14.114244,   -55.868893,  12.557195,   -10.912904,  6.451305,    -96.467964,  16.853302,
        -11.710215,  6.414958,    -42.488529,  10.726402,   -61.825462,  16.724140,   -15.373233,
        26.098175,   -26.194298,  11.031661,   -33.598713,  17.190922,   -18.493832,  14.272369,
        -9.857439,   21.525709,   16.102434,   10.741191,   90.980629,   -11.116616,  -25.346428,
        14.190886,   5.563757,    19.580959,   -48.045010,  28.176748,   5.349425,    23.193628,
        -17.741640,  22.873386,   -8.606066,   15.277219,   38.215221,   18.198839,   -23.317719,
        24.409748,   20.469900,   13.074220,   0.162953,    1.796130,    -30.099546,  21.930630,
        -28.038780,  26.310110,   -21.414762,  21.164293,   -18.050064,  23.192621,   2.123526,
        22.916731,   17.466066,   19.575443,   -39.606327,  17.397911,   23.946413,   -5.448971,
        22.107819,   0.065623,    21.093000,   -48.680122,  5.539331,    -19.690004,  -6.659844,
        -15.850545,  -46.255623,  -53.366116,  -7.302273,   -158.362000, -80.068871,  -81.126320,
        -14.207504,  -2.443343,   21.773981,   -22.299849,  8.060295,    -10.747031,  -2.733464,
        -24.027206,  0.215915,    -23.989920,  -1.973294,   -53.117001,  -9.257004,   -132.023315,
        -57.587105,  -126.316986, 11.748606,   -47.682434,  -0.451672,   4.152430,    -20.429935,
        25.353212,   -8.902168,   -20.661873,  -9.351021,   -19.171829,  -17.696445,  -14.166023,
        0.388153,    -43.725845,  -1.555741,   -70.363098,  6.130233,    -41.053505,  9.374384,
        -11.593134,  -19.737762,  30.614851,   12.184977,   -12.174505,  -24.802261,  17.533930,
        -8.457268,   -4.253023,   -29.354092,  24.787451,   -26.805374,  62.273609,   5.120590,
        -26.732662,  -25.818222,  28.987520,   -28.886093,  59.989956,   -4.272599,   30.104372,
        -11.611298,  40.280487,   -10.522408,  29.847788,   -34.336899,  53.819851,   -1.852379,
        -12.534033,  -9.938137,   -17.179010,  -8.182083,   25.466299,   -2.216656,   10.504211,
        -24.212128,  38.711555,   -1.550305,   32.515427,   94.512756,   -64.509682,  76.321236,
        -108.136330, 10.094088,   28.850683,   20.174644,   -33.119987,  -39.643684,  73.692963,
        -41.719582,  92.579620,   10.506334,   49.988659,   -46.399734,  96.384903,   -14.971268,
        70.017601,   -13.850037,  56.345783,   -18.813137,  77.040970,   14.597609,   37.374443,
        38.841679,   22.493391,   -52.312523,  125.272621,  -41.317268,  85.466293,   -1.532463,
        65.395950,   97.400543,   -35.790764,  93.099510,   -36.845390,  132.039230,  -62.692955,
        18.956255,   30.255524,   32.162212,   -0.817844,   -28.238516,  6.417453,    -101.349907,
        22.718769,   -37.642151,  -5.256243,   -67.894859,  9.266793,    22.343540,   4.677053,
        24.239157,   -14.185557,  -32.452888,  22.661757,   -22.898094,  9.625269,    -37.153454,
        -8.889087,   -74.717369,  6.026912,    -85.187843,  3.443270,    -35.807922,  5.785808,
        -15.238491,  5.887074,    3.402055,    -0.314741,   59.745522,   -44.693478,  -50.796043,
        -16.251745,  -64.775993,  -6.471617,   -54.330521,  -5.108625,   -64.366020,  3.111659,
        -70.541893,  -5.913264,   -45.535343,  -15.886748,  -58.142593,  -6.901639,   -109.356911,
        -35.304207,  -5.594655,   -22.714941,  -70.183479,  -7.168487,   -89.615929,  -3.747384,
        -95.866432,  -0.581931,   -64.284119,  -5.869564,   -35.025982,  -16.723869,  -65.541519,
        -28.638161,  -68.932816,  -8.415176,   -97.629143,  5.727326,    -88.389084,  -1.914169,
        -193.908661, 8.942498,    -152.098831, 6.882013,    -83.307617,  -1.921410,   -34.075062,
        -4.973198,   -6.328405,   -12.859317,  -82.187492,  -13.338497,  -46.845543,  -4.007223,
        -114.377106, 20.021446,   -147.357147, 14.076577,   -172.323074, 11.947846,   -26.674107,
        14.768612,   -100.245422, 16.843769,   -102.618362, 9.931346,    -82.148636,  -4.515491,
        -38.868538,  -0.654193,   -28.082830,  -15.910756,  -56.959164,  -2.665429,   -110.448227,
        18.491962,   -134.450378, 14.942357,   -78.438248,  22.284380,   -231.338028, 5.522817,
        42.847275,   -29.980465,  -0.729880,   -4.983440,   4.708676,    -18.336382,  -24.864323,
        -15.344404,  -91.636826,  -21.013077,  78.907799,   -41.997498,  -59.186543,  14.602751,
        -246.151733, -53.042473,  0.000000,    0.000000,    90.000000,   90.000000,   119.569855,
        98.361473,   70.793304,   58.198860,   45.382019,   19.111988,   58.492329,   -12.570374,
        59.802769,   -21.406837,  42.467747,   32.618633,   12.320266,   15.404607,   -3.341026,
        -1.247789,   -4.855336,   3.617513,    30.855051,   69.447472,   1.039437,    -1.691772,
        -50.514042,  -5.778727,   16.805721,   13.668726,   29.726007,   1.976658,    4.772095,
        15.328588,   16.024790,   19.887470,   82.404579,   37.769909,   2.287376,    0.189896,
        0.000000,    0.000000,    -0.305241,   1.164505,    3.400180,    3.087978,    3.263427,
        3.573974,    3.041040,    1.976349,    0.000000,    0.000000,    7.212471,    -0.503431,
        0.814353,    -1.332597,   3.417907,    -2.660876,   0.414493,    0.039432,    1.822773,
        2.881266,    10.586664,   0.028429,    5.138951,    2.057374,    1.435048,    8.681864,
        0.265102,    -3.772225,   3.542518,    1.529327,    -4.732708,   -0.797377,   10.804803,
        -2.363395,   5.860566,    4.018504,    0.324138,    -1.693199,   2.535847,    -5.894609,
        -0.712351,   -11.378985,  20.000000,   10.000000,   5.684795,    -2.129358,   -9.182746,
        -33.599243,  12.894339,   -11.284884,  7.470033,    6.293715,    -46.255966,  -34.698303,
        -4.171332,   -11.747308,  6.746094,    11.497866,   -31.689850,  -38.681477,  -13.717919,
        -11.237623,  5.748514,    8.921695,    -49.146736,  -15.488682,  -4.865918,   -6.864594,
        2.552962,    15.502975,   -73.033257,  -20.405544,  -53.847225,  10.535797};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
