#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.029219,   1.000000,    0.592578,    2.183934,    7.688072,    0.000000,    0.287113,
        0.162058,    0.372777,    0.688050,    7.345517,    7.355375,    1.893484,    1.000000,
        1.000000,    -0.004707,   0.093920,    0.078912,    0.039501,    -76.280998,  231.322815,
        482.675903,  492.942352,  503.879272,  574.166321,  645.160522,  1007.214844, 1558.530762,
        1582.966797, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -50.734013,  -9.478745,
        -56.808270,  -16.668068,  -44.149818,  -0.998956,   -39.909107,  -39.139278,  -8.299568,
        -1.955954,   25.513060,   1.669623,    54.300823,   -15.413464,  -30.891184,  -29.454651,
        -21.611135,  -14.125934,  -31.542810,  -13.963568,  -31.499472,  -10.527822,  6.128273,
        0.877255,    8.737996,    8.474256,    20.018221,   8.054945,    26.597887,   -4.193637,
        13.713745,   -23.164873,  -10.731401,  -6.351361,   -21.249060,  -0.392526,   -0.337162,
        -4.628655,   17.199644,   22.677929,   11.285170,   21.914371,   9.525800,    17.286724,
        -4.484638,   14.603780,   13.956633,   -9.876593,   15.263080,   27.044970,   -1.035543,
        28.295544,   5.636773,    14.583453,   49.059875,   1.888952,    46.952396,   5.782064,
        12.461820,   24.382553,   -33.607834,  19.810825,   27.773205,   -1.881626,   8.350024,
        21.871609,   5.154566,    75.015968,   72.431549,   15.466613,   147.778168,  1.732920,
        108.428116,  136.370483,  140.853043,  -3.349651,   120.321007,  16.278957,   86.129013,
        -21.409990,  237.474503,  190.995255,  183.681915,  253.143005,  211.053024,  221.361053,
        249.088303,  143.052444,  152.832657,  140.137573,  60.170170,   144.151352,  -104.810204,
        222.962860,  5.994048,    170.819733,  0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -153.180069, -35.019325,
        -60.744705,  -112.587479, -62.990986,  -46.720345,  -60.199425,  24.721783,   -38.581490,
        -14.380000,  -28.643522,  -36.129555,  -61.262321,  -35.045395,  -127.197556, -87.074234,
        -72.367722,  -63.992744,  -145.788315, 13.855412,   -9.896039,   -14.609070,  -1.782188,
        -5.309982,   -6.743134,   -16.803741,  13.930492,   -37.642780,  11.978241,   -35.799782,
        -65.649277,  -24.777931,  -34.169838,  -41.725777,  7.757741,    -6.458931,   -20.796915,
        -20.300573,  15.498969,   29.684999,   39.852726,   24.818338,   6.493292,    -26.152166,
        24.804184,   -48.974354,  -57.275059,  -47.511517,  -29.866528,  -0.114611,   -6.496266,
        8.489967,    33.003304,   27.076775,   15.450097,   35.950550,   32.835541,   26.058722,
        32.419472,   7.032481,    30.044830,   -10.243596,  -12.774695,  -7.291716,   -14.579133,
        21.946703,   15.578089,   19.646400,   24.270500,   39.438667,   115.514793,  20.483271,
        19.278557,   41.201939,   107.955040,  3.135024,    20.349529,   24.186264,   50.136230,
        -22.330893,  -87.903206,  -37.249809,  58.935165,   6.530145,    49.060883,   1.316941,
        87.116547,   27.248671,   112.954559,  2.647894,    177.806717,  -5.747591,   27.887428,
        8.620475,    10.960048,   -16.374712,  -52.188774,  12.258606,   -26.289080,  15.295582,
        22.303595,   -31.253765,  48.264664,   23.081545,   40.347477,   4.761224,    158.216873,
        -10.568851,  25.370377,   -7.716728,   -216.876373, 3.399616,    -223.981750, -125.286659,
        -70.918510,  -60.570160,  -117.820793, -13.684138,  -59.305122,  -15.446998,  42.430859,
        -48.571995,  -103.716141, 0.234851,    -72.931458,  -35.783138,  -98.162918,  -164.706345,
        -17.416658,  -43.783089,  -26.603271,  -38.491936,  -39.951538,  -0.991871,   -20.741707,
        16.391365,   -29.604546,  15.949375,   -35.427189,  -32.746441,  -49.379654,  -27.269064,
        -19.035618,  30.179232,   -2.914715,   -49.980713,  -3.119702,   -31.085785,  -7.340511,
        -11.909449,  -11.031274,  11.663440,   3.900157,    5.994370,    25.772900,   8.710295,
        52.754997,   -32.760670,  -47.921875,  -61.723499,  -6.806215,   -18.334263,  17.618032,
        -25.456217,  14.699462,   14.027670,   29.191706,   0.789115,    16.044762,   9.205185,
        42.142822,   0.169210,    32.298332,   -23.669882,  2.663137,    -31.730110,  -3.227185,
        -40.572468,  4.642334,    -0.760621,   19.902660,   -0.453861,   24.465500,   14.559229,
        46.898106,   1.561534,    19.239594,   9.554706,    40.419670,   -6.216404,   21.593046,
        -56.134277,  -3.683567,   -10.763009,  16.504190,   26.866682,   30.061083,   -0.097379,
        62.843559,   2.688128,    50.707836,   22.608681,   75.130905,   0.114532,    -5.787609,
        21.444021,   -12.573492,  -15.340571,  22.978832,   -10.385104,  50.000931,   11.720610,
        58.446835,   10.946733,   102.597237,  -33.323174,  75.757698,   5.181681,    104.751068,
        4.499414,    53.836239,   15.162024,   66.673607,   -26.380991,  -25.250847,  -3.525302,
        2.100963,    27.351938,   48.725670,   6.435499,    -14.918477,  16.040108,   42.288616,
        2.129165,    -3.555153,   20.700008,   63.171745,   1.777549,    -58.029545,  -78.335289,
        -13.567569,  -14.907009,  -42.328209,  -3.636668,   -77.762436,  16.666712,   -111.800346,
        28.227644,   -34.207985,  -0.703405,   -89.095375,  18.351490,   86.694557,   -44.715328,
        207.061676,  -67.968239,  14.403919,   -9.204637,   7.500432,    -20.950905,  -1.145993,
        -4.883337,   6.576820,    -14.651133,  7.693155,    -22.616789,  -17.277378,  -3.064757,
        -45.007530,  1.074225,    -28.996614,  -31.045837,  1.976521,    3.450625,    -11.159919,
        -20.853230,  -7.332508,   -7.507736,   -9.078928,   -2.857029,   11.175558,   -12.717341,
        7.178074,    -35.103050,  -23.460560,  -7.918684,   -94.534485,  11.455795,   -37.814419,
        -1.449779,   -58.041164,  -9.832007,   -35.861183,  -1.751772,   7.654481,    -10.692770,
        5.015816,    -20.265455,  -5.540725,   -9.753113,   16.676460,   -17.994318,  -16.657011,
        -25.401461,  -45.753109,  8.320663,    -11.533626,  6.323763,    -12.457955,  8.628674,
        6.015384,    -4.439253,   1.413339,    1.264351,    -30.929358,  10.906143,   -14.461173,
        19.623981,   -42.847916,  10.237360,   -8.657381,   19.571487,   24.139519,   2.393065,
        19.449249,   4.266358,    37.485218,   -8.194609,   -33.838512,  14.538681,   20.675383,
        -2.367153,   14.932077,   0.741045,    -35.145691,  8.703648,    15.063115,   28.562592,
        -4.022365,   4.882823,    18.855267,   6.205836,    27.616337,   -4.112778,   70.282654,
        -13.694596,  35.189247,   -7.632453,   34.663658,   13.509094,   62.411690,   -1.951175,
        15.486130,   30.318703,   12.208145,   33.665958,   30.005800,   32.481655,   83.865341,
        14.433754,   44.265720,   29.412975,   108.858917,  8.613756,    50.043152,   20.322460,
        164.286911,  -7.720325,   47.107330,   -13.019577,  48.278957,   0.203787,    65.568268,
        10.112450,   32.248787,   19.584469,   24.840803,   26.095200,   19.862272,   33.615002,
        26.978708,   27.816822,   79.732101,   11.782402,   -6.208921,   -16.069571,  0.111636,
        6.794919,    -0.266601,   -58.609928,  0.443581,    -56.432968,  -2.237159,   -69.878242,
        -29.574842,  -141.805466, -131.240280, 33.057549,   -277.872467, 246.221863,  -4.575464,
        -28.880505,  -6.479827,   -37.182957,  11.831366,   -38.172340,  -3.389343,   0.604268,
        24.256079,   -102.565224, 17.143682,   -118.032822, -26.709484,  -139.268234, -35.474632,
        -91.759247,  -22.424242,  72.828064,   -14.229162,  13.623538,   -29.718227,  70.388588,
        3.289807,    -13.060962,  -8.373432,   16.696625,   13.735964,   -11.856410,  23.220900,
        -68.420586,  -35.122437,  52.661945,   -20.916157,  41.150444,   -14.057590,  26.909534,
        -23.988974,  24.939245,   3.164135,    20.509119,   0.227747,    35.214241,   -16.721571,
        56.917637,   -16.494217,  -16.867451,  -4.354431,   -12.172040,  -19.208347,  63.050823,
        -51.424801,  117.702957,  -53.773293,  100.067505,  3.778384,    40.738861,   20.830538,
        -7.227864,   1.867266,    47.742134,   10.208086,   0.919419,    -7.284400,   -20.819002,
        -30.745760,  13.358733,   6.909420,    5.955592,    -34.058041,  78.457054,   -14.195503,
        39.785694,   -9.011810,   46.048405,   106.068604,  -39.052177,  110.532898,  -90.135353,
        16.135229,   -43.613525,  -57.016495,  49.029373,   -54.784863,  106.615303,  -8.551254,
        63.994865,   14.522612,   21.108213,   35.677303,   11.199619,   -19.041000,  113.869186,
        121.579163,  -96.803291,  135.824921,  -136.362686, -79.157043,  187.740784,  -35.279446,
        81.630173,   -58.182331,  130.795212,  -28.096745,  49.796715,   -20.601831,  92.820938,
        -44.111450,  123.128891,  71.676460,   -45.229336,  -75.949081,  220.695038,  40.670853,
        -22.695721,  16.811146,   -15.161619,  0.412843,    8.531860,    -113.772186, 30.709751,
        -52.982212,  -2.141005,   -83.281441,  31.297062,   27.434862,   20.420773,   41.130161,
        1.725397,    -13.916260,  9.122457,    42.727581,   -3.067803,   -34.219902,  -21.948969,
        -126.103233, 14.494858,   -127.980690, 12.598001,   -83.904800,  7.535764,    2.896795,
        -0.766377,   24.879318,   -4.540941,   -13.452077,  -33.477245,  -3.932701,   -26.471788,
        -100.469818, -14.356101,  -46.579723,  -18.192198,  -92.066666,  -2.088082,   -120.935051,
        -2.064505,   -27.596998,  -31.749397,  -66.285538,  -29.245190,  -54.466793,  -30.196918,
        29.941389,   -35.327347,  1.444319,    -37.546143,  -43.429050,  -22.310789,  -34.675087,
        -18.720222,  -59.961605,  -22.271534,  -24.598156,  -41.819134,  -125.696747, -46.092888,
        -39.650414,  -26.636391,  -29.798847,  5.813542,    -87.125694,  12.122229,   -74.863167,
        9.704865,    -67.968376,  -7.372690,   50.805462,   -34.381466,  47.007919,   -33.921452,
        -71.844604,  -35.766304,  -62.751503,  20.409185,   -74.694847,  48.410854,   5.450188,
        34.781284,   -91.392151,  27.202551,   -20.981800,  6.490744,    33.451618,   15.946221,
        6.322659,    31.169634,   -116.853912, 5.634634,    89.239082,   -6.940546,   -32.808079,
        52.505562,   10.740332,   39.472137,   38.036137,   35.680790,   47.650696,   17.364275,
        -32.696636,  -5.876838,   -195.995712, 57.907639,   135.488678,  -51.370033,  27.382080,
        -79.670135,  30.232916,   12.507294,   -0.121967,   30.454758,   43.958206,   8.575495,
        -2.844792,   -3.297642,   61.735462,   -34.278599,  -218.834061, 55.553856,   -112.322090,
        -152.312042, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    -34.240181,  104.634460,  -123.692688, 140.202286,
        -73.134041,  118.085876,  -147.909012, 166.859253,  23.395493,   87.658150,   -10.093266,
        87.567047,   -0.824520,   105.921005,  -108.000443, 77.173355,   -56.823673,  135.187302,
        -75.835266,  150.943863,  -82.793297,  135.332199,  -61.483421,  115.628769,  -28.314564,
        115.668671,  -57.043880,  133.771042,  -72.376015,  155.040009,  -5.216738,   85.574127,
        5.626924,    186.236725,  -38.482193,  200.625580,  -64.027565,  181.525375,  -32.616440,
        146.683060,  -50.106354,  179.116440,  6.719766,    168.992508,  -52.863487,  201.574951,
        -28.769554,  180.512177,  62.989990,   278.532562,  20.148968,   282.887634,  35.697140,
        264.097748,  16.423944,   221.649155,  -7.945430,   204.154694,  -39.670242,  229.689697,
        -14.331117,  256.973541,  -38.356537,  252.826462,  153.625931,  400.325256,  131.025742,
        395.751129,  154.661453,  363.145020,  111.166428,  313.386566,  115.008133,  268.657135,
        111.119301,  256.970581,  110.601067,  319.785706,  145.241501,  275.894104,  340.661591,
        429.451050,  256.779846,  506.234894,  311.386505,  474.081604,  282.156525,  393.741333,
        181.013641,  382.158661,  95.918976,   384.214966,  -87.402542,  475.881378,  60.468403,
        423.909668,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    62.682541,   14.934097,   13.520164,   36.188004,
        15.740388,   18.089348,   29.869205,   -10.124378,  19.697248,   -5.487846,   10.681559,
        -8.233704,   0.000000,    0.000000,    -5.001422,   -5.746711,   -9.095957,   -4.558862,
        -33.649113,  -135.120804, 2.264954,    -304.347260, 12.143002,   5.774811,    39.360451,
        -9.599477,   26.669388,   -14.411274,  10.968840,   -1.934794,   -0.000000,   0.000000,
        -2.130025,   -3.671780,   6.095482,    7.508065,    -42.430641,  56.536041,   19.118744,
        258.225006,  35.428543,   99.137497,   -1.088246,   21.613855,   -9.157986,   -85.464104,
        19.871645,   30.404572,   40.715984,   6.396262,    -686.869080, 130.702332,  -31.114607,
        -64.816902,  -30.623327,  -34.983982,  22.817387,   -19.650789,  0.000000,    0.000000,
        6.597617,    18.876249,   9.073995,    30.060930,   9.854278,    60.057484,   -18.047607,
        151.608276,  -361.245087, 118.046753,  -169.490479, -3.840722,   -51.759716,  -27.767956,
        -14.242299,  -25.756634,  0.000000,    0.000000,    19.052364,   29.930464,   3.749142,
        81.123367,   1.338579,    129.704437,  -111.551926, 197.938828,  890.860229,  -1453.555908,
        -112.643227, -257.028564, -165.102158, -78.573196,  -111.771240, -43.523125,  0.000000,
        0.000000,    110.079788,  55.421928,   302.898895,  -10.461728,  484.105011,  -99.817589,
        935.783203,  -503.486877, 2.120196,    0.563412,    0.000000,    0.000000,    1.177261,
        5.202410,    4.103014,    6.443500,    3.658598,    5.355380,    2.410401,    7.409995,
        0.000000,    0.000000,    5.492681,    -0.745496,   0.890499,    3.300066,    2.005991,
        -1.483514,   4.237170,    -2.423116,   -1.284273,   5.809937,    12.854768,   -2.055963,
        1.916405,    4.798214,    3.874887,    18.621052,   -4.117511,   -5.142432,   0.397887,
        1.329380,    -5.033033,   -1.527277,   6.398375,    -3.903226,   1.301328,    10.990180,
        -5.715599,   -3.742462,   -0.920560,   -9.344544,   -5.847555,   -12.331860,  20.000000,
        10.000000,   2.384750,    -5.087282,   -10.791658,  -57.499622,  13.117554,   -16.784468,
        17.843140,   4.356131,    -56.981369,  -42.490585,  1.980638,    -22.125895,  4.141420,
        12.991557,   -52.044819,  -51.208336,  -25.236919,  -15.672487,  1.318528,    14.193032,
        -66.390488,  -9.401678,   -10.579457,  6.153937,    3.729151,    29.050964,   -102.265884,
        -18.571358,  -68.158318,  11.625292,   0.000000,    0.000000,    -91.336617,  -40.710739,
        -83.316925,  -41.504787,  -73.230171,  -36.424110,  -44.003380,  -52.942127,  -7.626423,
        -67.562752,  28.162556,   -77.581947,  39.625179,   -71.970512,  238.792633,  -164.135605,
        0.000000,    0.000000,    131.315384,  26.283035,   154.624405,  27.333796,   157.862640,
        38.330193,   152.810150,  27.936197,   149.293167,  38.490482,   0.000000,    0.000000,
        0.000000,    0.000000,    -63.788834,  -3.129056,   -201.788330, -34.008011,  -290.884949,
        -66.956619,  -394.915894, -82.662354,  -496.903229, -103.252274, -16.032066,  0.592969,
        1.377977,    -110.511597, 1.461439,    -74.874496,  -120.585159, 3.508958,    -49.321869,
        -22.440655,  -30.323589,  22.267109,   -7.845970,   9.043182,    -30.801931,  53.366776};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

std::string getPstPieceTypeName(int idx) {
    if (idx == EvalParams::kPassedPawnPstIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

std::string getTropismPieceTypeName(int idx) {
    if (idx == EvalParams::kDoubledPawnTropismIdx) {
        return "Doubled pawn";
    } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
        return "Isolated pawn";
    } else if (idx == EvalParams::kPassedPawnTropismIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

void writeSquareTable(const EvalParams::SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(
        const EvalParams::PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < pieceSquareTables.size(); ++pieceIdx) {
        out << "\t" << getPstPieceTypeName(pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

void writeTropismTable(
        const std::array<TaperedTerm, EvalParams::kNumTropismPieceTypes>& tropism,
        std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n",
                getTropismPieceTypeName(pieceIdx),
                taperedTermToString(tropism[pieceIdx]));
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    writeTropismTable(params.ownKingTropism, oss);
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    writeTropismTable(params.enemyKingTropism, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));
    oss << std::format(
            "\npassedPawnOutsideKingSquare:\n\t{}",
            taperedTermToString(params.passedPawnOutsideKingSquare));

    return oss.str();
}
