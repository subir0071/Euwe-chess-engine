#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,    -203.317688,
        158.986465,  356.748352,  357.093140,  375.910400,  441.624725,  455.276154,  687.694641,
        1154.772461, 1113.517822, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -20.194706,
        3.049670,    -25.142288,  -6.285267,   -27.618469,  -9.918264,   -33.942142,  -5.739578,
        -5.417223,   1.757078,    2.600930,    -6.693465,   27.849810,   -9.105391,   -12.931405,
        -26.581421,  -1.104567,   -1.843399,   -2.791613,   0.236319,    -21.555508,  1.156829,
        -7.404095,   0.186754,    -6.982129,   -3.606679,   -4.652028,   1.112407,    25.599318,
        -3.387185,   13.736048,   -25.212627,  12.748128,   6.615914,    -1.850262,   15.961553,
        8.055894,    0.039502,    17.098433,   -3.851624,   -9.553885,   8.269544,    11.620081,
        4.180121,    -0.378974,   10.627789,   -11.101327,  -2.662083,   28.351151,   24.224648,
        21.675800,   24.788502,   11.919627,   1.653344,    9.460741,    -0.998857,   25.206041,
        6.765988,    6.538173,    16.358463,   -21.228584,  10.045529,   -3.329173,   5.199670,
        14.225636,   53.987164,   40.889885,   46.286541,   0.483548,    34.225906,   17.766844,
        -4.626573,   37.641754,   -16.680862,  57.169659,   27.491707,   17.455240,   25.213184,
        15.311444,   -0.470651,   187.446106,  125.403908,  137.708496,  157.147385,  220.825455,
        112.357498,  171.751266,  101.089882,  169.275421,  110.035667,  130.440735,  129.594666,
        -60.158459,  143.054916,  83.349495,   96.407753,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -723.595154,
        3.767141,    -31.985971,  -36.612617,  -94.925682,  -15.702532,  -31.984692,  -1.605276,
        -32.934029,  -12.748722,  -15.902679,  -38.735764,  -20.394375,  -82.520042,  -170.150375,
        -35.919029,  -24.375547,  -64.455894,  -93.528549,  -0.837863,   -21.654247,  -20.041174,
        0.358379,    -10.585083,  -13.626240,  -12.413801,  -13.722622,  0.702730,    -42.348282,
        -2.085468,   -28.861420,  -39.926144,  -23.821564,  -9.822001,   -20.413805,  -19.121901,
        -13.521957,  -0.506752,   15.462149,   13.598439,   43.967861,   4.088141,    2.334467,
        -16.118908,  5.412273,    -25.907562,  -6.465298,   5.409647,    -28.665939,  -6.975054,
        91.389732,   5.521819,    22.835043,   16.580460,   11.480242,   21.902170,   11.038889,
        36.476849,   25.807959,   5.193236,    41.640202,   5.695092,    -1.534786,   -20.506695,
        -23.877661,  -8.541016,   18.827681,   -2.876745,   21.863588,   17.208183,   54.794933,
        25.133251,   16.885687,   19.806570,   73.342537,   -1.297962,   -4.070330,   1.325296,
        -4.610792,   -13.153484,  -48.222996,  -26.126980,  -6.470144,   12.808515,   53.045406,
        4.444236,    72.722359,   8.706057,    80.373894,   -25.784588,  151.893860,  3.740480,
        40.119637,   17.822460,   -56.143982,  8.853339,    -86.455528,  -15.617083,  -18.087309,
        -18.526392,  30.916822,   -2.205384,   65.816071,   22.826168,   26.406855,   2.710947,
        32.605717,   -24.244991,  -31.160368,  -1.854432,   -45.942963,  11.927697,   -111.842201,
        -74.862488,  -121.092995, -36.890621,  -114.768425, -0.764734,   -66.344078,  -10.042873,
        -6.871742,   4.855032,    -8.154304,   13.818199,   -199.224167, 11.455732,   103.729675,
        -131.330811, -79.855812,  -53.111301,  -30.418970,  -45.805916,  -24.825348,  -3.807106,
        -40.048847,  17.201956,   -17.676397,  -3.445601,   -32.952431,  0.791389,    -22.297062,
        -18.617212,  -79.473564,  -11.508953,  0.259544,    -22.864716,  -10.360257,  -24.442871,
        -5.715600,   -7.592576,   -14.278011,  9.691542,    3.981502,    9.895615,    -4.794568,
        -4.267286,   23.353992,   -9.834437,   -45.779114,  -11.802313,  -10.787093,  -15.273845,
        15.428817,   -8.093912,   16.545868,   2.729280,    9.411553,    19.046869,   13.879130,
        17.029142,   32.923080,   -7.414373,   18.290890,   -15.575942,  5.793285,    -35.819607,
        13.010062,   -54.289597,  -20.020411,  -6.682219,   16.216507,   14.997711,   39.056332,
        13.276632,   28.744411,   -5.545148,   14.555274,   -0.057391,   32.205223,   -0.710494,
        9.715898,    -14.745162,  -22.162540,  -9.433083,   17.027035,   9.944517,    14.361289,
        -3.291457,   52.590134,   11.324085,   53.276924,   20.511930,   52.438911,   0.248054,
        0.852451,    9.575783,    2.068942,    -10.711530,  -1.081181,   -5.558363,   38.718536,
        -4.769281,   34.685211,   -18.646734,  19.121357,   -14.921044,  78.446220,   13.354622,
        74.076309,   26.430445,   92.220329,   -27.447086,  33.452629,   -5.090773,   13.136565,
        -34.735451,  10.544829,   -16.757284,  -2.047524,   1.202284,    -37.915371,  4.987341,
        19.686474,   -9.172698,   34.017712,   7.260815,    59.746162,   -10.900003,  8.413512,
        -38.947830,  -48.254410,  -1.339430,   -49.525856,  -38.383293,  -16.136656,  -20.272947,
        -219.515015, -1.775167,   -50.147236,  1.038868,    -101.605888, -24.504223,  20.793587,
        1.332851,    8.964513,    -51.005619,  32.606407,   -25.198841,  17.784477,   -12.363706,
        5.631045,    -12.863928,  3.458240,    -13.135673,  -10.325404,  -12.980624,  -22.996258,
        -11.731729,  -41.167458,  -12.517911,  -16.822927,  -26.611542,  -6.339344,   -18.839972,
        -11.676467,  -5.806135,   7.253568,    -11.487151,  -20.091919,  -8.454612,   -1.631845,
        -30.928064,  -38.491966,  -25.087599,  -71.575951,  -4.757911,   -92.994812,  -3.890874,
        -25.530416,  -5.805525,   -14.858241,  0.145326,    -46.509800,  0.374019,    -25.514833,
        -5.913445,   -19.768930,  -14.655263,  -17.447083,  -39.396976,  -12.138833,  -19.082874,
        -39.339962,  -21.811377,  -2.085560,   -3.791865,   6.724501,    -4.776346,   -18.777542,
        6.389789,    -14.849830,  7.321422,    -68.148216,  10.416091,   -56.294640,  -0.907264,
        -56.773338,  6.759391,    -99.614510,  11.785991,   -12.085465,  13.032163,   -25.615875,
        11.329719,   -46.501171,  10.698569,   -5.620382,   1.501721,    -84.602867,  7.289329,
        -15.501969,  3.093106,    -39.795799,  11.711171,   -82.751022,  9.775006,    -16.137932,
        27.811457,   -26.184681,  11.653983,   -20.927141,  7.684421,    -13.770057,  -3.400001,
        -18.125324,  18.057707,   -7.491730,   14.090211,   77.375923,   -9.144927,   -32.864326,
        14.939549,   1.052983,    25.469942,   -42.497375,  33.750690,   -1.010372,   22.387007,
        -1.895420,   21.535112,   -19.500809,  20.328886,   21.620539,   20.324148,   -2.613179,
        17.206068,   -12.588653,  15.765561,   -13.942374,  8.591008,    -22.709620,  16.830019,
        -16.149696,  25.254030,   -14.688838,  24.229662,   -13.566386,  22.686548,   -53.923256,
        34.580486,   -19.984453,  31.303492,   -38.735935,  16.377764,   4.430329,    16.945795,
        14.118951,   -36.106949,  30.973961,   -138.566406, 2.833047,    -17.617338,  -3.532317,
        -90.617279,  -41.292091,  -101.891785, -52.586807,  -47.023773,  -158.404663, 52.170612,
        -19.132172,  -17.570021,  15.078362,   -61.696236,  13.586801,   -40.541267,  3.995476,
        -37.035194,  3.805161,    -62.649231,  -7.966567,   -84.014999,  -13.705070,  -153.898438,
        -29.332359,  -214.635666, 11.286553,   -32.065948,  8.243661,    -33.745659,  -7.466804,
        7.877908,    -4.983275,   -22.436041,  -10.734466,  -11.494056,  -15.571540,  -18.477446,
        -0.037162,   -46.727386,  -11.975654,  -146.286285, 9.838113,    -26.065596,  -3.144004,
        33.013699,   -13.446189,  6.741300,    6.803483,    -3.143336,   -16.358902,  35.681671,
        -5.071845,   -12.296760,  -15.692634,  -15.251555,  -11.526748,  35.622040,   -5.613608,
        6.604554,    -30.803421,  83.270226,   -37.063133,  91.395180,   -5.492843,   51.163483,
        -7.655822,   62.067394,   -8.225501,   53.912121,   -23.513451,  78.650635,   -17.458237,
        10.360894,   -8.217132,   -10.916778,  -4.098990,   49.845840,   -5.468635,   58.312309,
        -18.704407,  60.911884,   -7.473098,   81.135208,   47.138802,   -18.737394,  62.058189,
        -88.354355,  -0.549499,   -6.101077,   14.678704,   -29.804808,  -40.969002,  106.049347,
        -14.646407,  111.910934,  -2.696037,   86.997337,   -38.363152,  94.718590,   -31.051987,
        95.723930,   -2.440032,   50.112961,   -0.283592,   18.322493,   -24.473694,  109.728081,
        52.659554,   -1.089450,   -55.471992,  148.232391,  -27.522232,  81.948250,   -49.526062,
        121.407715,  10.409692,   51.703094,   143.322510,  -139.845718, 80.332222,   -45.290146,
        18.617804,   15.456951,   40.088692,   2.551207,    -28.533560,  14.884590,   -102.282593,
        38.889988,   -34.244106,  -3.736509,   -58.356789,  16.497822,   17.895744,   6.007860,
        15.928926,   -9.037349,   13.168962,   16.847084,   24.614969,   4.217243,    -6.871259,
        -3.433408,   -75.423576,  15.124794,   -77.840584,  7.544758,    -32.599567,  4.085473,
        -4.527232,   5.127122,    -4.449968,   3.050521,    82.085365,   -59.989872,  -61.364109,
        -12.899565,  -52.054100,  -7.899930,   -55.950775,  -3.817311,   -45.627155,  0.054272,
        -66.871765,  -3.570490,   -37.044216,  -19.287340,  -51.787067,  -6.918724,   -68.617035,
        -44.754623,  21.470362,   -31.662228,  -55.825470,  -7.445769,   -62.958973,  -5.244306,
        -56.653599,  -4.760837,   -40.307518,  -11.279876,  -30.498770,  -19.913853,  -60.592140,
        -36.220036,  3.074781,    -23.085220,  -28.576517,  -2.385538,   -50.711113,  -4.782055,
        -125.218208, 1.628337,    -45.772636,  -1.783161,   -5.579663,   -12.036683,  -5.247785,
        -5.972187,   32.278389,   -21.204521,  -35.534786,  -16.542675,  -9.014086,   -1.858599,
        -2.491400,   10.837622,   -42.190960,  9.332177,    -111.414345, 12.239048,   -26.740448,
        21.171890,   -16.030548,  16.595585,   44.772648,   -5.016819,   -8.509880,   -22.387003,
        -21.397274,  6.816709,    -69.433784,  6.496428,    -27.682556,  2.304968,    -91.884575,
        16.927914,   -59.053486,  6.273751,    -141.294907, 38.155071,   -287.198700, 1.201903,
        -15.625986,  -30.419516,  7.010970,    -19.713718,  -63.762524,  2.855450,    -107.083458,
        -13.899023,  -126.194389, -11.941486,  45.656658,   -34.075928,  -52.300041,  -2.684763,
        -147.151199, -69.000099,  0.000000,    0.000000,    90.000000,   90.000000,   138.291367,
        115.715271,  70.192970,   61.742088,   43.330021,   16.226278,   52.947887,   -18.501886,
        60.055321,   -28.313171,  52.356659,   13.137315,   12.843714,   21.788307,   1.497063,
        -22.309452,  16.095627,   -13.979012,  12.856563,   -13.158153,  3.546523,    -4.296136,
        0.000000,    0.000000,    -5.832664,   8.171510,    -18.307220,  17.228895,   -23.567448,
        0.546772,    -33.539467,  -212.054047, -5.874941,   7.293910,    45.139645,   76.437019,
        7.882594,    -0.047401,   -43.072582,  -26.966255,  20.212914,   15.031209,   34.027893,
        2.635807,    -217.479828, -102.509369, -86.696739,  -68.860123,  -11.378377,  -52.418461,
        1.406271,    -21.084625,  0.000000,    0.000000,    16.960899,   23.709166,   24.542496,
        37.178444,   25.967300,   75.125793,   23.779058,   126.953926,  -17.113832,  -181.636078,
        -63.084572,  -123.248085, -66.424088,  -70.258873,  -37.318466,  -35.548969,  0.000000,
        0.000000,    20.864935,   38.334545,   49.667732,   84.439873,   81.603813,   125.615189,
        121.737686,  149.391037,  179.517136,  67.996147,   2.020602,    0.230039,    0.000000,
        0.000000,    -0.320096,   3.858393,    3.592421,    3.788514,    3.710603,    4.082674,
        2.834229,    3.980468,    0.000000,    0.000000,    6.232533,    -0.942940,   -0.265552,
        -0.029622,   1.598794,    -4.283393,   1.525340,    -0.214243,   2.552910,    3.524589,
        10.777341,   -2.422264,   4.659256,    2.099643,    0.735852,    10.192356,   -0.499869,
        -5.021959,   1.042146,    1.765956,    -4.234950,   0.332670,    11.866953,   -2.653502,
        5.015128,    3.032173,    -1.214690,   -2.227921,   1.094318,    -7.216340,   -1.611364,
        -13.570648,  20.000000,   10.000000,   4.111043,    -2.022889,   -13.278673,  -38.385059,
        9.586375,    -12.581599,  11.374763,   8.639156,    -48.990971,  -31.742748,  -1.874113,
        -11.975737,  7.712347,    11.647600,   -40.402767,  -42.389435,  -16.430840,  -14.752673,
        7.214833,    8.218264,    -53.133331,  -13.366366,  -7.457391,   -8.485106,   0.265963,
        16.637669,   -78.929688,  -29.022615,  -55.397709,  -12.471918,  0.000000,    0.000000,
        -0.357668,   11.764241,   -12.960769,  13.902071,   -30.895977,  13.221623,   -56.716972,
        23.969517,   -73.179794,  29.770224,   -105.898499, 22.159718,   -156.744141, 30.922150,
        -242.358002, 22.962084,   0.000000,    0.000000};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    return oss.str();
}
