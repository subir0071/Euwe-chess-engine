#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,     -190.454468,
        205.782196,  396.055786,  449.799255,  415.039886,  509.183441,  560.144714,   851.099915,
        1241.345825, 1485.330688, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -9.983462,
        -5.566803,   -14.806470,  -16.461922,  -24.703358,  -9.252004,   -31.619429,   -72.621895,
        -27.445229,  9.313581,    2.124719,    -8.690412,   30.045151,   -5.287945,    -40.186302,
        -26.928850,  14.665201,   -1.369885,   7.582176,    -1.852426,   -16.772535,   0.310416,
        1.941952,    -5.813808,   -7.075435,   -3.925623,   -7.730268,   -10.547531,   18.179127,
        -2.523863,   -11.090915,  -26.197662,  23.643669,   9.191013,    10.380140,    12.081940,
        7.665850,    -2.667368,   20.313738,   -7.755378,   -10.567896,  9.720042,     9.516653,
        3.268954,    -14.136856,  13.490356,   -25.376862,  -6.743800,   45.165806,    33.248840,
        29.073601,   26.485590,   21.860506,   7.854004,    18.493929,   -3.833778,    26.544613,
        8.600202,    -5.591692,   23.815655,   -34.058647,  22.269594,   -20.619959,   11.345330,
        33.374596,   62.451317,   42.178665,   47.783356,   23.573742,   35.883400,    33.001377,
        -3.624726,   58.095871,   -23.225979,  81.209801,   21.055845,   22.121576,    51.035759,
        -0.842934,   25.753714,   223.177917,  173.936752,  190.009460,  202.887405,   181.295349,
        155.576202,  215.894989,  138.751221,  175.189392,  136.848740,  174.027771,   176.112549,
        -109.197212, 233.212296,  -41.001434,  184.615936,  0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -360.877747,
        -42.346771,  -40.419224,  -51.039413,  -112.048752, -29.636263,  -32.180477,   -10.687379,
        -31.393423,  -41.533173,  -18.278944,  -49.417873,  -66.987503,  -74.118263,   -134.301773,
        -53.593693,  -61.116215,  -32.000187,  -68.506859,  -10.953181,  -28.981741,   -25.387920,
        -0.190846,   -9.454638,   -10.943627,  -35.261349,  -22.362059,  -9.138310,    -33.044933,
        -20.419142,  -37.792637,  -22.843510,  -34.412121,  -22.860962,  -0.696573,    -12.657303,
        -11.655501,  -21.883453,  15.629407,   12.307889,   42.240166,   15.441922,    2.670141,
        -18.417387,  12.920690,   -45.296776,  -27.694044,  -39.051807,  4.039042,     -21.937399,
        32.752277,   17.280970,   32.300770,   31.256788,   10.604652,   30.729273,    16.919033,
        35.932434,   25.586872,   -4.680713,   36.879070,   -14.146159,  -5.168359,    -4.042550,
        -9.461131,   -3.546091,   22.840967,   10.134000,   30.591183,   23.353590,    68.413956,
        37.357208,   8.895590,    22.121382,   66.989510,   9.299775,    -5.452218,    -0.841569,
        -6.315820,   -0.515818,   22.180344,   -33.268711,  9.367372,    17.461761,    75.893036,
        17.283396,   88.935127,   25.438429,   112.041283,  -19.425688,  103.159271,   21.749031,
        18.441107,   10.152690,   -59.929073,  -13.195153,  -47.383945,  -13.288079,   26.758968,
        -12.949442,  61.729000,   -14.251031,  54.265255,   25.838476,   27.236359,    18.563051,
        43.780201,   -26.079342,  -77.866180,  -12.584145,  -130.032486, -29.995638,   -253.132034,
        -44.700459,  -175.928528, -17.945845,  -105.326668, -13.196665,  -0.279640,    -25.411680,
        58.297993,   -4.288003,   0.984751,    -1.992997,   26.809578,   -17.406019,   -67.379349,
        -218.148621, -94.482658,  -43.974506,  -45.931580,  -15.107408,  -32.465904,   -1.616775,
        -31.141880,  21.268986,   -10.923943,  5.188160,    -35.303169,  -0.809211,    -9.081411,
        4.649688,    -119.119949, 36.308342,   -1.865473,   -24.840137,  -5.405127,    -16.250229,
        5.967404,    -14.576703,  -16.535618,  12.070585,   5.104555,    13.587039,    -0.829752,
        1.078947,    34.947037,   -17.012213,  -48.698738,  -0.032908,   -18.092735,   -15.306136,
        22.004822,   -5.020011,   19.678225,   -3.642992,   14.962018,   4.863868,     13.400182,
        13.797450,   33.473362,   -6.671796,   14.601025,   -37.510635,  -17.377718,   -42.421463,
        20.159164,   -63.136292,  12.255806,   1.900332,    26.472950,   5.772777,     33.190983,
        8.305011,    25.325527,   -14.827271,  13.261233,   5.808212,    47.090000,    7.912518,
        9.243897,    -41.940235,  -15.965170,  -3.431350,   19.609774,   17.046930,    28.857925,
        -6.243115,   61.655407,   0.780599,    38.000122,   12.581973,   50.506966,    8.049427,
        -6.376760,   9.307464,    0.821652,    -9.421397,   15.930776,   4.382269,     47.762901,
        3.052898,    48.007591,   -3.173013,   122.409309,  -32.756172,  55.081024,    18.830143,
        121.749252,  8.437150,    59.717262,   -34.148300,  44.252377,   -17.613516,   45.523472,
        -49.464653,  -3.406804,   6.458301,    13.084316,   -3.427464,   -62.146614,   43.427872,
        30.477222,   -14.361490,  -17.086283,  7.840347,    65.674660,   12.151355,    1.939920,
        -44.584599,  -77.857292,  -2.001992,   -71.432251,  -45.337910,  -29.271385,   -3.126101,
        -249.834595, -2.980363,   -78.729668,  20.923498,   -0.899872,   -22.068310,   78.159225,
        -6.524567,   92.528290,   -35.662308,  44.754086,   -26.344719,  24.478447,    -12.407443,
        4.881437,    -10.954427,  9.688393,    -20.124628,  -5.600672,   -25.412529,   -29.884581,
        -13.831065,  -65.327026,  -20.785168,  -45.943966,  -20.632343,  14.624635,    -20.726955,
        -19.133348,  -22.781269,  -21.772612,  -2.706448,   -21.309320,  -16.982351,   -11.772535,
        -27.496508,  -24.564690,  -24.782763,  -69.871323,  -3.609873,   -141.609207,  16.001860,
        -17.889778,  -7.627639,   -12.939899,  -2.130944,   -32.821793,  -5.584766,    -12.819154,
        -13.471589,  -8.366905,   -32.527039,  -21.701696,  -42.902805,  -35.462532,   -22.094419,
        -88.271324,  -36.160351,  -15.475148,  3.224744,    18.781101,   -2.737312,    -22.913132,
        9.127022,    -19.040604,  -1.646297,   -49.097496,  -0.983471,   -58.794491,   -0.419252,
        -49.124668,  1.613465,    -111.886055, 11.463367,   -5.155860,   13.757819,    -8.791501,
        8.018433,    -44.019081,  11.341630,   19.454334,   -9.920653,   -90.283623,   12.844354,
        -28.124077,  10.514301,   -60.584801,  12.435945,   -52.816841,  2.899945,     -44.346855,
        38.408344,   -41.813457,  15.459964,   -28.005810,  11.093436,   -25.595079,   -3.043847,
        -31.026915,  14.174195,   -31.312378,  13.478932,   72.080124,   -20.331800,   -67.509125,
        14.223617,   13.817245,   29.794260,   -30.581318,  34.665615,   -10.399144,   34.229156,
        -16.438965,  35.005791,   -35.514690,  35.425697,   5.416096,    31.438108,    1.289955,
        18.357336,   30.919304,   6.576685,    9.360687,    3.947525,    -23.987762,   19.493475,
        -64.042969,  35.308861,   -43.400707,  40.537800,   -45.715580,  32.297882,    -101.350830,
        56.641109,   15.836560,   30.965288,   -73.733528,  30.400351,   5.530108,     -10.961261,
        7.626777,    -17.681816,  30.471231,   -131.286423, -2.028458,   -42.907612,   -2.882397,
        -45.112309,  -50.671803,  -82.066467,  -119.956726, -36.703278,  -183.826584,  193.877243,
        8.724616,    -52.332615,  3.039111,    -13.567794,  16.330387,   -54.132473,   -14.710271,
        13.708394,   -1.479478,   -48.376770,  -15.511872,  -57.667274,  -36.342358,   -102.798347,
        -38.787144,  -169.543549, -13.875344,  54.100895,   13.946145,   -1.206233,    -8.379125,
        21.351704,   6.746646,    -23.407970,  -12.351819,  -17.119358,  -12.405580,   9.357564,
        -4.396550,   -11.851012,  -24.506649,  24.386410,   28.057722,   -86.600922,   17.425581,
        23.440342,   -9.180223,   4.719674,    23.250917,   -30.892200,  -6.406774,    49.621799,
        -7.257279,   27.338596,   -19.012085,  -36.127907,  -11.511571,  2.063016,     -20.537552,
        59.629177,   -18.831173,  69.294930,   -24.104099,  73.179688,   6.989139,     34.818470,
        -13.018224,  55.875645,   6.770915,    26.393581,   -19.124233,  34.637547,    -7.951444,
        13.733747,   -14.132401,  1.021191,    17.252066,   12.038480,   12.491561,    17.477825,
        3.951400,    23.479893,   13.639224,   39.161686,   43.538708,   15.086385,    82.248177,
        -99.096992,  14.702350,   7.919950,    18.774481,   -6.715583,   -27.080433,   86.019226,
        -5.469216,   87.670593,   29.452803,   7.821759,    4.606479,    50.059307,    3.670673,
        27.487041,   55.624779,   -39.755436,  77.642929,   -5.408359,   -16.857586,   84.671921,
        36.407093,   14.058492,   -29.930462,  110.184891,  -17.320518,  72.587204,    -11.444493,
        78.105591,   -5.188161,   74.268005,   112.265419,  -127.981621, -21.919003,   142.007401,
        5.136186,    20.508692,   20.367950,   9.405081,    -39.444664,  30.236717,    -238.501709,
        65.761169,   -32.341640,  2.779909,    -66.801048,  28.141510,   10.213952,    23.279909,
        1.806874,    11.619333,   11.089898,   10.679099,   -74.297241,  22.329544,    17.383810,
        -10.760242,  -54.655460,  12.590861,   -62.548080,  8.906506,    -30.441370,   9.467460,
        18.669306,   6.792993,    7.670428,    3.180964,    54.584232,   -34.388077,   -25.838730,
        -28.280872,  -43.673092,  -19.728260,  -33.805805,  -15.538817,  -5.925479,    -10.149197,
        -39.183643,  -10.755804,  5.226054,    -26.811930,  -23.902851,  -30.844299,   15.359290,
        -56.739304,  54.349121,   -45.269188,  24.507767,   -18.787565,  29.645838,    -21.065929,
        24.482460,   -16.764088,  35.137695,   -25.308519,  48.014648,   -45.956799,   -13.458438,
        -60.776588,  -2.721694,   -33.731514,  59.544712,   -18.929770,  23.890751,    -24.740553,
        -117.557259, 9.442760,    24.860987,   -13.577405,  84.479744,   -30.392620,   69.298698,
        -16.247440,  119.221786,  -49.698399,  -8.879785,   2.590098,    1.053483,     6.672275,
        63.920650,   5.295007,    -5.975646,   3.100397,    -22.835333,  0.224085,     46.527458,
        25.667404,   23.418215,   25.423185,   61.422012,   3.708390,    7.090922,     -21.632975,
        8.384074,    31.300510,   61.392120,   1.174322,    35.649612,   -5.606803,    16.216953,
        5.094152,    51.012524,   3.482739,    -92.217079,  35.082664,   -185.097916,  -17.100626,
        52.272587,   -41.181396,  20.561325,   -9.083641,   17.233475,   -0.239855,    18.478695,
        2.697318,    -52.076881,  -2.760370,   77.162323,   -48.052197,  -62.970181,   8.747670,
        -274.355316, -126.236427, 0.000000,    0.000000,    90.000000,   90.000000,    138.087830,
        136.956635,  74.477119,   63.443600,   58.007435,   12.266276,   59.150723,    -32.432995,
        74.457764,   -42.225151,  72.090385,   17.062946,   17.818262,   27.739044,    10.138420,
        2.235371,    27.918673,   0.701899,    20.147188,   -0.258094,   12.872425,    -2.838985,
        0.000000,    0.000000,    -10.097457,  -1.218350,   -21.509943,  -5.962460,    -41.936436,
        -44.238499,  129.737961,  -286.110931, 30.090364,   -4.628277,   36.621140,    -9.449014,
        20.795458,   -5.314631,   13.300596,   -5.140369,   -0.000000,   0.000000,     -9.876083,
        -14.637157,  -17.181536,  -17.561132,  -47.411602,  16.724962,   142.956085,   -3.979097,
        46.759670,   78.378296,   12.350936,   4.908931,    -53.970924,  -52.600494,   17.751883,
        20.070459,   35.223682,   5.734807,    -396.428925, 23.591146,   -23.426777,   -66.002464,
        -13.924965,  -41.016026,  15.833193,   -22.810402,  0.000000,    0.000000,     4.957360,
        16.149908,   10.743004,   31.533361,   5.277018,    50.293869,   -15.033574,   155.762070,
        -125.883484, -24.110767,  -107.443130, -53.872414,  -61.722015,  -37.288719,   -37.251137,
        -22.091835,  0.000000,    0.000000,    8.282420,    28.086725,   10.353848,    66.212265,
        1.965712,    110.935402,  -67.870262,  146.926025,  -34.958450,  -1071.965942, -458.781891,
        -91.159019,  -303.219727, -44.279385,  -139.577850, -87.335060,  0.000000,     0.000000,
        188.732712,  -19.804102,  377.589539,  -35.537682,  619.176208,  -118.499489,  993.514709,
        -364.275635, 1.726556,    0.706909,    0.000000,    0.000000,    0.971581,     3.261643,
        3.609512,    5.621699,    3.870939,    5.145381,    2.671160,    8.691163,     0.000000,
        0.000000,    8.060077,    -0.923724,   2.304230,    2.317711,    2.401120,     -2.757269,
        3.531818,    0.357367,    4.123492,    1.489486,    16.818495,   -2.682221,    5.108288,
        2.622036,    -1.090806,   13.554080,   2.391865,    -5.565413,   1.546497,     0.216983,
        -4.148084,   -0.450861,   14.574733,   -4.042446,   3.897141,    3.817172,     -0.767004,
        -3.610507,   6.092894,    -7.745250,   4.653294,    -16.043558,  20.000000,    10.000000,
        1.811930,    -1.878370,   -11.119326,  -48.393509,  10.416148,   -14.105465,   4.498749,
        7.009469,    -44.733810,  -38.483253,  -6.999370,   -12.775265,  5.175798,     15.167583,
        -45.989029,  -47.588257,  -18.060194,  -15.314107,  6.217326,    10.900183,    -57.383823,
        -16.522882,  -5.601789,   -2.486573,   3.962769,    30.828861,   -83.635689,   -47.013458,
        -66.023598,  24.339960,   0.000000,    0.000000,    13.641271,   -57.314140,   20.277874,
        -58.764538,  36.421070,   -53.261093,  67.883736,   -64.140045,  84.889282,    -71.865746,
        138.821838,  -78.437073,  174.312637,  -82.928970,  215.881119,  -65.688774,   0.000000,
        0.000000,    -32.237865,  41.260342,   -0.276761,   47.823017,   -8.141183,    56.759628,
        -8.688200,   44.417046,   -11.874497,  56.709038,   0.000000,    0.000000,     0.000000,
        0.000000,    -0.663509,   -0.546036,   25.022047,   -52.026112,  79.552544,    -101.764427,
        99.102219,   -132.876251, 162.396515,  -176.807281, 0.253011,    0.205594,     0.321576,
        0.763732,    0.845542,    1.000000,    1.000000,    1.000000,    1.000000,     -0.003362,
        0.128063,    0.102154,    0.045391,    -4.966144,   0.962984,    -1.263528,    -81.710518,
        -16.589169,  -55.049030,  -78.177727,  -15.799591,  -64.928093,  -56.061264,   -14.849807,
        11.419807,   -7.324631,   6.438055};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
