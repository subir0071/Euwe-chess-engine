#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,     0.000000,    0.222265,
        0.189283,    0.360049,    0.659432,    0.952154,    2.188127,     1.000000,    1.000000,
        1.000000,    -0.004885,   0.138948,    0.091348,    0.043060,     -101.513428, 199.401657,
        449.419556,  488.714508,  461.022949,  549.285278,  632.659668,   931.335876,  1366.602661,
        1554.175781, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -37.151390,  -1.943002,
        -44.756317,  -13.529892,  -38.705929,  -9.617390,   -39.377285,   -53.523300,  -10.669634,
        -4.167933,   21.301571,   -6.989496,   49.832199,   -9.435912,    -32.937317,  -27.314758,
        -11.265403,  -4.530627,   -21.019024,  -7.556089,   -30.217777,   -13.401841,  1.311702,
        -11.626354,  4.877126,    -5.646411,   16.066437,   0.127218,     26.695293,   -1.750365,
        4.584830,    -19.016424,  -2.112323,   7.762627,    -16.142832,   3.181121,    -3.869947,
        -6.984664,   15.589330,   -2.576077,   4.161597,    7.318859,     14.508546,   8.289490,
        0.572736,    14.631504,   4.087541,    -2.017168,   19.725910,    40.395012,   3.811724,
        31.365849,   5.240811,    20.219217,   29.653164,   -9.864108,    40.498528,   -6.233434,
        10.182443,   14.410213,   -31.663006,  20.661217,   9.634038,     4.061859,    15.817632,
        77.278992,   11.427751,   74.142807,   46.583214,   47.578705,    50.468605,   1.370570,
        78.060928,   -39.719120,  108.622452,  -22.017191,  83.773827,    9.918872,    60.267120,
        -19.123627,  222.293976,  211.096527,  200.038864,  265.026489,   240.367599,  223.397812,
        248.583969,  159.615036,  181.831802,  146.360474,  83.540901,    154.353180,  -48.792240,
        219.216934,  23.712368,   177.802444,  0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -199.499939, -51.904476,
        -56.472618,  -90.989151,  -85.582138,  -46.673401,  -48.669395,   2.108447,    -27.239473,
        -40.302238,  -23.591579,  -47.580067,  -52.760193,  -49.741947,   -139.259674, -78.477638,
        -65.346382,  -57.761314,  -120.064690, -9.220932,   -21.109844,   -15.152580,  -0.281597,
        -9.745371,   -5.758801,   -28.211754,  -8.249405,   -32.306923,   15.855655,   -36.005241,
        -45.904121,  -39.645550,  -47.788143,  -30.272602,  6.074749,     -13.549246,  -21.953327,
        -21.601574,  13.712208,   22.700457,   35.801628,   23.918089,    7.128128,    -19.671879,
        22.977842,   -45.303509,  -44.361641,  -63.890350,  -9.398961,    -27.313324,  -9.024754,
        10.894239,   30.675669,   27.869989,   14.489994,   37.257744,    26.083359,   29.036951,
        29.547974,   10.584074,   40.227119,   -13.507204,  -5.839993,    -12.072830,  -21.482080,
        10.491755,   6.896175,    12.981474,   27.026608,   31.781210,    93.552788,   28.401968,
        19.624537,   32.350853,   89.113144,   11.851442,   17.119070,    1.062392,    33.080711,
        -13.422577,  -64.674522,  -47.000916,  19.846090,   12.320650,    51.011726,   15.955347,
        82.850281,   29.945131,   109.742989,  5.725787,    160.922470,   16.070414,   31.018595,
        8.654596,    4.588699,    -24.034258,  -63.086761,  -8.190559,    -19.921606,  11.892576,
        13.188156,   -13.262001,  52.155235,   19.664225,   29.021082,    13.949171,   138.543076,
        -26.927610,  26.592043,   -21.116325,  -169.244598, -22.071793,   -265.968109, -104.585716,
        -101.599937, -47.418640,  -139.908432, -20.452660,  -33.549980,   -7.753841,   63.216228,
        -42.091469,  -29.784517,  -22.952593,  -38.607990,  -44.425953,   -55.891388,  -173.061569,
        -44.927284,  -43.754139,  -32.190010,  -25.462833,  -33.945415,   -2.572193,   -21.705069,
        16.891401,   -19.346666,  10.244341,   -34.715931,  -18.663424,   -36.698593,  -21.722376,
        15.742311,   22.776464,   -5.916925,   -36.704365,  -1.134616,    -22.086254,  -3.821986,
        -15.619887,  -9.276702,   9.786112,    3.835876,    7.640707,     20.076298,   12.923067,
        44.348202,   -26.890635,  -63.359329,  -23.143312,  -9.803191,    -15.611897,  18.987322,
        -22.332775,  16.370274,   11.714018,   21.239172,   0.494078,     13.259814,   12.295149,
        36.569977,   -4.228571,   17.450417,   -22.629589,  -1.248744,    -38.530434,  7.861633,
        -54.947155,  9.977777,    5.654112,    23.780664,   1.893850,     28.999121,   13.268251,
        32.995209,   -5.454445,   12.985311,   10.536573,   36.508289,    1.482195,    13.164886,
        -50.359409,  -1.613536,   -13.191103,  12.781783,   23.581858,    30.613865,   0.027952,
        58.354866,   -2.172917,   42.878727,   20.578493,   68.805130,    9.279810,    -12.638556,
        11.381933,   -8.668664,   -15.216557,  22.250050,   -3.903908,    34.453346,   13.632849,
        46.852093,   7.141687,    105.791832,  -26.217606,  75.185959,    6.320913,    102.792282,
        2.279917,    36.883892,   -5.959114,   49.198231,   -17.956837,   7.405537,    -23.678461,
        -1.209090,   15.381384,   31.886198,   1.044340,    -9.964143,    15.399851,   30.293106,
        1.857014,    -21.577295,  12.601389,   58.293106,   -2.096213,    -65.004417,  -66.088676,
        -58.310211,  -22.948513,  -50.976883,  -21.087166,  -40.189659,   5.192244,    -177.688110,
        13.389505,   -44.344166,  5.640390,    -58.152069,  -6.924250,    75.235115,   -32.276241,
        139.453659,  -50.852726,  18.091516,   -13.098333,  9.593061,     -16.206442,  -1.432178,
        -10.321657,  9.545271,    -19.320858,  5.499745,    -25.928257,   -17.259815,  -7.271545,
        -47.308891,  -10.731570,  -30.881113,  -30.659243,  4.837752,     -5.585971,   -8.180577,
        -18.525053,  -15.486253,  -8.311861,   -10.446720,  -9.697602,    9.728939,    -13.762413,
        9.288738,    -29.510254,  -24.004784,  -13.282613,  -90.359917,   1.061130,    -30.528528,
        -6.924525,   -40.233551,  -16.789812,  -28.579638,  -4.759597,    2.748997,    -14.217363,
        5.298151,    -25.744871,  -2.199117,   -22.825281,  5.006205,     -18.278860,  -25.532909,
        -36.059284,  -39.714684,  4.889113,    -1.552042,   -0.223666,    -15.354761,  8.153312,
        -1.872339,   -3.979711,   1.144251,    -5.806529,   -27.656340,   6.134452,    -17.473425,
        8.788453,    -36.817360,  8.632100,    -8.205143,   15.286460,    11.670029,   5.276298,
        4.294957,    6.969800,    33.353447,   -9.788106,   -33.664883,   12.089417,   16.274511,
        3.787129,    14.188498,   -3.597329,   -11.035664,  5.543473,     2.159716,    31.640709,
        -0.188814,   4.937654,    11.772667,   8.900172,    19.564947,    -2.911290,   44.779690,
        -7.863402,   22.993116,   -3.581120,   71.610428,   2.754947,     35.703419,   8.188905,
        16.815508,   32.371567,   -0.618379,   34.972397,   22.410521,    37.171391,   46.715023,
        22.441128,   16.434927,   35.912888,   62.979214,   15.500743,    31.501230,   22.115341,
        130.265610,  0.888415,    23.490828,   -7.334899,   27.866823,    7.791553,    1.480290,
        28.745590,   -2.025053,   31.605244,   7.486014,    27.419079,    -55.001438,  45.750793,
        17.000704,   28.000767,   18.032461,   26.143581,   -21.931349,   33.921612,   0.559267,
        -7.835956,   5.321154,    -91.053825,  -3.734403,   -46.774055,   0.903506,    -66.814758,
        -48.241364,  -109.223915, -151.361847, 19.803259,   -302.404175,  235.891937,  -7.369276,
        -28.141964,  -1.894567,   -41.071770,  10.604723,   -44.332081,   -4.857694,   0.719081,
        16.134378,   -88.026703,  6.238299,    -98.184692,  -37.231285,   -129.651855, -28.307474,
        -113.772789, -24.244230,  79.387665,   -2.441206,   15.654295,    -20.680769,  45.799702,
        1.681132,    -14.345727,  -8.307058,   3.308969,    9.512300,     -16.427612,  22.125292,
        -91.206116,  -24.049940,  29.547644,   -4.004858,   -15.431170,   -2.662748,   32.801533,
        -18.017080,  29.652037,   12.866304,   -3.605550,   4.895602,     32.553539,   -4.785551,
        37.733864,   -7.225332,   -45.895473,  1.150477,    -37.346222,   -26.395086,  71.933174,
        -33.502193,  105.388657,  -32.247135,  92.908142,   9.141977,     40.360218,   16.324457,
        4.556100,    15.789186,   28.414328,   10.471308,   -11.557108,   3.637827,    -22.751339,
        -35.794731,  39.992210,   8.569368,    31.488226,   -6.896688,    59.254044,   2.789721,
        28.281691,   5.726534,    38.534065,   85.010925,   -10.651538,   102.737167,  -107.195671,
        21.377405,   -24.920986,  -27.801565,  29.447943,   -34.264145,   104.446220,  -4.043386,
        75.852020,   16.628328,   20.559156,   10.654184,   44.171627,    -18.672865,  113.809456,
        139.818848,  -134.887650, 132.721283,  -122.526314, -51.645931,   159.450607,  -21.214033,
        96.008743,   -42.341473,  136.694809,  -9.661528,   54.820389,    -0.940427,   79.505058,
        30.933321,   36.283081,   97.224991,   -109.618980, -45.336216,   197.104065,  9.917649,
        -8.470562,   0.024991,    3.009066,    -4.624698,   18.931509,    -93.665390,  27.892693,
        -45.034534,  9.610271,    -69.766464,  28.023314,   19.118109,    24.735924,   21.848139,
        9.345490,    -22.352684,  9.358677,    37.058189,   5.820549,     -24.496027,  -15.686433,
        -96.910637,  8.708734,    -99.898590,  10.274413,   -68.812988,   9.092435,    10.096362,
        0.861315,    17.853992,   -5.167742,   0.178314,    -39.500088,   -4.180943,   -27.168987,
        -47.808537,  -20.203339,  -24.573599,  -12.054951,  -58.465393,   -2.902725,   -78.009453,
        -6.645612,   -9.929138,   -28.565622,  -36.712410,  -33.744297,   -17.577579,  -47.430656,
        35.625050,   -33.871380,  26.584509,   -30.311945,  -34.145557,   -15.083169,  -14.396805,
        -16.161236,  -36.610992,  -19.765631,  -13.340013,  -36.965252,   -70.219612,  -60.954964,
        12.719488,   -34.577450,  1.183755,    -3.127387,   -35.026665,   -4.830185,   -40.792309,
        -1.873819,   -52.718388,  -11.908764,  40.540123,   -29.174387,   43.937115,   -28.352486,
        -11.630352,  -46.028553,  17.572594,   2.508540,    -37.377289,   34.814739,   6.637782,
        28.005684,   -73.853859,  11.262000,   -21.223320,  1.411243,     50.872566,   8.369526,
        -39.254063,  21.057409,   -82.988739,  0.454087,    75.657875,    -2.709785,   -27.824200,
        41.871174,   26.486464,   31.908133,   -18.340420,  34.515301,    17.041132,   9.885230,
        13.340218,   -30.207098,  -190.523376, 44.663898,   -132.332291,  -23.373938,  11.133383,
        -86.753319,  27.822525,   11.777105,   22.559132,   14.474324,    21.931332,   3.356205,
        -33.192093,  3.902804,    60.025051,   -46.274666,  -151.235565,  32.028671,   -198.736435,
        -141.643890, 0.000000,    0.000000,    90.000000,   90.000000,    146.254959,  162.841980,
        81.957520,   79.530090,   63.383785,   21.639473,   57.196747,    -25.173494,  69.784447,
        -42.597351,  56.555317,   28.881062,   18.066359,   31.508314,    6.965660,    12.178019,
        25.476738,   0.823442,    18.118574,   2.369128,    11.057736,    -3.753908,   0.000000,
        0.000000,    -6.973332,   2.311835,    -11.864626,  -3.021491,    -32.225136,  -95.078087,
        45.123074,   -155.962097, 15.530992,   -3.144749,   33.760738,    -7.295277,   21.013023,
        -4.838383,   9.988028,    1.129853,    -0.000000,   0.000000,     -5.946923,   -2.321342,
        -5.488987,   2.542690,    -32.745819,  13.766088,   70.403809,    147.510681,  42.119579,
        90.273941,   2.675420,    15.257726,   -38.952744,  -68.046989,   18.804380,   24.528366,
        36.734383,   9.031642,    -450.187500, 37.195274,   -39.746849,   -66.937813,  -34.068607,
        -38.332359,  25.055262,   -22.329750,  0.000000,    0.000000,     10.309821,   14.767163,
        13.728648,   25.321379,   12.447104,   52.148441,   -14.258179,   148.699982,  -162.614471,
        -10.504217,  -127.855965, -52.956234,  -71.596939,  -38.251614,   -30.716938,  -26.180557,
        0.000000,    0.000000,    19.945366,   30.655262,   13.326789,    74.497078,   5.988498,
        117.897865,  -88.106659,  156.233261,  190.617111,  -1256.879883, -310.248810, -214.834381,
        -218.622070, -119.433350, -140.197601, -58.551281,  0.000000,     0.000000,    144.161102,
        42.284275,   344.759583,  12.481630,   566.243530,  -62.282383,   997.558655,  -371.575531,
        2.174617,    0.759026,    0.000000,    0.000000,    1.887345,     2.501718,    3.752071,
        5.883430,    3.826888,    5.339938,    2.843707,    7.027470,     0.000000,    0.000000,
        4.187621,    -0.033045,   0.310644,    2.754845,    1.829647,     -2.034808,   3.072174,
        -0.804366,   0.682800,    7.114582,    10.836102,   -0.260422,    1.216531,    4.372426,
        -1.445697,   14.049429,   -3.045842,   -4.864606,   0.508058,     1.053183,    -3.605307,
        -1.332979,   7.018303,    -3.468759,   0.314718,    10.832849,    -4.527456,   -3.002458,
        0.580346,    -7.897274,   -4.750498,   -15.157612,  20.000000,    10.000000,   1.574565,
        -1.999576,   -11.620011,  -50.478470,  11.237473,   -13.169826,   11.948154,   7.270225,
        -53.424709,  -37.070717,  -2.032046,   -15.646116,  5.758006,     12.769588,   -48.263531,
        -49.900654,  -19.722782,  -17.913010,  2.665197,    12.474198,    -61.032833,  -13.217095,
        -10.103386,  4.025171,    4.308836,    31.712234,   -88.344803,   -44.149662,  -62.937244,
        13.253175,   0.000000,    0.000000,    -31.028128,  -58.352951,   -19.803724,  -60.403244,
        -9.173477,   -55.491943,  17.822168,   -66.457184,  43.172234,    -78.766701,  75.135948,
        -85.871765,  101.593353,  -81.168602,  154.031357,  -108.363258,  0.000000,    0.000000,
        38.663933,   44.213623,   60.525955,   48.011276,   61.017136,    59.748508,   57.281227,
        47.382626,   55.281151,   58.874458,   0.000000,    0.000000,     0.000000,    0.000000,
        -26.754614,  -3.161869,   -70.648125,  -54.248413,  -82.691986,   -105.019958, -110.051933,
        -136.800674, -118.110626, -175.959732, -14.280338,  2.497022,     -1.705986,   -93.673248,
        -7.238879,   -65.624626,  -103.603271, -13.260828,  -66.273048,   -13.169585,  -25.048723,
        15.238423,   -7.642520,   8.340199};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
