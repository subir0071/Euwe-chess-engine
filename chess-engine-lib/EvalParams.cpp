#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.267195,   1.000000,    1.234729,    2.824054,   7.389152,    0.000000,    -4.689212,
        97.770714,   341.231110,  306.897888,  343.057892, 322.070526,  422.514862,  587.557922,
        908.845581,  1007.508118, 0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -26.907652,
        16.481255,   -18.865789,  0.125190,    -21.706741, 2.359494,    -21.283342,  -51.741158,
        -7.552013,   29.620518,   9.651417,    -4.573851,  32.562748,   -8.696646,   -4.631864,
        -12.981528,  -12.042763,  11.123533,   -11.179703, 4.902664,    -8.127686,   -3.405662,
        -8.478203,   3.949897,    -12.420317,  1.588361,   2.854920,    2.334439,    35.850109,
        -14.938302,  12.460071,   -11.175531,  -8.689957,  12.540115,   -12.085911,  11.106337,
        0.835012,    -1.438117,   10.957548,   -20.510950, -6.850632,   -4.454644,   12.459970,
        -3.835509,   -2.439548,   -0.233239,   -15.644419, -4.179150,   -8.874969,   39.420155,
        -1.234133,   16.857159,   -7.972597,   2.225360,   1.931560,    -0.315507,   16.012432,
        -0.463837,   6.978052,    -3.829137,   -3.247086,  4.439389,    -6.728367,   -1.673193,
        -4.135382,   46.253414,   33.663517,   19.766098,  -17.396233,  24.132471,   19.781616,
        -10.645100,  36.155071,   -28.281851,  23.322359,  -3.682507,   97.291183,   7.018299,
        47.487686,   -20.838797,  126.879684,  66.917999,  65.463356,   91.154015,   87.644051,
        54.761677,   112.431190,  70.440445,   63.569683,  62.559479,   37.682568,   72.209915,
        40.820389,   118.013069,  49.206467,   60.463123,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -175.644699,
        -48.315475,  -30.383453,  -49.507416,  -49.964027, -24.109772,  -22.125923,  -29.361700,
        -33.310421,  -25.500957,  -15.601506,  -33.276554, -52.900787,  -66.855827,  -157.948074,
        -37.357494,  -59.135063,  -64.315987,  -82.624794, -10.365485,  -15.639478,  -27.189894,
        -7.483829,   6.327713,    -4.748084,   -12.737030, 21.300026,   -12.767200,  -28.350006,
        -38.046196,  -47.564896,  -54.300171,  -28.031475, -31.501293,  -9.986133,   -2.651975,
        -0.959611,   -5.681758,   -0.646287,   3.418257,   43.841854,   4.844927,    0.947990,
        -17.546680,  12.895164,   -17.558226,  -39.923065, -2.389749,   -27.664707,  -8.299411,
        -34.724449,  -5.973936,   26.151047,   14.171934,  -0.041129,   27.968794,   18.684029,
        26.093889,   35.285938,   3.317424,    14.840205,  7.097598,    -10.171636,  -11.549067,
        -13.272937,  -8.396358,   9.026914,    9.655626,   41.007092,   16.553360,   64.444580,
        16.215427,   24.948660,   20.336241,   64.100739,  14.661669,   3.391499,    11.888384,
        28.350567,   -20.433392,  -36.932468,  -19.620541, 7.247691,    15.797123,   14.024215,
        34.407829,   87.406189,   16.376339,   118.176201, -19.377211,  105.742783,  -3.607505,
        32.379822,   1.158402,    -5.990502,   -1.087804,  -44.100842,  -5.518912,   -33.146198,
        1.452589,    12.414112,   5.801102,    70.326836,  7.501340,    36.878807,   0.043001,
        43.436493,   -4.392870,   -77.798149,  -4.206778,  38.312019,   -23.143780,  -131.186234,
        -59.021706,  -45.869110,  -40.994396,  -8.441876,  -7.898578,   -21.431660,  -26.611778,
        -38.035698,  1.101702,    -40.963669,  -20.300482, -18.089561,  11.037565,   -233.950150,
        -41.793152,  -21.032120,  -35.373055,  -8.889587,  -37.438778,  -4.081440,   -23.574429,
        -34.330990,  -2.535862,   5.725317,    -23.347914, -27.223156,  -34.988522,  -63.669689,
        -9.159987,   7.108201,    -10.066106,  -8.071239,  -30.352562,  5.348173,    -19.732691,
        10.117677,   -16.147469,  0.070288,    3.031640,   0.509878,    -15.284742,  13.586135,
        -8.067081,   17.852118,   -37.271748,  -34.326721, -52.860138,  2.613953,    -12.483157,
        12.425469,   -2.900395,   16.436714,   2.892197,   -1.105438,   5.142385,    4.844710,
        7.108181,    20.805914,   -15.394259,  3.202149,   -1.514252,   -17.501003,  -28.275145,
        15.166666,   -13.389070,  15.062243,   -0.565221,  -3.754503,   22.416164,   35.191570,
        13.362919,   11.307216,   6.013568,    -4.562714,  7.688175,    9.726379,    4.593496,
        7.959118,    -7.215267,   -23.499092,  5.300782,   -7.462852,   14.003859,   5.437408,
        7.414240,    23.013336,   19.265636,   48.382435,  4.505224,    26.127880,   -3.147607,
        -19.980118,  14.748421,   -26.221352,  18.964561,  -32.896938,  1.463624,    -4.189030,
        13.323551,   -0.850065,   19.903532,   8.570236,   -1.210168,   41.850334,   17.448149,
        92.246162,   15.224562,   80.510605,   -3.315887,  24.724407,   11.341923,   6.905336,
        -8.928717,   -29.223274,  21.835651,   -6.361023,  15.838568,   -42.460266,  24.668253,
        4.157364,    1.283975,    -45.137356,  21.342571,  -30.069439,  -2.550362,   -66.230812,
        -19.088152,  -206.735275, 60.933384,   79.347305,  -2.997989,   -34.917828,  -9.394892,
        -22.569828,  -1.650383,   -53.787968,  28.623407,  -118.384010, -8.880263,   73.600212,
        12.493826,   -62.060413,  -19.684719,  30.088242,  -29.341871,  11.541229,   -28.174688,
        0.729838,    -16.988802,  0.818173,    -17.770813, -11.083694,  -21.836382,  -15.744392,
        -14.035464,  -35.125679,  -16.175484,  -15.183071, -41.209778,  -31.364536,  -6.127806,
        -23.763107,  -9.750157,   -15.449020,  -16.608377, -13.905281,  -14.191325,  -20.132858,
        -11.931536,  -35.257259,  -12.640005,  -41.823769, 0.027458,    -58.763790,  -9.016143,
        -9.872047,   -12.008628,  -24.298756,  -2.945386,  -39.210865,  7.689507,    -33.176254,
        -0.223133,   -42.098728,  -1.463516,   -26.110363, -18.744312,  -9.800632,   -31.000542,
        -33.994759,  0.848091,    -5.287653,   4.470023,   -26.018909,  10.481657,   -29.789288,
        16.011049,   -33.186787,  17.899145,   -57.983753, 18.061878,   -40.898911,  9.065456,
        -35.592541,  0.561419,    -47.643093,  6.397336,   -35.401497,  25.071419,   -30.321159,
        22.286259,   -51.826824,  19.753304,   -21.350571, 16.557247,   -100.248604, 32.113510,
        -14.171200,  5.691095,    -35.932926,  12.657735,  -71.517090,  21.293516,   -37.102196,
        35.303520,   -30.957680,  23.607796,   -43.216648, 26.742558,   -2.871080,   20.106020,
        -23.931072,  29.342743,   26.261816,   0.633166,   99.565994,   -6.996654,   -21.856640,
        18.901077,   -19.592545,  19.193644,   -13.361176, 29.189890,   -5.516718,   29.567108,
        -20.835938,  32.728863,   -3.358249,   26.519100,  45.052483,   17.823887,   -10.838326,
        25.092564,   18.574787,   12.334882,   26.484118,  -5.914686,   11.840202,   25.868328,
        -9.341942,   26.037731,   2.173977,    30.936522,  -0.594108,   36.266388,   60.465828,
        25.264748,   71.247902,   16.617208,   -70.820244, 32.838970,   13.784990,   -13.518221,
        14.155212,   -16.963253,  1.360910,    -4.198307,  19.604382,   -22.784286,  22.408422,
        -70.899857,  10.291187,   -59.612335,  1.385469,   -118.131821, -74.933617,  5.365885,
        -19.639854,  3.950083,    -6.397892,   22.489000,  -0.059884,   -20.574831,  -3.626786,
        -1.040155,   7.464609,    -14.376423,  19.267782,  -53.489872,  18.593061,   -116.796532,
        13.720186,   -131.236954, -3.865780,   -55.344925, -19.323620,  -3.968120,   -34.208176,
        6.583897,    -18.905743,  -30.643089,  -8.621147,  -29.662516,  -15.125725,  -5.114389,
        1.823152,    -22.915539,  -16.933220,  -14.724586, -21.680843,  5.269928,    -28.594795,
        24.912924,   -45.411110,  31.140951,   -13.400295, -25.964560,  -38.273689,  -0.178364,
        -16.737228,  -9.846573,   -37.905502,  19.467859,  -32.521770,  44.574009,   -10.965164,
        1.546227,    -35.213448,  13.469324,   -34.813499, 53.944969,   -48.236290,  30.531069,
        -18.145538,  -8.389604,   -36.733337,  28.889730,  -63.856216,  91.593742,   -28.836243,
        29.115549,   -10.926460,  8.142860,    5.277385,   -28.220394,  -55.820290,  48.491135,
        -68.432373,  41.720078,   -54.578194,  56.469490,  47.055225,   -14.675101,  6.071802,
        -6.946518,   -48.220627,  79.767998,   26.046326,  -27.311460,  -58.201302,  93.148903,
        -38.231232,  40.896641,   -60.939789,  48.464989,  -64.999451,  59.097664,   -59.790169,
        58.052307,   -34.445831,  54.636551,   -24.147678, 76.249748,   54.094181,   9.294935,
        25.798174,   22.805502,   -63.264404,  81.972183,  -63.091019,  82.247093,   38.385471,
        -18.056974,  150.465225,  -84.134560,  -0.756403,  41.631992,   124.584778,  -76.956497,
        -29.334904,  -45.050720,  8.462734,    -35.892376, -10.356840,  -6.783031,   -61.285851,
        2.136986,    1.216004,    -30.282917,  -60.109303, -5.859803,   4.543114,    -26.194939,
        -30.491652,  -38.857723,  -39.994411,  -27.277983, -5.433089,   -18.632490,  20.987055,
        -18.336113,  -16.737551,  7.887820,    -2.015113,  5.158614,    19.432892,   -0.888281,
        22.162865,   -6.606413,   4.993749,    -28.144934, -22.472174,  -39.607899,  -27.346392,
        -10.805108,  44.349133,   -11.041080,  23.376863,  12.001343,   -17.082714,  25.346682,
        -9.668085,   14.846268,   -17.630209,  0.842762,   -53.637772,  -8.230561,   -74.806206,
        -3.118410,   -13.721705,  3.352380,    -31.533100, 31.052732,   -33.324844,  37.963329,
        -13.264560,  25.214766,   -28.764633,  27.069355,  -39.924641,  19.445681,   -24.445978,
        -3.941372,   -71.724770,  20.908689,   -98.242065, 38.358639,   -15.046537,  29.015537,
        -116.063271, 46.543411,   -56.938545,  39.593864,  -85.142807,  41.764248,   -13.037409,
        33.656559,   -13.076760,  12.238678,   -28.071341, -1.987061,   -9.920035,   20.564142,
        23.159861,   40.811153,   -77.289825,  44.290073,  -127.743752, 57.557701,   -29.431931,
        49.781422,   -107.389870, 51.904678,   -95.521057, 19.418900,   26.364250,   -8.566883,
        -62.663578,  24.880522,   38.589848,   -1.025200,  -24.560726,  28.632317,   24.468636,
        29.914749,   -27.875641,  41.308201,   -28.184072, 27.830189,   -353.062714, 48.967541,
        171.339874,  -61.685791,  73.741005,   -11.573430, 110.971573,  -48.546772,  49.598446,
        -31.846100,  217.209518,  -40.311180,  116.711021, -21.598743,  -11.442414,  31.597275,
        -476.460114, -20.130264,  0.000000,    0.000000,   90.000000,   90.000000,   79.929970,
        96.238998,   17.152445,   62.193840,   -4.506756,  37.394703,   -9.349688,   12.644544,
        -6.270215,   15.414383,   18.732935,   13.120355,  10.172974,   11.253798,   21.333002,
        41.277245,   10.862435,   27.757078,   9.070146,   22.702488,   0.670314,    12.981921,
        0.000000,    0.000000,    -0.845776,   -8.489897,  -14.746459,  -11.832347,  -26.001287,
        18.072895,   -11.482124,  -106.555641, 24.138329,  76.636086,   1.517589,    -0.092221,
        -21.083321,  -16.870853,  20.549028,   7.720304,   32.990623,   -0.868384,   -354.484863,
        -23.430401,  5.691944,    -43.922115,  -10.277869, -20.431620,  5.841838,    -5.174891,
        0.000000,    0.000000,    5.352735,    19.701065,  12.402410,   33.747772,   15.700824,
        62.214905,   16.472904,   106.983086,  94.361198,  -170.501953, -11.946758,  -84.996292,
        -44.490150,  -31.894360,  -26.442276,  -13.074704, 0.000000,    0.000000,    9.290676,
        18.969616,   25.712805,   40.864807,   41.037758,  61.751934,   64.438484,   75.927505,
        55.409122,   33.911579,   3.665360,    1.166473,   0.000000,    0.000000,    -0.505678,
        1.659796,    3.197980,    3.073674,    3.060988,   3.531425,    1.668507,    6.148844,
        0.000000,    0.000000,    0.000000,    0.000000,   4.907439,    -2.133080,   2.049541,
        -2.982845,   11.022740,   -5.674221,   17.805973,  5.075905,    0.000000,    0.000000,
        20.000000,   10.000000,   3.412038,    -1.431802,  -5.248312,   -45.301949,  12.106534,
        -18.172428,  6.969685,    5.845868,    -50.177235, -28.962175,  -3.325362,   -15.104793,
        7.451689,    5.307662,    -28.138638,  -42.847744, -13.378595,  -12.231277,  4.509186,
        10.667867,   -59.348114,  -10.341701,  -10.009924, -6.033043,   1.305971,    19.294918,
        -72.239502,  -8.650026,   -53.155945,  11.048103};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
