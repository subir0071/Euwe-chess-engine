#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,    8.460752,    0.000000,    22.523048,
        100.608109,  378.194336,  288.694489,  374.949585,  304.745850,  471.894318,  579.521484,
        989.262939,  964.253479,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -30.835630,
        21.458282,   -20.063517,  3.268604,    -23.728313,  5.293366,    -19.398415,  -69.766106,
        -11.147680,  38.042023,   8.377391,    -4.482107,   36.935947,   -12.030431,  -2.096955,
        -14.784017,  -14.030222,  13.193103,   -12.302223,  5.212002,    -8.343376,   -4.881967,
        -9.977168,   5.996092,    -12.144081,  1.809993,    2.171054,    2.309131,    40.820312,
        -19.872290,  13.317123,   -12.242718,  -11.288777,  16.345371,   -13.663058,  13.766134,
        0.931161,    -1.356698,   11.194372,   -24.384731,  -7.248768,   -4.848611,   13.967989,
        -5.882751,   -1.647598,   0.363290,    -17.020922,  -2.031441,   -12.660647,  45.935234,
        -2.592471,   17.124912,   -13.932049,  5.980231,    1.906976,    2.559937,    16.812010,
        -2.014237,   4.463652,    -2.731766,   1.247512,    5.450754,    -4.761272,   -1.798514,
        -9.208781,   48.535828,   48.021793,   12.633275,   -34.417278,  25.668280,   13.567518,
        -13.982854,  30.701357,   -30.827719,  29.138109,   -8.042655,   110.363121,  -0.440156,
        67.041893,   -32.518429,  141.990753,  64.699722,   83.022255,   89.077385,   75.506355,
        59.293270,   125.141708,  67.012207,   -0.940424,   92.949127,   13.903481,   75.352203,
        -7.768056,   134.921600,  70.218559,   56.575939,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -188.247787,
        -43.063564,  -29.315638,  -50.542671,  -56.032532,  -18.241634,  -20.451473,  -25.211287,
        -40.407932,  -20.645008,  -13.792768,  -27.206053,  -56.771339,  -57.138496,  -175.688858,
        -32.317562,  -58.168900,  -66.498039,  -89.205002,  3.025912,    -10.682102,  -29.355051,
        -6.412536,   8.144461,    -7.655161,   -10.271894,  18.149021,   -12.155710,  -21.350592,
        -53.468296,  -58.729286,  -43.621429,  -27.961836,  -36.807014,  -13.267357,  3.123126,
        -0.820942,   -3.596613,   -5.250250,   6.566198,    45.128407,   4.502136,    0.480939,
        -16.635294,  14.019777,   -28.195065,  -54.368095,  7.527601,    -27.258318,  -5.766104,
        -31.207064,  -8.178123,   25.766941,   11.601696,   -1.690196,   31.884293,   16.697674,
        28.899254,   35.845192,   0.903942,    11.874153,   11.858366,   -11.976170,  -5.757566,
        -13.897436,  -19.670683,  12.412389,   7.855649,    42.246273,   13.539164,   68.884399,
        10.143198,   24.232954,   20.824627,   68.285362,   11.139946,   -2.049701,   19.383436,
        29.544743,   -19.189919,  -50.831188,  -15.097808,  7.577085,    17.042110,   25.029345,
        30.652225,   95.894150,   10.345976,   130.426361,  -29.335768,  112.397331,  -9.962343,
        37.523800,   4.267421,    -10.978138,  3.421708,    -74.245667,  8.617594,    -28.690371,
        0.356183,    8.235645,    3.784987,    62.408058,   10.603537,   34.811142,   -2.025002,
        36.111004,   -1.484415,   -80.500481,  2.336834,    36.689701,   -29.828178,  -129.345535,
        -58.949501,  -107.275925, -23.790716,  -49.581047,  0.439810,    -59.302773,  -21.444571,
        -40.927624,  3.183921,    -100.518288, 0.782341,    69.592804,   0.159696,    -376.786072,
        15.763992,   -23.122868,  -22.640224,  -5.732163,   -38.260021,  -0.991963,   -28.748293,
        -31.803307,  2.918437,    12.268071,   -30.353563,  -26.474369,  -36.986595,  -81.763832,
        3.679799,    3.063507,    -11.843694,  -9.872137,   -32.311588,  6.750386,    -18.360315,
        9.547492,    -21.300131,  1.421792,    2.206840,    0.073146,    -18.233788,  23.536022,
        -15.169485,  20.933819,   -43.685596,  -30.826962,  -57.922802,  3.607058,    -12.366792,
        9.661070,    -3.746611,   14.176180,   3.512292,    -2.635329,   5.482927,    3.540637,
        8.991010,    24.046455,   -20.026373,  0.273165,    5.462548,    -17.092455,  -27.440300,
        15.896581,   -14.690442,  14.223518,   -0.741032,   -9.872282,   31.480669,   36.897919,
        11.210813,   7.837223,    6.643905,    -3.237162,   10.520070,   3.164421,    2.736182,
        7.753900,    -5.465366,   -25.075375,  5.480286,    -11.914736,  16.302359,   5.717901,
        4.080140,    18.549623,   21.794512,   45.158924,   4.044840,    18.794182,   -3.123628,
        -23.616634,  24.125292,   -47.320072,  32.756844,   -44.527626,  12.459147,   1.928543,
        12.737277,   -1.324705,   21.523710,   12.993129,   -4.828937,   41.766701,   11.368499,
        95.895065,   15.386342,   94.074211,   -16.538670,  24.896225,   11.861190,   -3.778770,
        -6.758224,   -36.547226,  29.980635,   -7.188166,   15.753983,   -51.968128,  31.968130,
        9.468027,    2.763628,    -50.638519,  25.716928,   -46.444252,  4.582507,    -81.023094,
        -7.705891,   -203.974533, 80.878754,   75.411736,   -5.847167,   -16.356058,  -11.290054,
        -27.354092,  4.824691,    -34.067242,  30.561239,   -135.059448, 3.513563,    67.393089,
        10.679175,   -72.186508,  -9.623644,   26.853674,   -31.865313,  9.290838,    -31.264229,
        -1.926520,   -13.590508,  -0.005269,   -18.696863,  -9.181926,   -22.562769,  -13.630328,
        -14.198557,  -30.938637,  -14.032062,  -12.555297,  -45.541050,  -41.268337,  5.905889,
        -32.056393,  -2.210711,   -14.055614,  -14.163054,  -12.631038,  -15.365440,  -15.548392,
        -12.300370,  -37.488281,  -8.962627,   -38.404793,  7.831909,    -65.804085,  -0.904828,
        -5.098197,   -11.713698,  -34.114025,  7.071289,    -44.499359,  16.308750,   -29.949905,
        -0.245259,   -44.187202,  5.090486,    -27.079800,  -16.930164,  -5.641618,   -30.098991,
        -38.518894,  8.761806,    -12.006988,  9.699763,    -34.762863,  19.132816,   -29.410156,
        19.532845,   -30.879063,  21.731342,   -53.861450,  25.574734,   -41.678162,  17.056450,
        -24.280659,  2.858505,    -47.193649,  12.144206,   -32.574753,  26.394058,   -31.794628,
        26.557484,   -52.070610,  26.986038,   -13.919158,  16.854565,   -101.361992, 43.943722,
        -5.144618,   4.206525,    -30.768471,  16.177685,   -72.629555,  29.974117,   -28.738388,
        35.706165,   -24.349358,  25.399063,   -31.757915,  28.132198,   5.006780,    19.521122,
        -11.239108,  26.228798,   40.050713,   -2.138573,   114.436089,  -13.108371,  -16.939831,
        19.776333,   -15.155673,  18.237206,   -8.514575,   29.430664,   2.776614,    29.615921,
        -7.357760,   31.349621,   19.453308,   20.413094,   64.521759,   10.792380,   20.984123,
        19.135479,   29.325840,   10.317328,   32.014317,   -12.241175,  13.596408,   27.759804,
        11.113029,   23.934486,   14.718703,   30.380650,   26.380062,   34.989792,   62.271084,
        25.808704,   110.562195,  7.873861,    -43.564545,  28.235695,   14.158162,   0.454427,
        15.682062,   3.590506,    8.956626,    3.518267,    22.812857,   -17.863609,  27.957230,
        -77.480659,  19.595955,   -68.942146,  9.148429,    -109.920067, -92.534637,  30.303780,
        -26.986801,  16.703497,   -0.971545,   7.168402,    -0.174107,   -13.898458,  -0.449815,
        -11.032436,  7.771604,    -11.081837,  24.057045,   -59.802025,  25.708473,   -119.082230,
        31.408398,   -143.630035, 2.470327,    -59.972816,  -21.234676,  5.190800,    -37.618763,
        10.534109,   -21.269890,  -26.287340,  -13.076119,  -21.175095,  -18.385189,  8.225489,
        -3.264689,   -12.840919,  -17.035400,  -13.229153,  -23.023167,  -1.512758,   -28.018246,
        12.584415,   -51.614353,  32.621635,   -24.371952,  -20.165503,  -41.599529,  -3.446628,
        -22.496677,  -2.892429,   -44.234135,  19.239094,   -42.845592,  57.973545,   -15.087316,
        11.537025,   -37.096073,  8.251226,    -32.896400,  29.669235,   -59.502361,  23.885464,
        -30.146561,  -7.771031,   -39.018223,  16.925140,   -66.140884,  75.525208,   -33.048367,
        32.790409,   -8.164102,   -0.592814,   8.221061,    -29.433374,  -67.124779,  35.465508,
        -66.260811,  22.700283,   -67.687752,  59.763950,   43.747776,   -21.735130,  19.386322,
        -29.429922,  -52.104961,  80.582733,   48.737724,   -41.297276,  -66.634018,  90.446754,
        -52.671108,  48.940464,   -65.655029,  41.312038,   -70.169228,  49.165112,   -59.351246,
        33.157780,   -56.694378,  55.409145,   -20.306744,  71.923233,   60.891956,   12.990757,
        29.342928,   22.129856,   -68.726814,  72.252266,   -102.606895, 101.835999,  56.075634,
        -25.769503,  193.215851,  -103.038727, -15.066449,  59.228939,   150.748917,  -74.940231,
        -33.527180,  -41.742893,  4.214679,    -32.776257,  -14.350677,  -2.604161,   -59.340214,
        3.101854,    -1.801461,   -30.032503,  -66.267212,  -0.136765,   4.899856,    -27.274843,
        -32.685490,  -36.957458,  -42.609203,  -27.983835,  1.647021,    -21.207968,  21.737047,
        -19.051388,  -11.414890,  8.606244,    2.085844,    5.307250,    19.524607,   -0.655514,
        20.003756,   -5.280488,   4.864313,    -28.422464,  -18.285923,  -40.150040,  -20.668718,
        -10.819066,  63.342781,   -16.465584,  38.954212,   9.828187,    -13.044536,  27.724413,
        -7.178994,   17.055794,   -18.596338,  3.112393,    -56.692135,  -6.196433,   -61.452576,
        -5.506434,   -0.176949,   1.986211,    9.688707,    26.300226,   -3.787377,   36.574535,
        12.120143,   23.894886,   -12.075578,  26.796925,   -46.297337,  23.040028,   -22.178137,
        -3.222300,   -63.259457,  21.888996,   -107.896744, 43.305695,   14.528632,   26.148605,
        -77.076736,  45.705826,   -28.280251,  38.354111,   -70.240654,  43.190231,   -0.838889,
        33.544601,   -15.547229,  14.243992,   -87.545921,  13.719250,   -28.116758,  24.627254,
        46.218132,   38.379108,   -68.461723,  44.954201,   -118.701370, 58.431721,   -14.324981,
        50.118027,   -136.664993, 59.393429,   -109.710709, 25.433598,   43.700989,   -9.889644,
        -53.884972,  27.809099,   82.713333,   -8.253174,   -18.415102,  31.488823,   61.927803,
        25.452469,   0.399191,    39.767075,   -46.865257,  33.844086,   -350.480377, 51.108238,
        222.476990,  -68.644936,  103.220619,  -16.106691,  164.621490,  -58.497604,  98.592674,
        -41.730679,  327.840668,  -60.806759,  154.046768,  -26.134918,  20.482681,   31.189234,
        -565.520142, -1.885359,   0.000000,    0.000000,    90.000000,   90.000000,   88.557022,
        100.238625,  13.789277,   66.845566,   -6.866273,   41.129517,   -12.630642,  15.421190,
        -7.386006,   17.747362,   21.998760,   9.344319,    10.810757,   10.909280,   15.642251,
        55.383442,   11.938592,   24.158434,   8.177099,    23.721292,   -0.531778,   14.159982,
        0.000000,    0.000000,    0.233758,    -10.855101,  -16.320284,  -11.235556,  -30.444342,
        19.298223,   -0.659846,   -153.763321, 18.748268,   80.931717,   1.817482,    -1.449499,
        -34.644367,  -3.220743,   22.487322,   5.168746,    35.406353,   -5.507209,   -441.571960,
        0.462450,    25.049286,   -39.416183,  -15.603686,  -13.208660,  11.590108,   -5.096317,
        0.000000,    0.000000,    0.941208,    22.808769,   4.809033,    39.656635,   4.064093,
        75.497101,   1.795903,    146.005157,  167.210022,  -166.071350, 27.024118,   -84.972267,
        -37.145138,  -25.670778,  -25.148027,  -9.108732,   0.000000,    0.000000,    4.547989,
        22.483162,   23.013702,   43.537872,   28.793734,   74.653038,   55.259075,   94.691528,
        30.580162,   32.068481,   3.343921,    1.284309,    0.000000,    0.000000,    -0.195394,
        1.666401,    3.487919,    3.419569,    3.085579,    3.519074,    1.348034,    7.097481,
        0.000000,    0.000000,    0.000000,    0.000000,    5.401695,    -2.972880,   2.903707,
        -3.527221,   10.337591,   -6.931983,   20.437054,   7.686431,    0.000000,    0.000000,
        20.000000,   10.000000,   4.010863,    -2.394350,   -5.890976,   -49.005150,  14.318579,
        -22.947563,  7.203848,    5.838207,    -55.192696,  -25.146999,  -3.645348,   -16.950716,
        8.218638,    5.236306,    -25.005661,  -44.608673,  -12.034383,  -11.168623,  5.310294,
        10.954835,   -55.525173,  -9.516430,   -8.982660,   -5.900226,   1.579152,    16.345121,
        -69.017319,  -11.463367,  -47.913574,  0.476597};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
