#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,     -202.812729,
        208.861343,  416.707947,  439.996704,  411.127106,  507.973114,  535.719788,   841.292114,
        1277.333984, 1405.104736, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -8.521703,
        -5.563290,   -10.166318,  -15.825460,  -24.669729,  -6.464736,   -36.841492,   -30.599113,
        -22.157530,  6.949664,    -2.847257,   -5.272328,   30.928677,   -8.302442,    -40.076569,
        -25.838528,  16.453964,   -1.912567,   11.015635,   -0.412433,   -15.593513,   -1.057520,
        -2.011548,   -5.209441,   -9.708430,   -0.661941,   -7.127082,   -7.305762,    19.547785,
        -6.485788,   -11.843163,  -26.668592,  28.925257,   7.936570,    12.678608,    14.647836,
        7.713627,    -0.847707,   17.360477,   -4.230028,   -11.799457,  12.527041,    4.989069,
        3.948143,    -12.533416,  10.855960,   -29.391905,  -4.360179,   47.296505,    24.988483,
        34.966549,   26.836346,   19.311388,   7.442361,    16.043554,   -4.137508,    25.168531,
        9.301372,    -3.346267,   22.093380,   -30.825148,  16.879808,   -27.169134,   10.008443,
        31.827244,   62.408043,   46.132008,   49.477753,   26.304167,   38.343857,    42.578609,
        -3.415866,   39.639736,   -19.813009,  63.454300,   28.503319,   28.239807,    37.881302,
        -7.137033,   26.047054,   218.187485,  162.249695,  203.339142,  189.275192,   192.187653,
        153.027267,  208.625137,  130.102005,  152.423187,  112.874077,  178.330215,   163.086655,
        -106.018311, 218.955170,  -49.843006,  176.463654,  0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -371.766724,
        -46.344410,  -48.128906,  -46.477818,  -146.615448, -25.968855,  -33.877125,   -4.826095,
        -40.824585,  -37.898899,  -17.785456,  -53.593746,  -74.978752,  -74.766327,   -138.431183,
        -52.072792,  -70.024307,  -29.691961,  -74.651527,  -4.052627,   -40.290817,   -35.213398,
        -1.856239,   -11.522220,  -11.204606,  -32.241932,  -18.348721,  -16.026110,   -26.607788,
        -23.364218,  -29.694929,  -31.421934,  -41.151073,  -21.384161,  -17.218525,   -17.529654,
        -14.534103,  -20.202906,  15.485742,   12.762467,   45.398243,   14.511724,    9.600322,
        -15.042817,  20.617525,   -44.235538,  -30.657045,  -38.116531,  -12.201647,   -15.293090,
        10.680156,   15.023709,   28.426218,   29.020987,   10.808467,   27.459391,    22.376387,
        37.125660,   35.510365,   -2.913697,   42.915272,   -13.487145,  1.806489,     -5.380609,
        -25.609802,  -0.353041,   15.472623,   9.236146,    19.546705,   19.886343,    61.471760,
        37.141235,   7.949973,    24.543051,   58.990864,   12.681687,   -7.771162,    0.904173,
        -12.027287,  3.249128,    22.384733,   -33.437790,  3.362394,    19.196531,    65.723495,
        15.923097,   86.893349,   26.274481,   95.116539,   -18.439400,  130.366470,   11.158137,
        32.736881,   9.576875,    -58.739590,  -4.228992,   -51.394104,  -7.070772,    11.156001,
        -14.183196,  68.715904,   -14.861024,  44.494228,   28.679548,   17.399595,    14.294387,
        51.424274,   -18.613504,  -21.207628,  -16.393337,  -98.401756,  -21.743967,   -207.338562,
        -32.483620,  -154.236465, -38.725971,  -102.853508, -14.331189,  -16.324564,   -32.076653,
        27.053755,   -3.238860,   35.350323,   -0.134846,   -81.256203,  -4.239353,    -119.422211,
        -211.725677, -93.066338,  -45.742928,  -57.569344,  -32.687180,  -32.374554,   -5.462568,
        -43.176582,  29.392382,   -17.875017,  8.097274,    -32.028584,  -2.394876,    -6.902386,
        6.543970,    -120.722328, 35.780907,   0.675680,    -21.617701,  -7.651284,    -19.314676,
        0.786269,    -15.511162,  -15.009592,  9.207314,    3.744411,    13.861708,    -14.245856,
        6.216026,    30.879990,   -17.472027,  -57.128246,  11.741823,   -20.318497,   -13.883603,
        25.734238,   -12.629242,  19.373169,   -2.905673,   10.477082,   7.762026,     12.353463,
        11.517942,   33.768734,   -6.505591,   16.282503,   -34.088760,  -13.896461,   -46.881439,
        26.378782,   -65.624977,  5.944035,    4.150060,    27.512949,   10.008410,    32.925900,
        8.200352,    26.045893,   -11.552633,  15.090605,   2.966777,    50.585602,    7.745324,
        15.879924,   -35.481564,  -12.265676,  -11.192988,  17.204725,   17.405550,    25.793743,
        -5.373092,   67.143982,   2.298981,    45.853111,   12.348465,   56.474209,    13.312609,
        -2.378360,   4.001622,    -9.922855,   -4.914951,   15.686024,   2.125114,     31.578398,
        6.695602,    49.329590,   -9.363475,   122.911224,  -32.076820,  60.501770,    18.112736,
        122.150375,  16.404764,   79.004227,   -26.541256,  45.799755,   -15.288892,   9.543012,
        -43.022354,  -5.829406,   -2.289966,   1.832459,    -2.147601,   -48.274513,   43.330643,
        18.118364,   -13.227979,  -0.830497,   8.249657,    48.233791,   8.300529,     16.592844,
        -50.987087,  -97.013626,  -0.776055,   -78.116875,  -40.541168,  -8.534167,    -3.435683,
        -266.814941, 1.941009,    -85.360863,  18.839661,   -55.414036,  -6.947085,    70.207062,
        -8.045934,   101.359726,  -26.944401,  44.424114,   -22.846228,  24.922108,    -11.844993,
        6.192961,    -11.933015,  10.446842,   -18.229216,  -8.524813,   -21.921606,   -32.069424,
        -8.974498,   -60.738720,  -14.542084,  -42.456612,  -23.678387,  13.413437,    -16.094646,
        -25.792040,  -14.075175,  -22.781895,  -2.706511,   -17.669294,  -12.976580,   -6.142036,
        -31.983393,  -29.366463,  -17.185144,  -64.321487,  -3.828041,   -151.635895,  17.821424,
        -15.742249,  -7.257011,   -10.142662,  -1.942354,   -31.845240,  -1.375773,    -19.520781,
        -11.279613,  -11.509287,  -25.885094,  -25.337969,  -33.911129,  -38.012516,   -22.010651,
        -80.264084,  -24.551596,  -6.839582,   -1.148622,   23.894554,   -8.720144,    -10.117082,
        8.147421,    -21.946075,  -1.258742,   -54.580498,  3.188652,    -59.984467,   -2.239289,
        -48.426147,  -1.764542,   -110.143539, 11.154652,   -2.255625,   10.253357,    0.035674,
        4.876739,    -43.847443,  11.842813,   14.762707,   -10.574367,  -89.072372,   9.593978,
        -24.416248,  14.797988,   -52.764664,  10.560288,   -55.518028,  6.540553,     -30.811333,
        34.277458,   -31.338036,  13.836905,   -27.035728,  10.559379,   -20.208941,   -4.833630,
        -17.011698,  8.007495,    -31.814127,  17.765396,   82.461456,   -21.279669,   -56.946178,
        16.872704,   21.163261,   26.764109,   -22.322439,  29.167194,   -12.963655,   29.487617,
        -10.134817,  31.836861,   -34.134823,  32.711773,   -1.081091,   29.349339,    8.210829,
        16.988214,   38.148270,   2.889564,    10.855619,   0.399126,    -16.399288,   15.009242,
        -47.789375,  25.325073,   -49.243366,  38.409401,   -33.883564,  28.681286,    -88.941391,
        50.613441,   -35.499874,  39.979618,   -82.477966,  27.683027,   -10.544016,   19.619431,
        -9.725907,   2.697116,    24.008600,   -140.645905, -2.693421,   -31.159508,   -8.902768,
        -28.917250,  -52.805336,  -79.457108,  -82.274956,  -80.704102,  -159.040710,  202.256332,
        -5.264415,   -67.561043,  0.868295,    -10.367233,  11.779913,   -51.643242,   -12.067209,
        13.485693,   2.074090,    -63.709667,  -10.394282,  -68.431099,  -33.204185,   -114.096695,
        -28.935318,  -191.848984, -16.007105,  49.468746,   9.400980,    -8.025817,    -18.899914,
        29.497454,   5.116067,    -32.853107,  -4.429346,   -36.547585,  -4.457894,    -18.963387,
        5.537237,    -14.468347,  -16.290279,  15.399078,   29.530397,   -110.774384,  15.148161,
        28.045570,   -12.148606,  14.527731,   23.120653,   -32.409695,  -6.546706,    34.833290,
        1.469110,    20.681190,   -7.255274,   -42.191578,  -1.861320,   2.337593,     -32.362400,
        83.883293,   -27.685843,  101.522423,  -30.286894,  92.441612,   7.798053,     43.562817,
        -3.264997,   53.884754,   15.588533,   22.594036,   -5.675201,   15.270237,    -2.643923,
        7.478810,    -21.041937,  23.200335,   24.750277,   -1.573627,   4.506668,     36.638988,
        2.732463,    34.091133,   12.369558,   53.712994,   40.660809,   31.875795,    90.108109,
        -135.023392, 33.378773,   -15.831300,  17.392523,   -11.859859,  -32.905613,   106.028923,
        -6.126704,   113.588898,  23.617323,   28.805424,   -5.406777,   77.127258,    17.675489,
        14.626062,   22.322794,   1.231400,    48.541260,   6.856599,    -7.921812,    82.002251,
        38.197735,   24.496780,   -21.862513,  107.308945,  1.679252,    52.488476,    8.845591,
        65.620193,   -1.840848,   80.551910,   95.347656,   -105.290009, -54.326038,   196.316101,
        -0.713498,   13.116929,   22.969095,   1.603387,    -51.293709,  30.395887,    -259.519745,
        65.232216,   -37.625893,  3.236133,    -66.789513,  22.098442,   14.149766,    16.286869,
        7.833467,    4.472745,    12.770947,   10.257206,   -73.080383,  18.828421,    -0.342653,
        -6.197032,   -81.399460,  15.293160,   -71.892761,  11.294623,   -39.618137,   8.152209,
        11.314872,   5.717365,    7.416008,    2.919073,    48.664944,   -34.486824,   -20.497213,
        -23.768091,  -60.635864,  -15.005032,  -52.966850,  -11.779646,  -33.042458,   -5.385788,
        -52.510422,  -8.558409,   -2.052712,   -23.883532,  -37.636494,  -25.826946,   20.701717,
        -48.525524,  60.285931,   -40.295914,  -15.936543,  -15.688708,  3.427541,     -14.204250,
        -5.941596,   -12.824946,  17.377230,   -21.752621,  41.963062,   -41.162842,   -15.439503,
        -57.439140,  3.592815,    -30.021551,  38.416031,   -13.674522,  9.505198,     -18.971367,
        -83.600105,  7.522906,    21.299362,   -11.826766,  74.840065,   -29.542746,   45.574795,
        -13.157903,  101.001060,  -42.563248,  -6.765465,   3.760162,    28.455341,    8.610152,
        31.234640,   16.227633,   -21.271561,  4.639164,    -23.053015,  5.177361,     28.768665,
        26.332506,   5.145727,    26.535746,   21.925518,   9.732675,    -28.119623,   -22.381733,
        31.818815,   31.534193,   74.077049,   3.249856,    -8.369952,   -0.498935,    -2.381812,
        11.209229,   38.187107,   9.455843,    -119.728226, 44.908276,   -212.702652,  -16.613691,
        81.624992,   -49.020428,  30.906658,   -1.473247,   2.303283,    0.546324,     14.247716,
        2.738366,    -82.121323,  -0.029365,   52.116123,   -40.605392,  -73.188202,   13.512139,
        -286.540924, -67.507477,  0.000000,    0.000000,    90.000000,   90.000000,    134.458466,
        134.549042,  76.275436,   65.126633,   57.308636,   12.085258,   58.907814,    -28.423676,
        70.556473,   -40.753395,  51.005127,   17.835089,   13.845604,   27.791821,    0.943153,
        1.953302,    23.716885,   -0.446060,   16.530977,   -0.774358,   9.800970,     -0.010679,
        0.000000,    0.000000,    -12.465166,  -4.103329,   -27.326033,  -4.309858,    -39.101662,
        -60.939869,  141.852554,  -294.066833, 27.955648,   -2.502684,   36.588573,    -8.953361,
        21.681103,   -4.846310,   13.171247,   -1.903199,   -0.000000,   0.000000,     -11.432100,
        -15.969322,  -24.637693,  -16.279480,  -47.024128,  -2.190921,   140.637741,   -23.955889,
        43.531483,   76.123940,   11.682454,   5.126760,    -56.313587,  -49.542263,   17.291630,
        18.383656,   33.982677,   5.877275,    -397.608826, 32.025803,   -31.192560,   -54.903091,
        -13.815266,  -32.405106,  10.344143,   -16.181786,  0.000000,    0.000000,     6.901870,
        18.378614,   10.611612,   31.340076,   0.166422,    51.188122,   -13.565125,   155.822311,
        -140.973694, -21.074986,  -111.502823, -47.428871,  -58.362606,  -35.445305,   -42.845867,
        -18.891590,  0.000000,    0.000000,    9.763089,    24.943649,   12.980551,    59.245651,
        0.251639,    97.335983,   -78.376175,  129.393890,  16.359016,   -1078.046509, -416.144714,
        -120.863129, -288.874939, -55.891628,  -122.181107, -97.036674,  0.000000,     0.000000,
        177.521500,  -23.380527,  361.416901,  -30.737089,  614.135742,  -153.588760,  992.293518,
        -418.314789, 1.500564,    0.434746,    0.000000,    0.000000,    0.199926,     3.297107,
        3.659032,    5.435019,    3.746708,    4.961419,    2.574579,    8.341796,     0.000000,
        0.000000,    9.199183,    -1.379450,   0.815183,    2.584807,    2.538550,     -2.857619,
        3.796717,    -0.262990,   3.664447,    2.383415,    14.792883,   -2.514691,    6.692363,
        2.179072,    1.074261,    12.760890,   3.437913,    -5.740203,   -0.428130,    -0.104177,
        -4.505356,   -1.129498,   14.540708,   -3.744161,   1.666336,    4.208647,     1.027059,
        -4.041906,   6.289846,    -7.977774,   4.518066,    -16.130125,  20.000000,    10.000000,
        2.451322,    -2.212067,   -11.177052,  -47.611050,  9.715649,    -14.380781,   5.064844,
        5.462824,    -42.616634,  -37.711266,  -6.984947,   -13.516200,  6.183951,     13.371099,
        -45.495300,  -47.325157,  -17.910040,  -13.549586,  7.682484,    10.400858,    -55.297268,
        -17.255793,  -3.163207,   -5.686911,   -0.289551,   37.699741,   -79.594078,   -55.386654,
        -67.168510,  26.751551,   0.000000,    0.000000,    13.951296,   -55.860962,   20.728926,
        -57.049240,  37.950691,   -53.106438,  71.687798,   -65.018784,  87.983589,    -72.159424,
        144.069397,  -81.309013,  160.167816,  -76.058708,  254.084595,  -74.389191,   0.000000,
        0.000000,    -31.695024,  38.986057,   3.003918,    46.992424,   -10.218407,   55.276829,
        -12.650226,  43.172115,   -14.077235,  59.992294,   0.000000,    0.000000,     0.000000,
        0.000000,    -0.214562,   -1.594965,   26.652784,   -51.605644,  80.500099,    -99.198822,
        91.957275,   -128.156601, 165.273270,  -172.265701, 0.252869,    0.209325,     0.321925,
        0.691409,    0.785538,    1.000000,    1.000000,    1.000000,    1.000000,     -0.003375,
        0.128468,    0.113556,    0.039435,    -4.905180,   0.762961,    -2.912917,    -77.475174,
        -18.098049,  -56.888992,  -73.221329,  -14.728433,  -61.750710,  -52.047432};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
