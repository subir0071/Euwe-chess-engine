#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -114.453102,
        137.932205,  267.720917,  341.269745,  287.956421,  380.962708,  390.531311,  598.697693,
        813.282898,  1097.874878, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -15.256330,
        5.624412,    -17.307198,  -2.958560,   -15.818775,  -10.773771,  -25.620285,  -37.416344,
        -7.588799,   11.961563,   -0.239530,   -6.206956,   19.308479,   -7.035891,   -14.041706,
        -19.736259,  0.646565,    0.683477,    -3.165457,   1.475890,    -12.520440,  -1.456374,
        0.018402,    -7.193939,   -11.766790,  -3.525953,   -9.302681,   -1.598209,   19.038471,
        -2.828881,   10.302224,   -17.936077,  14.302075,   4.279616,    2.737372,    15.496355,
        12.117069,   -1.654309,   18.140713,   -10.238789,  -9.771300,   0.525583,    7.571167,
        5.900588,    -3.868522,   4.539670,    -19.030853,  -2.752592,   28.178951,   29.287355,
        19.762951,   17.456312,   18.633249,   -0.944892,   13.576564,   -0.250037,   20.656647,
        4.476175,    -3.027089,   8.849137,    -27.390953,  9.726130,    -7.425330,   9.289016,
        15.722881,   48.697151,   44.503845,   37.869598,   14.789063,   32.178047,   38.330128,
        -9.195647,   32.685825,   -8.712836,   59.532703,   18.196346,   85.427917,   17.566683,
        36.364708,   7.023891,    145.852020,  105.836693,  124.261826,  137.683487,  224.871033,
        103.099266,  176.185318,  101.175545,  125.635254,  106.785286,  118.220627,  117.918961,
        -27.064873,  130.888367,  -17.299351,  117.700157,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -272.875885,
        -41.376961,  -17.681129,  -45.097187,  -94.389847,  -3.140462,   -25.157450,  -25.890160,
        -35.423100,  -18.263680,  -13.682863,  -30.610004,  -45.262985,  -59.010487,  -223.565872,
        -11.278182,  -48.625896,  -58.012733,  -67.058014,  -5.733089,   -34.111717,  -26.169134,
        4.933923,    -1.898496,   -8.643434,   3.095555,    2.651629,    -7.901392,   -46.820560,
        -5.877690,   -32.948673,  -13.277207,  -12.170787,  -23.627928,  -0.225915,   -5.694195,
        -3.981339,   -7.250636,   2.429824,    15.804509,   33.569588,   15.747256,   -2.708684,
        -10.886724,  1.323005,    -21.174234,  -29.814106,  -26.619490,  -16.491776,  -18.307299,
        -8.415782,   3.905800,    26.160419,   16.179564,   6.247895,    27.214983,   5.762015,
        29.319712,   24.640627,   2.888953,    23.590401,   5.770010,    -13.577519,  -16.799419,
        2.725747,    -25.926992,  7.946917,    -10.438142,  29.047441,   17.038452,   48.056252,
        15.862947,   16.182760,   8.278887,    55.072575,   13.552745,   -3.882058,   3.779689,
        14.498980,   -18.197861,  -8.561926,   -26.024103,  13.673214,   5.000006,    51.518639,
        11.353095,   71.931870,   0.059759,    68.191414,   7.944373,    128.630737,  -0.178537,
        43.745579,   1.708130,    -31.181232,  -1.793563,   -16.924976,  -28.452791,  -39.049744,
        -21.215286,  33.549236,   -7.926317,   45.605366,   5.475183,    23.517315,   2.747355,
        1.412659,    -10.095533,  -45.911800,  -18.719267,  -16.039427,  -14.297871,  -12.289461,
        -99.944290,  -20.788912,  -12.506081,  -48.454533,  -33.111652,  -104.618774, -9.763777,
        40.397419,   6.422437,    -32.132046,  -6.246499,   -144.557297, -6.222560,   -131.070969,
        -94.447655,  -68.503151,  -53.110073,  -38.977554,  -58.817787,  -26.669167,  3.799560,
        -55.926186,  11.788096,   -21.900309,  0.292888,    -35.931664,  -11.419694,  -32.331470,
        -17.678553,  -61.258202,  3.702438,    -11.728387,  -33.402744,  -6.006628,   -15.157780,
        -9.512155,   -1.236298,   -12.196380,  7.914708,    0.407675,    5.387308,    13.765857,
        0.223049,    19.633442,   -23.388012,  -32.930904,  -30.770723,  -5.529130,   -16.571600,
        16.106733,   -7.006920,   14.198476,   1.941406,    9.870831,    20.432440,   12.544183,
        16.797832,   33.238689,   -17.978445,  20.149181,   -17.149759,  5.914971,    -38.083324,
        21.080240,   -28.672207,  -7.861174,   0.134776,    15.223489,   8.223443,    31.188656,
        15.539454,   20.956968,   -4.358694,   16.149632,   -0.993387,   28.277031,   -2.549565,
        24.276875,   -14.607436,  7.923865,    6.318431,    26.990406,   -4.911240,   16.679174,
        4.954849,    46.832428,   6.384106,    63.195705,   14.757758,   46.460526,   -12.537915,
        8.068573,    13.891759,   6.648933,    -16.045322,  23.991169,   -8.035285,   38.905758,
        -5.659992,   44.997723,   -15.566351,  30.015720,   -3.953844,   55.459682,   10.634980,
        135.935532,  20.159451,   99.186745,   -35.472874,  57.794163,   14.677619,   35.765999,
        -15.575082,  26.441185,   -2.955959,   24.787022,   1.051018,    -73.633720,  13.486308,
        43.912895,   -11.142981,  38.558384,   11.807668,   31.775982,   4.812518,    -13.357520,
        -29.483662,  -55.286503,  21.302866,   52.299778,   -17.999319,  79.087822,   -10.668420,
        -39.110172,  10.153367,   -30.791065,  13.165828,   -60.335472,  -23.776215,  -3.038105,
        15.889726,   18.064409,   -27.106298,  25.914530,   -21.561714,  11.737142,   -14.936406,
        4.132250,    -11.567053,  0.427446,    -8.256670,   -11.908877,  -8.523725,   -18.745205,
        -9.624198,   -24.138971,  -16.003223,  -4.516884,   -39.559509,  -27.513329,  -9.177043,
        -17.942568,  -5.895086,   -7.520811,   -11.234348,  -23.174608,  -12.890779,  -23.336401,
        -18.847544,  -37.141762,  -17.696680,  -43.989639,  -8.329944,   -20.954458,  -18.365278,
        -11.135441,  -9.048689,   -19.777498,  0.153652,    -40.519547,  -0.281977,   -18.992010,
        -3.755940,   -32.371220,  -9.794987,   0.444081,    -34.560249,  -3.687269,   -27.785038,
        -28.705326,  -16.331800,  -3.184122,   1.036402,    -6.236007,   -0.920728,   -19.773500,
        1.556617,    -18.573509,  15.178452,   -54.431641,  4.998492,    -42.794086,  8.690959,
        -40.862747,  2.259328,    -82.153641,  2.095326,    -14.523890,  13.381476,   -35.539768,
        12.884749,   -53.889778,  10.766166,   -9.550492,   4.720145,    -95.359848,  16.772617,
        -12.034692,  6.315778,    -40.120277,  10.347974,   -57.938313,  16.433916,   -16.529846,
        26.120071,   -24.155420,  9.082471,    -27.349159,  14.869411,   -16.147219,  12.226403,
        -9.366711,   22.374874,   14.197173,   10.887349,   89.730362,   -12.474827,  -24.298918,
        13.139020,   9.741773,    18.202972,   -45.274502,  27.802517,   4.786782,    21.852571,
        -15.001563,  21.799822,   -6.851684,   14.112136,   38.185818,   18.830215,   -16.678118,
        23.930351,   20.111015,   14.111777,   -0.139550,   1.283269,    -30.000809,  20.962368,
        -29.900953,  25.796371,   -20.394453,  21.520811,   -20.195414,  24.503983,   -0.047162,
        25.563747,   16.942495,   22.475403,   -41.135887,  18.054249,   21.850925,   -4.881371,
        19.939116,   4.183183,    19.719826,   -45.413731,  4.985148,    -19.555021,  -6.315341,
        -12.157493,  -44.499905,  -54.663422,  -9.592161,   -144.450317, -60.330624,  -115.295036,
        -13.752995,  -3.892211,   20.165359,   -21.747465,  7.617148,    -10.459554,  -2.795518,
        -21.936596,  0.386645,    -23.771593,  -3.012727,   -46.612370,  -9.374177,   -132.722336,
        -61.029133,  -112.628098, 9.298429,    -38.982006,  -0.858752,   2.728435,    -19.646912,
        25.021128,   -7.762067,   -20.208345,  -9.144561,   -17.871113,  -15.806190,  -14.812278,
        -0.122682,   -37.579411,  -1.352095,   -72.599884,  6.366185,    -42.446484,  9.680283,
        -11.308617,  -16.793085,  22.592760,   13.988796,   -13.560691,  -25.587891,  22.031004,
        -7.464090,   -5.863379,   -26.882437,  25.375280,   -24.861706,  60.719700,   7.064106,
        -29.448349,  -26.595617,  29.371435,   -29.802593,  54.208233,   -1.210617,   28.401445,
        -14.535941,  44.027279,   -10.581016,  27.939695,   -35.321163,  61.610958,   -0.688469,
        -14.465058,  -8.137401,   -19.213896,  -5.460790,   21.603125,   0.092792,    9.708066,
        -21.212576,  36.242729,   0.288014,    29.805437,   91.535942,   -53.553642,  84.286674,
        -116.287979, 9.693823,    29.572153,   18.487253,   -32.957684,  -37.723209,  67.649216,
        -38.092834,  88.243782,   11.110346,   46.096439,   -40.577557,  89.543190,   -21.832773,
        78.699951,   -19.225796,  60.556782,   -16.509962,  78.682182,   18.062403,   26.887068,
        37.766705,   20.605246,   -57.202374,  129.363327,  -45.185947,  89.286255,   1.771027,
        60.054607,   105.521790,  -42.961098,  101.241554,  -49.631226,  128.362305,  -59.788441,
        1.132033,    47.040024,   30.874968,   -0.606181,   -28.764133,  6.715366,    -107.207100,
        23.972292,   -37.785992,  -5.183655,   -68.521271,  11.462860,   21.507818,   5.603715,
        23.996872,   -13.117966,  -32.855415,  21.962912,   -16.904995,  7.787888,    -38.075901,
        -11.972463,  -71.551361,  5.336598,    -83.643112,  3.232710,    -34.002010,  5.289527,
        -13.998969,  6.282266,    4.321663,    0.736761,    64.014313,   -44.709499,  -54.922768,
        -19.187958,  -58.210983,  -8.599718,   -55.201847,  -6.592835,   -60.176796,  0.620844,
        -67.480171,  -6.923868,   -42.760517,  -17.573524,  -53.902023,  -7.929624,   -108.451233,
        -39.534077,  -2.682040,   -22.882561,  -60.630875,  -11.285049,  -92.027153,  -5.573785,
        -85.918144,  -3.593707,   -60.746063,  -8.394700,   -34.487625,  -17.928656,  -68.250832,
        -29.752195,  -62.486298,  -9.792653,   -108.178520, 9.608474,    -74.616394,  -0.798343,
        -184.369919, 8.087889,    -123.952522, 5.126350,    -67.378777,  -1.917804,   -28.192526,
        -2.445091,   1.035828,    -15.182909,  -79.913223,  -15.665210,  -49.870373,  0.540445,
        -106.625465, 23.429600,   -115.890739, 11.106882,   -144.399826, 13.605193,   -10.992977,
        19.000351,   -84.811165,  21.922857,   -85.802055,  11.675173,   -75.504417,  -7.033732,
        -35.891190,  7.002511,    -23.899052,  -14.187403,  -61.752327,  1.023439,    -113.034470,
        24.625067,   -108.617805, 23.672735,   -95.700859,  31.072756,   -237.949066, 3.050240,
        26.161385,   -30.164059,  -14.786466,  -4.214405,   7.440678,    -23.575844,  -8.178396,
        -18.344995,  -114.720634, -15.260302,  102.217247,  -45.222012,  -60.399696,  14.528279,
        -223.439636, -74.435341,  0.000000,    0.000000,    90.000000,   90.000000,   113.784004,
        108.773964,  67.797966,   59.027985,   46.047871,   16.252382,   62.095360,   -18.440601,
        65.484535,   -28.732409,  37.132374,   36.849136,   12.140669,   15.788027,   -3.995347,
        0.818011,    -5.002412,   3.915554,    30.653168,   67.623734,   1.608324,    -3.173418,
        -52.780731,  -12.675098,  15.436221,   17.230473,   28.678226,   3.521663,    4.403389,
        15.773801,   17.295889,   17.638531,   86.076683,   35.461540,   2.205303,    0.332176,
        0.000000,    0.000000,    -0.363518,   2.048135,    3.258144,    3.342844,    3.091843,
        3.876596,    2.950883,    2.045501,    0.000000,    0.000000,    6.893914,    -0.458980,
        1.258438,    -1.204540,   3.407729,    -2.072106,   0.725829,    0.002074,    1.810446,
        2.698705,    9.851038,    0.204852,    4.832246,    2.346131,    -0.163032,   9.758620,
        0.338700,    -3.827333,   3.409097,    1.816283,    -4.519490,   -0.624410,   10.422833,
        -2.316866,   5.451399,    4.058991,    0.474137,    -1.559037,   2.657935,    -6.305440,
        0.718334,    -12.243990,  20.000000,   10.000000,   5.614116,    -2.084238,   -8.122005,
        -35.662876,  12.502957,   -10.362261,  6.401364,    6.538741,    -45.021839,  -33.325352,
        -5.101538,   -11.452270,  6.524415,    11.519314,   -31.595852,  -39.740913,  -13.706167,
        -11.616453,  5.487444,    9.037050,    -50.645046,  -14.093563,  -4.349917,   -7.749846,
        2.237688,    14.315622,   -73.837669,  -16.584959,  -53.342369,  10.111809};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
