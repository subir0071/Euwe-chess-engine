#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -67.668488,
        129.873779,  285.250763,  331.387115,  299.483734,  361.841278,  395.698181,  593.274841,
        863.203064,  1080.257202, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -14.731563,
        -1.153124,   -19.826553,  -10.540483,  -17.157776,  -7.304023,   -31.930889,  -26.001957,
        -4.244824,   22.870583,   5.273921,    -5.859152,   19.460056,   -4.413586,   -16.888584,
        -17.213017,  5.913574,    -2.596742,   -6.990382,   -0.572554,   -4.512427,   -5.369509,
        -8.211934,   -8.724794,   -13.887973,  -1.047091,   -3.225505,   -0.140886,   20.252981,
        -2.001725,   5.506481,    -11.434318,  14.553536,   1.821161,    -0.179192,   10.796051,
        13.647136,   -5.208344,   15.228485,   -13.378086,  -5.342278,   -1.348287,   12.851937,
        4.934930,    -5.657599,   6.555906,    -18.390858,  -2.770405,   25.246914,   32.002472,
        13.122630,   19.227581,   10.538561,   1.413789,    16.321461,   1.954395,    23.441366,
        2.877053,    0.863319,    3.656839,    -3.208203,   12.009186,   -19.351910,  5.989134,
        18.991285,   54.458862,   39.840729,   47.473419,   31.578678,   32.999249,   35.416798,
        4.058417,    39.747807,   4.305541,    47.064583,   21.210054,   72.924500,   31.734833,
        29.454296,   4.439750,    172.753387,  92.309296,   153.240555,  124.572960,  151.440857,
        88.776436,   221.757736,  93.037270,   128.630630,  96.352646,   90.792870,   114.186424,
        35.922859,   132.840759,  -41.043541,  109.372299,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -187.246017,
        -62.647602,  -14.913837,  -52.231960,  -51.762230,  -13.854619,  -19.064693,  -25.990555,
        -46.047253,  -12.740586,  -12.780890,  -20.754065,  -42.597408,  -61.810699,  -154.322708,
        -13.476821,  -58.537498,  -56.862476,  -84.635933,  -13.143932,  -31.877743,  -25.240835,
        -0.537591,   -2.338774,   -8.133675,   -1.975923,   12.680872,   -10.988291,  -39.487778,
        -8.771284,   -36.874199,  -37.081440,  -20.590681,  -16.511734,  -1.998448,   -4.312130,
        1.199088,    1.818998,    2.182673,    2.232467,    39.247124,   5.070513,    -4.875055,
        -10.073828,  4.467381,    -11.407918,  -41.312485,  -23.502466,  -8.555683,   -10.566351,
        -13.003664,  -1.092149,   31.855585,   10.956908,   -2.611704,   28.283428,   15.804599,
        23.366884,   19.855789,   16.947294,   2.540334,    16.180397,   -15.525047,  -22.003876,
        -1.826830,   -29.035593,  10.237241,   0.808929,    27.095016,   16.529079,   59.187210,
        16.890024,   17.130392,   18.342276,   56.343262,   11.057183,   -8.909542,   8.926294,
        6.817662,    -23.985439,  -40.501213,  -36.169128,  5.093213,    0.591658,    34.027271,
        19.692301,   69.718254,   10.495719,   92.446091,   -4.687909,   130.808350,  -6.045864,
        36.506256,   -0.829306,   -27.340179,  6.743617,    -36.045685,  -36.718727,  -36.447720,
        -23.868149,  19.468258,   -19.201918,  22.946630,   8.520760,    18.771126,   3.213967,
        14.927051,   -27.123278,  -65.574928,  -11.000871,  -1.672402,   -21.464306,  -45.897655,
        -103.531151, -24.335335,  -19.674210,  -66.239174,  -31.043097,  -62.833450,  -16.893072,
        5.372069,    5.643841,    -0.794585,   -28.373188,  -186.738525, 5.656280,    -336.596985,
        -103.065605, -32.256229,  -34.089695,  -35.391476,  -47.343506,  -23.276918,  -9.260324,
        -49.295815,  4.584415,    -16.906382,  -7.046817,   -42.171722,  -12.105181,  -22.100748,
        1.877679,    -35.546562,  -5.371548,   -16.170704,  -23.823410,  -3.217091,   -19.384172,
        -5.773923,   -3.098386,   -12.672669,  7.768720,    -2.504652,   4.435849,    5.959001,
        5.807399,    19.690073,   -13.638961,  -43.137520,  -33.159107,  -9.073399,   -21.208025,
        14.221482,   0.028587,    16.254353,   2.201636,    9.974870,    13.623464,   10.694983,
        14.602595,   26.114805,   -12.537775,  19.711977,   -3.297690,   -7.011517,   -31.992968,
        26.605755,   -19.815577,  15.157819,   0.648447,    15.619435,   10.214686,   40.690460,
        12.439857,   35.230476,   -3.225896,   14.113123,   7.860927,    19.851810,   13.696315,
        27.499449,   -9.077767,   -16.758104,  -3.250009,   19.704275,   0.948567,    20.254814,
        2.411748,    53.748280,   10.777623,   68.552383,   7.792364,    51.753639,   -8.469974,
        14.156029,   1.350644,    33.780624,   -4.265761,   7.432265,    -5.036427,   18.815357,
        0.064151,    33.070175,   -3.333511,   44.246532,   -5.048049,   62.261383,   7.023444,
        130.088608,  11.313832,   118.827271,  -15.903924,  56.546265,   4.997213,    21.937595,
        -22.489729,  10.238160,   -3.547708,   40.107822,   9.258197,    -40.181080,  15.328591,
        45.767445,   -13.594495,  26.515236,   -0.740017,   16.798567,   -2.875715,   -8.995411,
        -34.628979,  -27.314075,  13.900294,   78.191101,   -17.328074,  76.007645,   -30.051506,
        -27.877743,  2.536369,    -7.118550,   4.987197,    -8.624694,   -25.411015,  90.094444,
        -6.692420,   -78.374916,  -30.150482,  30.605635,   -20.832237,  15.159467,   -19.078917,
        1.973634,    -5.196595,   1.415493,    -9.861568,   -15.766303,  -10.726691,  -20.635250,
        -9.774510,   -36.978260,  -18.684261,  -13.509164,  -33.141617,  -31.884956,  -11.403751,
        -12.492492,  -9.341475,   -17.895527,  1.083458,    -16.903038,  -9.711150,   -24.944080,
        -8.083677,   -38.977383,  -9.682443,   -55.106785,  -6.021564,   -48.856861,  -7.045497,
        -7.321526,   -10.346300,  -14.808175,  -3.041227,   -45.159637,  5.356613,    -25.803009,
        -4.737882,   -40.226578,  -0.881380,   -13.746648,  -21.021994,  -36.192112,  -14.162576,
        -41.656639,  -10.803831,  -0.430544,   -7.180150,   7.610312,    -2.430321,   -24.396286,
        5.288068,    -23.866508,  12.051929,   -46.688229,  3.735807,    -46.701427,  7.287135,
        -36.137947,  -10.611890,  -30.035118,  -7.489841,   -10.774421,  10.110661,   -23.847012,
        7.819316,    -42.645699,  12.692494,   -14.173987,  10.392968,   -87.524567,  19.306158,
        -7.244048,   4.562386,    -31.260319,  9.584986,    -58.687069,  8.449354,    -11.027663,
        22.476418,   -18.813614,  15.737556,   -36.000702,  19.733274,   -8.276830,   16.035313,
        -25.509590,  26.400980,   22.828377,   4.987930,    93.442139,   -11.730783,  -28.013538,
        14.403266,   -3.926037,   15.779944,   -15.548476,  22.271906,   0.967567,    20.240154,
        -23.017403,  26.283890,   -10.412633,  22.011244,   22.027969,   17.931635,   -35.167564,
        25.496546,   32.498287,   8.871203,    15.472548,   -5.227990,   -3.318469,   16.480455,
        -13.745618,  18.652491,   -6.705685,   20.457188,   9.771909,    19.803097,   32.797878,
        18.347284,   24.362095,   15.704066,   -71.494240,  21.771513,   23.609129,   -6.732690,
        22.758978,   -57.161148,  12.765516,   -55.469543,  4.365468,    -10.917728,  -8.570868,
        -52.242680,  -34.978310,  -53.823677,  -40.129696,  -144.263962, -66.149384,  -46.085396,
        15.658290,   -17.959862,  23.836721,   -5.978937,   9.470793,    -16.212772,  -5.012710,
        -15.068706,  -5.708043,   3.399807,    -3.325412,   -32.767864,  -15.389352,  -73.465370,
        17.906158,   -149.466110, 20.333071,   -58.927185,  6.515910,    -1.712879,   -15.450677,
        18.350916,   -14.065381,  -6.700332,   -7.544112,   -21.346142,  -19.423445,  25.070492,
        3.552758,    -54.673763,  4.808162,    -72.463623,  17.294582,   -59.487919,  7.425069,
        -12.690945,  -8.744885,   12.466352,   5.771586,    -11.349608,  -20.958929,  10.169878,
        -3.043967,   -8.986130,   -33.016472,  20.986128,   -24.628298,  29.225786,   8.697135,
        -20.033760,  -15.323953,  7.533950,    -29.977423,  65.560440,   -5.418458,   32.662292,
        -3.940675,   12.012029,   -10.724904,  46.406021,   -60.620613,  100.864220,  2.919448,
        4.321865,    -4.152156,   -10.746642,  18.668798,   -20.777506,  -4.758340,   12.748491,
        -12.722821,  11.651159,   -9.938912,   44.402439,   83.210213,   -53.109234,  48.189026,
        -47.043800,  -7.890819,   43.390465,   32.532814,   -43.989773,  -35.833382,  64.558929,
        -22.272928,  45.968555,   -3.420444,   46.967083,   -9.776481,   41.778877,   -27.830873,
        92.867676,   -4.557681,   45.029709,   13.674511,   48.045158,   28.990171,   31.425005,
        90.364761,   -37.104607,  -11.074517,  41.108246,   -0.435306,   39.809059,   27.548532,
        27.133307,   91.769958,   -17.603802,  36.380577,   42.036194,   65.110878,   14.709478,
        22.413240,   -4.627853,   41.278324,   2.347303,    -19.885763,  16.431053,   -95.733032,
        11.679617,   -31.782057,  -2.051229,   -65.356918,  4.038392,    18.696949,   4.417126,
        26.028585,   -5.642955,   -18.891127,  -3.270902,   -37.110264,  -0.461889,   -51.469501,
        -1.926557,   -72.508621,  5.231456,    -70.588142,  0.449567,    -38.270248,  4.558830,
        -10.599789,  3.818611,    10.265594,   -2.328856,   32.433369,   -40.333138,  -55.784904,
        -8.674606,   -44.848473,  -10.991907,  -51.201206,  -4.607476,   -66.089981,  1.295153,
        -60.395901,  -7.284407,   -45.460705,  -16.728411,  -54.662479,  -4.486483,   -71.787399,
        -10.255110,  -30.994173,  -20.190351,  -89.416290,  2.468218,    -98.710335,  0.388882,
        -86.168480,  -6.745079,   -80.092575,  -3.154083,   -50.502655,  -14.783970,  -41.007233,
        -23.780939,  -90.393532,  6.114910,    -107.355705, 8.369173,    -80.903961,  0.659726,
        -169.257172, 10.634216,   -140.085709, 1.165033,    -97.397873,  -1.988789,   -34.492458,
        2.590556,    -7.104105,   -10.269439,  -81.167480,  -4.086164,   -50.551662,  0.845416,
        -109.437035, 22.480053,   -118.722511, 14.217530,   -153.351578, 15.216983,   -7.582914,
        13.532987,   -103.680687, 20.132692,   -70.204399,  6.941540,    -102.123306, 12.421090,
        -64.331978,  -6.385514,   -49.126163,  -15.212790,  -88.381721,  6.370693,    -99.917572,
        19.685871,   -100.338310, 17.664579,   -17.229177,  24.301710,   -205.647552, 11.116625,
        44.180351,   -42.256882,  2.655148,    -20.146229,  13.539541,   -16.912548,  11.477717,
        -19.817772,  2.806057,    -12.076103,  33.074703,   -20.571840,  -27.719793,  3.413232,
        -243.029175, -64.842323,  0.000000,    0.000000,    90.000000,   90.000000,   121.611221,
        100.762589,  63.518692,   67.277206,   42.369049,   27.931635,   53.749451,   -7.449315,
        57.689365,   -19.893351,  25.762363,   49.993107,   9.949403,    11.722794,   -5.054527,
        -4.722846,   -6.686886,   2.935044,    32.377125,   68.413696,   0.486173,    1.160461,
        -32.561768,  -12.158303,  17.978491,   13.533554,   27.879519,   4.177019,    2.747864,
        12.517760,   10.834319,   18.227348,   66.949257,   14.619535,   2.154416,    0.230223,
        0.000000,    0.000000,    -1.072081,   2.421924,    3.238390,    3.487879,    3.146656,
        3.452104,    2.478006,    3.667049,    0.000000,    0.000000,    6.288754,    -0.011908,
        0.900431,    -1.285504,   4.282839,    -2.709578,   2.120920,    -1.033771,   3.607718,
        -0.345717,   8.731410,    0.580235,    4.352125,    2.357849,    1.295183,    8.645674,
        0.446092,    -3.492173,   4.924255,    0.697855,    -5.506036,   -1.061629,   11.399345,
        -3.056698,   6.855478,    0.375234,    -1.050304,   -0.275911,   2.198780,    -5.862286,
        -0.967092,   -11.764918,  20.000000,   10.000000,   3.748975,    -1.513445,   -8.124957,
        -36.138779,  10.502918,   -11.150619,  7.963816,    4.134217,    -48.263538,  -38.633713,
        -4.814546,   -12.216225,  6.157935,    9.291026,    -30.507189,  -40.084183,  -14.262573,
        -9.608912,   8.171820,    8.292531,    -52.778065,  -16.091877,  -4.131585,   -4.782411,
        1.516299,    13.939325,   -74.568001,  0.503963,    -57.311871,  22.708643};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
