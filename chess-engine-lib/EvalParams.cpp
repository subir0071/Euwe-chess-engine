#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,     -140.206345,
        196.866562,  456.616699,  463.106262,  444.221252,  518.744507,  596.313721,   888.421326,
        1284.571289, 1534.250488, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -32.989243,
        -5.817752,   -35.666168,  -12.315693,  -36.021149,  -11.965707,  -36.638477,   -46.973915,
        -19.201687,  7.842324,    19.270321,   -10.429884,  49.466862,   -7.773537,    -24.356291,
        -27.722445,  -10.426208,  -7.376101,   -13.844280,  -3.878588,   -29.755907,   -10.373206,
        -3.574284,   -3.336308,   -1.690305,   -6.768301,   5.172039,    -6.711926,    34.634335,
        -1.712156,   3.695927,    -22.832399,  -1.161806,   5.131960,    -15.257751,   7.938133,
        -6.772251,   -4.290884,   13.626161,   -5.878288,   -5.843764,   7.624746,     17.078693,
        4.897523,    -0.183618,   20.366665,   -16.542934,  -1.385323,   17.316927,    41.762028,
        5.444288,    32.655823,   13.301623,   12.519851,   10.977428,   2.020792,     30.534744,
        -0.120097,   0.559874,    16.294641,   -19.632338,  20.536900,   -13.583414,   6.534270,
        -0.090215,   88.769547,   16.726555,   78.791489,   13.998339,   49.069820,    25.066641,
        5.635793,    71.716347,   -40.098267,  95.685852,   2.290049,    9.771692,     21.471970,
        38.962418,   -1.907494,   191.459595,  206.926025,  173.184616,  236.305405,   195.948181,
        181.646881,  223.095123,  138.590103,  167.335938,  124.409943,  173.413620,   131.049698,
        -106.474281, 192.776154,  -0.259303,   150.910370,  0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -346.431732,
        -49.982929,  -54.339825,  -52.530945,  -92.472809,  -43.645481,  -36.284294,   -19.715038,
        -29.884714,  -39.461624,  -13.360674,  -43.868790,  -63.384495,  -49.357006,   -135.551727,
        -58.740105,  -79.821564,  -57.871140,  -109.157478, 17.354078,   -30.108622,   -22.659218,
        -0.767978,   -4.834121,   -10.769864,  -29.819571,  -3.419044,   -28.774891,   -25.075777,
        -30.718885,  -32.647278,  -31.549252,  -54.443707,  -11.233323,  -12.204160,   -17.325933,
        -20.073917,  -24.226282,  14.000074,   11.448361,   46.404968,   20.692661,    9.853033,
        -18.599882,  19.645569,   -46.732460,  -2.828626,   -63.906704,  -15.160501,   -24.020447,
        -1.065109,   10.550923,   23.847271,   35.499889,   8.188997,    36.576237,    20.590050,
        39.301620,   30.375713,   5.003589,    50.564960,   -12.906840,  0.913690,     -13.759483,
        -30.931129,  -0.359818,   3.198216,    11.910789,   23.851149,   29.893990,    67.480713,
        27.497368,   17.882069,   21.828976,   84.370499,   2.974404,    20.320982,    8.613605,
        3.131173,    -10.782582,  -20.839750,  -29.447571,  -5.412288,   15.161773,    69.173088,
        13.619689,   97.728188,   19.478695,   126.885735,  -7.133171,   129.793823,   24.852226,
        34.490314,   9.052903,    -29.378458,  -31.964520,  -91.737160,  -19.990606,   4.223802,
        -10.440063,  22.238621,   -11.757029,  55.641567,   17.551636,   30.861317,    20.292336,
        152.237198,  -48.678074,  -11.541982,  -35.029057,  -77.340279,  -21.963331,   -298.292633,
        -45.199692,  -160.493515, 3.051274,    -129.807831, -11.301279,  28.825150,    -14.264855,
        38.524548,   -19.336246,  42.663570,   -28.100403,  21.009218,   -40.408783,   -6.923903,
        -141.857880, -110.538071, -19.108120,  -57.414150,  -3.310232,   -34.281227,   -2.293404,
        -31.005541,  17.261469,   -17.674923,  15.933820,   -38.226688,  -2.768291,    -0.896261,
        -13.280265,  -95.485008,  24.591778,   -10.851490,  -11.305591,  -9.838135,    -14.919114,
        1.729581,    -13.820395,  -15.594305,  16.688873,   3.713525,    13.988530,    16.256685,
        0.229286,    38.709789,   -21.229567,  -45.297371,  -17.610519,  -23.681791,   -6.737444,
        15.868958,   -3.439988,   15.775535,   5.023083,    15.677438,   7.863667,     18.000078,
        8.897279,    36.597691,   -10.848014,  19.191172,   -25.017416,  -23.906843,   -27.013021,
        15.380215,   -53.749748,  11.748546,   6.976642,    27.152363,   10.451858,    39.070080,
        6.511985,    33.993633,   -16.029964,  20.099655,   0.462651,    49.785526,    -1.849144,
        14.525699,   -52.916050,  -22.065081,  2.235771,    20.384798,   23.380592,    28.194532,
        -8.449085,   60.468838,   5.764224,    49.368893,   1.559528,    59.973133,    9.810964,
        1.214901,    4.763638,    9.080525,    -11.402497,  4.758741,    15.468818,    50.359165,
        5.103632,    53.802914,   5.285875,    127.219795,  -33.826523,  81.511124,    3.409324,
        139.966385,  -11.325414,  68.623421,   -21.204969,  61.808521,   -26.503275,   64.304535,
        -36.389530,  -1.265647,   20.222828,   24.308348,   -4.666797,   -11.450665,   23.561813,
        27.847857,   -2.270307,   -12.994819,  7.107331,    85.798973,   -18.477995,   -7.047271,
        -75.476173,  -74.546684,  4.206486,    -64.263252,  -25.432438,  -31.530031,   6.661586,
        -219.592651, -1.250490,   -103.428894, 19.139389,   -106.134804, -27.485022,   99.078178,
        -41.525631,  60.698101,   -35.497334,  27.453810,   -22.452068,  13.954788,    -16.057261,
        -3.173389,   -9.380328,   6.895786,    -16.000895,  0.643792,    -22.494394,   -22.139336,
        -8.511449,   -61.850704,  -3.050170,   -30.557793,  -34.741711,  2.533422,     -17.139547,
        -25.539103,  -16.359528,  -22.360165,  -7.370728,   -18.916153,  -12.564200,   2.757236,
        -26.588402,  -0.051347,   -20.995775,  -43.542557,  -15.517117,  -110.829109,  -3.436772,
        -26.648458,  -4.978653,   -26.553802,  -7.977413,   -34.205894,  -6.791265,    -8.170947,
        -12.483743,  9.814585,    -31.153900,  -1.871988,   -38.051094,  -8.255888,    -13.091431,
        -64.405823,  -30.541380,  -18.409264,  0.207664,    22.352575,   -5.488889,    -11.148643,
        5.219350,    -4.628257,   -4.556318,   -32.883930,  3.400876,    -31.576595,   1.231124,
        -21.217916,  9.631291,    -82.547104,  20.835459,   1.135143,    11.210475,    -4.238822,
        10.098243,   -23.177092,  14.197953,   30.396799,   -9.892346,   -56.376236,   10.985211,
        4.476704,    1.245795,    -28.751644,  7.518928,    -24.640575,  10.158408,    -50.349468,
        38.917561,   -24.329485,  8.941556,    -3.388631,   10.025771,   -3.324070,    0.205716,
        6.237643,    5.633443,    5.404391,    3.919219,    93.878784,   -10.845854,   -6.255187,
        14.354869,   25.599073,   25.997511,   -12.955016,  32.605785,   19.888662,    34.683918,
        18.110456,   28.709234,   -10.604568,  37.208839,   55.929451,   16.662004,    31.535202,
        18.803747,   86.021881,   4.395179,    23.123703,   -7.571451,   -8.138582,    16.482935,
        -39.347210,  33.894848,   -28.362434,  37.853096,   -8.452926,   24.077688,    -71.876480,
        47.133305,   14.755778,   31.418253,   -44.697498,  37.670803,   -10.825748,   10.868306,
        2.712800,    -12.838968,  20.213295,   -121.122162, -5.093318,   -31.964371,   -7.044506,
        -32.390755,  -49.937366,  -93.742599,  -125.072403, -57.170204,  -254.195740,  169.868790,
        -10.427464,  -34.209717,  -4.799793,   -9.706252,   14.032528,   -63.359642,   -14.705105,
        6.247065,    1.167283,    -53.597557,  -13.682007,  -45.570065,  -30.500959,   -96.251289,
        -8.334862,   -201.229736, -22.303959,  68.863884,   10.552677,   9.980948,     -19.619333,
        45.907558,   4.889561,    -15.797511,  -8.636505,   -15.796045,  -5.268791,    8.894536,
        4.490731,    -20.265549,  -12.835127,  24.327229,   26.964588,   -60.828934,   18.666077,
        16.802126,   -7.625957,   11.039720,   20.607700,   -38.697697,  -4.487075,    59.964340,
        -1.544689,   23.887554,   -11.615814,  -31.198820,  -3.933517,   1.249396,     -26.933321,
        83.053467,   -17.428564,  85.475800,   -18.462637,  69.656288,   16.443516,    21.000904,
        -6.403301,   56.561859,   18.256058,   21.892334,   -1.799968,   32.109428,    -3.339447,
        25.248302,   -17.387373,  -7.386204,   28.558781,   11.075007,   22.155735,    10.187852,
        11.685455,   18.298365,   20.944469,   34.986004,   73.351906,   0.690881,     106.075775,
        -117.443092, 17.900799,   6.630965,    21.164593,   -19.057619,  -13.918934,   65.030983,
        9.107758,    63.966553,   45.416553,   9.536374,    27.952602,   25.814800,    -17.262966,
        102.884430,  74.694107,   -91.477844,  119.066040,  -55.333355,  -9.787933,    76.355881,
        25.910717,   32.416084,   -24.968073,  116.128052,  -1.928230,   57.013512,    -1.454963,
        76.200531,   52.495426,   -5.870064,   120.242538,  -161.259872, 16.049805,    100.338730,
        0.506954,    1.471347,    14.838137,   -2.021590,   -40.054493,  25.099329,    -143.063965,
        31.962160,   -45.921295,  16.345182,   -70.024323,  28.193521,   13.740222,    23.759083,
        8.581324,    8.524566,    -59.005634,  16.429804,   -20.027164,  19.202911,    3.291973,
        -9.404086,   -46.105015,  4.705826,    -76.734367,  12.112689,   -29.833370,   7.680855,
        24.295702,   1.687840,    15.998466,   -1.684522,   -12.096236,  -30.740736,   -0.261962,
        -27.787228,  -49.681103,  -21.464825,  3.031377,    -17.783335,  -12.485436,   -10.754442,
        -38.255970,  -8.826515,   6.782049,    -27.527237,  -12.861829,  -34.879807,   22.051193,
        -44.724567,  52.603897,   -41.577019,  39.034500,   -26.225609,  13.715915,    -19.520874,
        17.153847,   -15.299953,  9.495591,    -15.506906,  37.846054,   -46.140305,   -40.994785,
        -59.720867,  46.566200,   -19.861012,  40.750748,   -7.237696,   9.341026,     -14.955482,
        -29.818602,  4.857184,    -56.039448,  -2.144029,   71.771202,   -28.841635,   60.820679,
        -16.200319,  99.962173,   -49.326141,  16.558334,   23.309992,   -7.614520,    30.816235,
        17.372309,   21.754986,   -57.708263,  13.688558,   4.635852,    -4.357023,    67.166321,
        16.949648,   -42.053879,  22.598629,   -109.594147, 23.405727,   -51.192631,   21.672031,
        0.347593,    29.964745,   17.176598,   28.123606,   -28.638380,  21.658735,    53.180035,
        -11.916080,  70.480980,   -22.149002,  -142.459305, 36.394260,   -396.873077,  3.394760,
        8.418603,    -51.248299,  12.612687,   19.942127,   9.479095,    6.862297,     -26.094250,
        33.480099,   -83.213486,  12.328724,   22.052359,   -36.636440,  -184.501282,  31.278980,
        -284.961365, -107.125519, 0.000000,    0.000000,    90.000000,   90.000000,    147.899704,
        136.380936,  82.925583,   62.220501,   63.978149,   10.411323,   61.450748,    -32.878960,
        77.372421,   -46.268875,  71.643005,   15.275943,   18.048069,   28.581772,    4.072241,
        -1.353243,   27.503725,   -1.004405,   20.214554,   -1.451560,   11.525974,    -4.231651,
        0.000000,    0.000000,    -9.838212,   3.388403,    -21.572607,  -5.762127,    -40.290501,
        -24.948368,  128.574722,  -295.695099, 26.183468,   -8.639399,   38.697117,    -12.712947,
        22.583145,   -7.969836,   13.379893,   -7.597371,   -0.000000,   0.000000,     -10.675716,
        -9.856530,   -18.876162,  -17.836273,  -44.509556,  29.817556,   143.523254,   -13.441351,
        48.197990,   79.935440,   11.715262,   10.472755,   -41.600227,  -61.428741,   19.197536,
        20.547401,   35.655384,   6.020889,    -427.027222, 27.907450,   -22.743729,   -62.694702,
        -15.420341,  -40.252438,  24.897423,   -26.064054,  0.000000,    0.000000,     4.544874,
        21.859196,   11.035457,   36.977348,   8.038041,    55.807640,   -14.506168,   168.790726,
        -133.829498, -40.954636,  -137.254608, -63.500648,  -66.809013,  -47.971836,   -33.550121,
        -28.044788,  0.000000,    0.000000,    8.604274,    33.145660,   11.098783,    76.071205,
        4.495443,    125.085243,  -93.144310,  177.476212,  -32.403740,  -1162.183350, -458.242889,
        -152.753876, -325.698151, -61.926411,  -163.536652, -84.330330,  0.000000,     0.000000,
        200.264175,  -12.200716,  399.506256,  -24.159973,  645.769470,  -95.628372,   1096.485352,
        -413.559784, 2.167386,    0.461999,    0.000000,    0.000000,    0.870207,     2.202401,
        3.983634,    5.675350,    3.821429,    5.214806,    2.804190,    9.176628,     0.000000,
        0.000000,    3.441641,    -0.112292,   -1.470492,   2.427914,    2.013136,     -2.399196,
        3.411222,    -0.425830,   4.597493,    1.162292,    12.550433,   -2.193269,    0.397299,
        3.899790,    -4.653358,   14.045208,   -0.344788,   -5.203022,   0.182234,     1.337393,
        -5.832658,   0.741942,    9.433908,    -3.760415,   1.464051,    5.316209,     -3.747119,
        -2.659092,   3.134312,    -7.887541,   0.022525,    -14.857909,  20.000000,    10.000000,
        1.815262,    -1.064280,   -10.885692,  -49.610863,  10.957618,   -13.930112,   6.406397,
        6.984332,    -48.334766,  -39.619862,  -5.602318,   -15.451534,  5.507936,     15.698618,
        -46.922325,  -50.405090,  -17.524363,  -17.806976,  5.050666,    11.214470,    -61.263100,
        -13.750663,  -6.252232,   0.264217,    2.892262,    34.921505,   -84.677605,   -43.185051,
        -63.823463,  21.486977,   0.000000,    0.000000,    10.548773,   -53.942856,   16.512541,
        -55.954403,  33.642979,   -49.886436,  62.697895,   -61.195267,  83.596611,    -69.543327,
        139.421188,  -78.351746,  185.667969,  -84.052681,  251.626923,  -67.541229,   0.000000,
        0.000000,    -23.078119,  39.355293,   -2.016210,   43.319752,   -4.119320,    54.251186,
        -2.997986,   41.157120,   -4.148700,   53.330822,   0.000000,    0.000000,     0.000000,
        0.000000,    -2.486493,   -1.167622,   17.391928,   -47.966049,  63.900356,    -95.062424,
        80.969780,   -123.202301, 137.117538,  -162.690445, 0.253200,    0.192258,     0.319313,
        0.763889,    0.811490,    1.000000,    1.000000,    1.000000,    1.000000,     -0.003765,
        0.124358,    0.102367,    0.043359,    -4.636352,   0.835109,    -3.486518,    -82.871513,
        -23.515047,  -58.808586,  -80.440598,  -19.795334,  -74.689438,  -40.990292,   -18.614431,
        13.472484,   -7.170636,   7.771755};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
