#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.029219,    1.000000,    0.592578,    2.183934,    7.688072,    0.000000,    0.269330,
        0.157340,     0.380432,    0.638870,    7.345517,    7.355375,    1.893484,    1.000000,
        1.000000,     -0.005062,   0.093377,    0.081740,    0.041032,    210.826294,  -70.224754,
        170.106781,   355.335938,  360.163025,  371.285278,  427.286255,  472.495514,  744.298279,
        1126.878906,  1182.139160, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -108.141083,
        167.099594,   -110.721642, 159.153290,  -103.166862, 172.100845,  -99.103355,  145.377747,
        -77.612358,   172.483795,  -50.932930,  174.561951,  -29.510925,  161.729492,  -93.454910,
        150.481918,   -85.692200,  163.495575,  -91.657845,  161.939835,  -93.643806,  164.155762,
        -65.445389,   173.826050,  -65.282372,  181.603958,  -54.635418,  179.026321,  -50.156727,
        169.465546,   -59.701473,  156.175934,  -77.936707,  169.414032,  -84.574463,  172.355301,
        -69.900131,   168.088181,  -57.528023,  188.437241,  -62.214592,  189.005920,  -61.212780,
        185.596405,   -74.470886,  184.856140,  -60.243526,  166.918686,  -59.543030,  195.830551,
        -68.426537,   192.937866,  -61.820465,  181.802704,  -32.029167,  174.397171,  -36.190002,
        179.367188,   -61.073654,  190.331543,  -94.801979,  188.210281,  -49.072380,  171.532059,
        -64.198578,   194.869919,  -67.698074,  229.478989,  -16.193947,  189.032761,  34.403206,
        162.759735,   9.870537,    284.743561,  35.401852,   172.355789,  18.554756,   189.389038,
        -7.533228,    156.445251,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    267.883881,
        343.515076,   308.895844,  276.235504,  302.034363,  332.672821,  311.863342,  372.297363,
        331.591278,   344.320648,  332.291046,  332.693665,  310.289886,  329.524292,  227.811386,
        301.750397,   299.190063,  308.851410,  251.983170,  372.236084,  355.319641,  347.749634,
        354.233612,   356.392273,  351.123718,  347.665009,  366.547913,  336.220398,  365.655457,
        334.098328,   306.212250,  342.745911,  330.906525,  329.957733,  360.060303,  352.423676,
        338.079712,   345.925629,  367.456512,  382.559326,  383.883087,  378.952820,  360.284760,
        338.437561,   374.796509,  324.537994,  314.307556,  325.400299,  334.719147,  357.812225,
        357.582947,   362.965088,  380.138672,  381.290894,  365.909821,  387.094879,  377.805298,
        380.767487,   379.405060,  366.189545,  378.735718,  354.421478,  346.456726,  353.672424,
        340.268738,   381.186615,  366.801849,  373.284912,  369.639435,  389.115723,  439.762054,
        375.105835,   371.022339,  389.924316,  435.359100,  363.709503,  373.093964,  375.948334,
        397.442108,   344.429535,  293.674896,  328.382996,  402.632080,  362.699890,  391.493378,
        361.627197,   418.010925,  381.918152,  437.190979,  364.102600,  485.467621,  355.371796,
        379.884491,   366.916290,  363.000488,  350.545837,  321.333130,  369.987152,  336.334137,
        373.809143,   368.886414,  340.796448,  397.461029,  379.046326,  386.763519,  366.135101,
        471.400604,   348.489227,  382.793549,  353.261139,  199.278503,  366.096954,  194.602524,
        268.218414,   287.705872,  326.474091,  267.428345,  345.407013,  301.751312,  354.368134,
        407.148560,   317.291199,  261.712830,  360.786682,  259.294220,  341.625092,  294.397797,
        246.385422,   347.805115,  397.787689,  350.579010,  397.857269,  340.924103,  427.238190,
        353.021912,   442.706451,  351.488403,  438.289307,  341.954010,  406.345520,  325.080475,
        403.312317,   355.421722,  449.428741,  370.353821,  381.846313,  370.991669,  404.459381,
        364.100006,   419.778015,  363.302155,  434.841461,  373.269073,  433.993256,  387.800812,
        433.786011,   409.633514,  400.824768,  334.965485,  383.890717,  366.596863,  411.669312,
        385.352570,   405.825348,  381.316162,  437.781921,  393.375885,  425.988586,  382.355316,
        435.431396,   402.343781,  428.601440,  394.095306,  409.619751,  372.357056,  405.337769,
        370.796265,   398.591766,  374.793854,  423.660675,  387.354614,  426.507446,  390.283234,
        437.392273,   407.677979,  427.867645,  386.568970,  434.659149,  398.421265,  425.451935,
        387.716309,   381.674042,  371.357269,  417.909821,  387.993744,  445.997467,  392.523041,
        428.225830,   419.565033,  426.252167,  407.132690,  445.435944,  428.847412,  428.526093,
        369.351807,   443.578156,  364.140900,  414.471893,  392.551636,  418.517395,  406.000397,
        435.230286,   417.611206,  434.702057,  449.361786,  400.923462,  423.141632,  435.731171,
        453.506012,   430.452972,  411.603577,  435.333008,  421.092041,  407.830994,  350.697296,
        423.628326,   372.391113,  450.387512,  405.834717,  436.134674,  370.864105,  437.833954,
        393.395081,   431.865112,  376.109253,  440.686432,  412.525787,  429.209412,  319.408264,
        365.297882,   344.995331,  419.104950,  336.331940,  424.387177,  319.341125,  440.444763,
        305.444458,   445.592773,  354.613098,  427.642700,  287.801178,  447.185669,  434.553314,
        392.251923,   556.362488,  367.512390,  482.419556,  736.529724,  478.543304,  727.932739,
        470.840698,   740.487671,  475.351959,  735.310303,  476.473541,  729.113464,  459.592621,
        742.070923,   435.741272,  743.431396,  450.476715,  718.470581,  473.531616,  744.783081,
        464.894196,   727.647034,  465.607452,  737.688721,  465.606140,  740.485291,  480.510162,
        733.381287,   477.315002,  718.858948,  457.943604,  733.966309,  398.426147,  751.594788,
        443.229797,   742.332153,  430.197266,  737.310608,  449.222168,  741.681213,  476.912262,
        736.702148,   475.185211,  732.658813,  468.323456,  734.244263,  481.328033,  732.375854,
        466.091675,   726.040039,  439.964142,  749.481323,  460.062347,  750.696472,  463.722168,
        749.414062,   480.499023,  741.070007,  472.094116,  746.036743,  455.328217,  750.136475,
        460.970245,   758.685730,  443.068726,  753.805176,  469.400604,  756.589966,  489.711365,
        745.320984,   490.395844,  747.455383,  500.637756,  736.915588,  451.995605,  753.475220,
        485.105164,   743.115356,  492.465973,  743.660339,  442.244965,  750.852478,  483.593842,
        763.493530,   467.192902,  748.516541,  482.840210,  751.636719,  490.898346,  741.303772,
        523.867859,   736.244385,  505.617615,  736.696411,  508.554932,  751.677368,  526.938660,
        738.918518,   487.970673,  766.431091,  478.639404,  770.854614,  497.765961,  768.505371,
        524.820374,   758.617920,  503.529144,  769.136841,  548.559021,  752.280701,  524.128052,
        755.086487,   599.296082,  739.225464,  499.667847,  733.473877,  509.384186,  742.998840,
        512.732544,   753.632568,  507.030579,  756.081055,  495.916473,  762.957336,  505.812408,
        765.184204,   490.107452,  764.689026,  526.779785,  753.571106,  1120.922729, 1171.736938,
        1131.487427,  1169.347168, 1126.457886, 1130.900146, 1126.679688, 1143.660278, 1125.808960,
        1130.324829,  1100.658569, 1088.279297, 1031.680908, 1197.533447, 903.227661,  1348.143677,
        1128.178833,  1156.772095, 1123.986816, 1157.536499, 1135.975220, 1154.261597, 1126.206177,
        1180.771851,  1146.147705, 1105.759644, 1142.342407, 1093.966431, 1108.047607, 1077.690674,
        1099.464722,  1124.966553, 1113.466064, 1220.837646, 1115.485229, 1198.004883, 1103.247559,
        1236.296387,  1128.956299, 1173.919312, 1119.502930, 1194.939209, 1137.947266, 1168.792969,
        1144.807617,  1129.672363, 1101.258667, 1202.363525, 1110.003296, 1213.337158, 1114.267456,
        1209.942139,  1111.458008, 1187.616577, 1127.629272, 1198.437378, 1126.707031, 1207.279297,
        1120.679810,  1209.913940, 1115.451294, 1169.080078, 1125.359497, 1157.873169, 1115.547607,
        1226.118164,  1090.751221, 1267.475952, 1085.857056, 1255.882324, 1126.754639, 1221.529053,
        1140.999634,  1177.137939, 1131.792725, 1208.962158, 1131.898804, 1178.249390, 1120.790405,
        1175.396729,  1103.755371, 1197.034912, 1135.994873, 1172.535767, 1103.675537, 1235.936035,
        1113.768677,  1214.111938, 1120.308960, 1219.146240, 1216.912598, 1143.714844, 1214.391602,
        1107.631104,  1137.581421, 1169.537109, 1089.034180, 1208.409790, 1082.319458, 1264.797852,
        1112.953979,  1233.347778, 1137.545898, 1191.884399, 1143.006470, 1202.686157, 1116.438843,
        1258.493286,  1220.988647, 1099.999146, 1234.028198, 1077.978271, 1063.249756, 1329.572998,
        1089.002563,  1250.805176, 1067.263550, 1288.272949, 1122.064209, 1204.601929, 1126.652954,
        1233.480469,  1109.057129, 1262.637451, 1222.426025, 1114.077881, 1079.521118, 1315.871460,
        25.527439,    -12.950157,  12.252243,   -9.730982,   1.216844,    6.918438,    -84.480377,
        21.952446,    -39.691147,  -1.106855,   -60.481556,  23.676319,   20.095125,   16.373135,
        29.926575,    2.723335,    -8.592299,   4.832644,    32.788383,   -0.704806,   -24.414692,
        -16.299212,   -92.708130,  11.476067,   -94.705772,  10.444782,   -58.556866,  4.400313,
        5.180459,     -1.715878,   19.116606,   -3.027217,   -9.802612,   -27.114697,  -6.479525,
        -18.925709,   -64.744240,  -12.146260,  -35.869446,  -13.996734,  -69.524590,  -1.974327,
        -86.700760,   -2.894464,   -20.468893,  -21.809656,  -43.903732,  -21.932384,  -55.984951,
        -15.848901,   20.953926,   -24.407637,  1.316622,    -24.814222,  -21.874966,  -17.788546,
        -16.082167,   -15.276554,  -44.896523,  -16.715200,  -28.766376,  -27.928728,  -88.587646,
        -37.161465,   -26.023407,  -18.713232,  -21.299047,  4.459455,    -49.330376,  8.649626,
        -30.318644,   1.244815,    -52.453445,  -5.539411,   24.917202,   -22.337248,  46.044067,
        -26.009806,   -45.751530,  -28.369326,  -41.115318,  11.115568,   -54.573280,  35.413723,
        0.587943,     26.269125,   -65.652328,  21.448643,   -32.325764,  6.728180,    18.638069,
        11.041645,    -35.824966,  26.306482,   -106.234917, 4.216120,    50.841980,   9.945724,
        -28.659580,   39.470951,   5.518151,    30.623621,   5.143940,    31.510086,   26.300762,
        12.896505,    -22.243000,  -7.198847,   -172.007431, 47.265514,   158.157135,  -64.693497,
        51.079300,    -83.586723,  41.134373,   -3.616663,   5.868654,    23.831087,   19.793716,
        7.434254,     -16.144606,  2.387072,    42.046650,   -20.662834,  -155.656311, 40.151752,
        -45.437943,   -125.855690, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    -40.128628,  82.594498,   -108.678261,
        108.668190,   -72.035088,  101.256927,  -119.004623, 121.532425,  2.338854,    70.364975,
        -29.298183,   78.526878,   -13.167599,  84.252472,   -91.582649,  71.321106,   -54.608116,
        107.133080,   -77.966347,  118.841438,  -79.543991,  110.038948,  -59.847439,  90.864899,
        -38.641182,   95.386719,   -59.481121,  110.469551,  -73.835114,  124.002930,  -21.025776,
        71.416260,    -13.214602,  147.599716,  -46.448120,  156.644394,  -65.257912,  143.425934,
        -42.103630,   117.883858,  -55.301289,  141.186905,  -9.027152,   137.152237,  -52.754158,
        160.501160,   -39.412827,  145.160828,  33.848461,   216.522171,  2.826147,    218.699234,
        9.067802,     207.039673,  -6.600474,   176.967270,  -20.041656,  160.332291,  -44.690601,
        176.887070,   -31.195248,  203.020660,  -46.997368,  196.293579,  99.956261,   308.606445,
        80.404709,    306.705170,  98.513100,   283.530121,  65.001068,   245.348541,  73.198891,
        210.424408,   62.728981,   198.634995,  77.223351,   249.498535,  110.382164,  207.027222,
        246.191040,   324.483154,  176.295624,  381.335754,  225.898514,  361.948792,  198.254898,
        301.104919,   109.579666,  303.213623,  30.056921,   300.110413,  -85.648727,  374.518707,
        38.068058,    325.472992,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    50.077213,   5.130350,    9.610772,
        28.213341,    9.564195,    8.345813,    21.445271,   -10.751112,  14.196122,   -7.167418,
        7.920876,     -8.299520,   0.000000,    0.000000,    -4.311521,   -4.676354,   -6.171922,
        -3.574011,    -25.004644,  -101.652344, 26.015217,   -268.404816, 3.939220,    2.001590,
        29.477478,    -8.512152,   18.488596,   -9.990869,   7.853473,    -1.448231,   -0.000000,
        0.000000,     -1.772530,   -3.418038,   4.620698,    6.081462,    -27.032709,  38.688255,
        70.271675,    115.671654,  26.550093,   73.327873,   -0.115815,   16.949930,   -2.234370,
        -60.898239,   14.144300,   21.698132,   30.963745,   4.445799,    -463.671112, 84.678368,
        -26.792397,   -48.842957,  -28.358358,  -25.713257,  16.997547,   -15.065054,  0.000000,
        0.000000,     5.031148,    15.097112,   7.511076,    23.606352,   7.301782,    48.685070,
        -11.295012,   119.169548,  -270.146576, 71.854454,   -124.242943, -12.421239,  -55.873726,
        -21.263020,   -18.406597,  -18.775146,  0.000000,    0.000000,    9.763031,    26.080463,
        3.687180,     63.917381,   -2.747249,   104.723892,  -102.439804, 170.361298,  606.242432,
        -1073.002563, -115.065247, -200.287308, -104.733696, -107.790062, -84.003090,  -44.701042,
        0.000000,     0.000000,    103.592796,  28.286575,   246.913635,  -5.543705,   406.560181,
        -98.693756,   785.008240,  -445.687195, 1.831338,    0.395938,    0.000000,    0.000000,
        1.182259,     3.914375,    2.908588,    5.076898,    2.792713,    3.950796,    1.944692,
        5.370241,     0.000000,    0.000000,    3.943425,    -0.496640,   0.543958,    2.625291,
        1.766088,     -1.276420,   3.292143,    -1.989609,   -0.936412,   4.852849,    9.557511,
        -2.044294,    1.157475,    3.886219,    3.094995,    13.447766,   -3.019153,   -3.961102,
        0.528151,     0.927580,    -3.582473,   -1.394453,   4.774069,    -2.924598,   0.871366,
        8.158025,     -3.812986,   -2.835302,   -0.627855,   -7.165589,   -4.298500,   -9.646560,
        20.000000,    10.000000,   1.887506,    -3.897566,   -9.407274,   -43.902966,  9.951556,
        -12.667027,   13.017472,   3.660217,    -46.125835,  -31.458454,  0.341328,    -16.304560,
        3.116029,     9.243821,    -43.084248,  -40.603939,  -20.152649,  -9.009015,   1.367405,
        10.663711,    -51.500343,  -11.177936,  -6.247286,   2.809514,    3.361112,    21.371902,
        -83.535027,   -7.800147,   -53.258648,  5.205616,    0.000000,    0.000000,    -47.549522,
        -33.133915,   -41.284401,  -34.153904,  -33.419529,  -31.403957,  -11.505657,  -42.899971,
        16.056185,    -53.927898,  34.958855,   -59.014866,  57.691406,   -53.574474,  123.191696,
        -105.860390,  0.000000,    0.000000,    63.958614,   24.182245,   80.724442,   23.549335,
        85.832222,    31.959841,   80.756454,   24.390852,   80.197388,   30.264837,   0.000000,
        0.000000,     0.000000,    0.000000,    -35.205433,  -3.284573,   -106.447586, -29.345966,
        -138.679428,  -58.228893,  -183.954453, -72.708084,  -230.119705, -91.795021,  -13.996591,
        2.033616,     3.242858,    -83.906975,  1.767423,    -58.096542,  -90.798698,  -0.727334,
        -46.187069,   -6.349295,   -22.760445,  16.492201,   -6.411973,   7.335899,    -22.999128,
        32.643822};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

std::string getPstPieceTypeName(int idx) {
    if (idx == EvalParams::kPassedPawnPstIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

std::string getTropismPieceTypeName(int idx) {
    if (idx == EvalParams::kDoubledPawnTropismIdx) {
        return "Doubled pawn";
    } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
        return "Isolated pawn";
    } else if (idx == EvalParams::kPassedPawnTropismIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

void writeSquareTable(const EvalParams::SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(
        const EvalParams::PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < pieceSquareTables.size(); ++pieceIdx) {
        out << "\t" << getPstPieceTypeName(pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

void writeTropismTable(
        const std::array<TaperedTerm, EvalParams::kNumTropismPieceTypes>& tropism,
        std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n",
                getTropismPieceTypeName(pieceIdx),
                taperedTermToString(tropism[pieceIdx]));
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << std::format("\nhasUnstoppablePawn:\n\t{}", evalCalcTToString(params.hasUnstoppablePawn));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTables: {\n";
    writePieceSquareTables(params.pieceSquareTables, oss);
    oss << "}\n";

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    writeTropismTable(params.ownKingTropism, oss);
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    writeTropismTable(params.enemyKingTropism, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));
    oss << std::format(
            "\npassedPawnOutsideKingSquare:\n\t{}",
            taperedTermToString(params.passedPawnOutsideKingSquare));

    return oss.str();
}
