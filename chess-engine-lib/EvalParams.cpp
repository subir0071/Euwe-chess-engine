#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -51.003300,
        122.123314,  294.244843,  332.354370,  305.653259,  361.262543,  411.505920,  590.300415,
        884.272278,  1076.599731, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -15.378425,
        1.781958,    -19.875343,  -11.148339,  -20.928116,  -5.478050,   -35.467445,  -25.040771,
        -4.740421,   23.824373,   5.865273,    -5.583189,   23.208519,   -6.358622,   -19.707909,
        -16.632339,  6.993908,    -1.233413,   -6.493331,   -0.742555,   -7.384742,   -2.914058,
        -10.335731,  -6.479456,   -14.162391,  0.536579,    -2.226635,   1.323132,    24.154430,
        -3.250200,   3.386971,    -10.824037,  16.884819,   2.913052,    1.517178,    11.247595,
        11.228791,   -3.259172,   14.560651,   -12.103927,  -5.042285,   -0.149774,   14.863530,
        5.138851,    -1.361843,   5.033978,    -19.066139,  -3.062935,   28.542788,   31.319517,
        16.112377,   18.283182,   10.118955,   0.877095,    16.423676,   2.602488,    25.076878,
        3.683531,    4.746716,    4.439329,    3.046807,    10.036306,   -19.460861,  4.816896,
        26.431828,   48.864761,   42.850864,   44.486549,   32.888279,   26.276079,   34.532177,
        -3.621067,   35.957794,   -0.011223,   51.229992,   20.697805,   77.700851,   33.286552,
        33.414871,   2.474077,    144.510727,  77.823914,   118.437935,  111.842812,  110.827431,
        70.765259,   172.449554,  74.669113,   83.271622,   82.445229,   41.855968,   107.882500,
        -5.943122,   132.319565,  -101.414970, 110.802376,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -190.298065,
        -60.307865,  -16.551170,  -51.664173,  -53.827003,  -13.793229,  -21.775169,  -27.668283,
        -46.850365,  -13.079093,  -12.283947,  -23.695101,  -43.500301,  -61.986797,  -163.675339,
        -5.287809,   -60.444046,  -55.930813,  -87.723030,  -16.016817,  -32.503723,  -25.574591,
        -1.187982,   -2.673449,   -8.022857,   -2.680050,   13.417238,   -11.550502,  -39.138931,
        -12.977197,  -34.813763,  -39.646442,  -21.360437,  -18.090582,  -2.590376,   -3.663783,
        0.629870,    1.824601,    2.344942,    0.498438,    39.433315,   4.546216,    -4.331133,
        -10.687966,  5.277285,    -12.359326,  -42.102512,  -21.987631,  -8.916608,   -11.273147,
        -15.366696,  -0.550802,   32.120106,   10.966320,   -2.185715,   28.763124,   16.497601,
        23.201492,   21.536577,   16.463367,   4.073946,    15.920400,   -15.115683,  -23.505056,
        -3.404111,   -25.871744,  9.463200,    2.172937,    28.545845,   16.747442,   59.728741,
        16.507572,   17.721258,   18.586121,   58.213593,   10.118490,   -7.958541,   8.750253,
        5.990994,    -24.013750,  -47.565022,  -32.555885,  4.787508,    4.122886,    35.381115,
        22.045807,   72.402824,   11.711614,   91.511284,   -3.829914,   128.519745,  -3.707443,
        38.652153,   1.022787,    -23.129820,  7.708802,    -33.178753,  -33.801712,  -36.289108,
        -23.333784,  19.951422,   -17.801804,  23.790970,   11.788465,   19.183174,   4.052518,
        11.948071,   -24.609701,  -65.978104,  -11.674895,  9.396102,    -17.424944,  -56.363712,
        -97.718651,  -22.195053,  -15.784356,  -60.276318,  -27.754133,  -58.121078,  -14.646796,
        6.118803,    3.274077,    -3.655118,   -23.674200,  -179.584030, 6.394230,    -255.925339,
        -106.573372, -30.679522,  -32.779049,  -35.523087,  -49.053925,  -22.916380,  -9.999224,
        -49.874847,  3.928120,    -16.474903,  -7.856497,   -42.205692,  -13.880667,  -21.232584,
        0.352928,    -35.842369,  -3.768925,   -15.445070,  -25.621923,  -3.367414,   -19.694662,
        -5.415150,   -4.038788,   -12.531768,  6.980108,    -2.903805,   2.903744,    6.972035,
        3.626086,    19.878571,   -13.935724,  -43.710629,  -35.287148,  -8.337303,   -21.025187,
        14.638460,   0.264798,    16.368919,   2.339598,    9.540787,    13.135859,   10.317337,
        14.397315,   25.571428,   -12.924286,  19.435696,   -3.211706,   -5.907546,   -33.692970,
        27.652044,   -18.805349,  15.473394,   -0.250653,   15.884466,   9.954794,    42.491791,
        11.533669,   35.216129,   -3.383482,   13.640282,   7.728754,    19.315285,   13.173875,
        27.130068,   -7.555747,   -15.307792,  -3.209273,   20.178297,   2.457968,    21.996464,
        2.362444,    53.362465,   11.910283,   69.552307,   7.786916,    51.791115,   -9.785168,
        13.131365,   1.370607,    34.167583,   -2.566834,   7.507341,    -3.348210,   19.011452,
        1.223248,    31.102533,   -2.292151,   42.848087,   -4.122590,   62.420269,   7.704954,
        128.067062,  13.154900,   119.485542,  -15.927591,  55.644989,   7.153116,    18.491467,
        -19.848040,  7.756803,    0.819649,    40.744682,   9.867609,    -41.497128,  15.569048,
        42.732063,   -12.981085,  22.556225,   0.711778,    21.270378,   -1.410473,   -10.437901,
        -34.117996,  -28.168186,  18.670143,   77.665596,   -14.912447,  80.817757,   -29.679457,
        -32.091816,  3.198667,    -10.961970,  5.446762,    -5.196914,   -23.778208,  80.897095,
        -5.972943,   -73.900391,  -27.248011,  30.159046,   -23.259216,  15.258826,   -22.162655,
        1.925369,    -8.786017,   1.600249,    -12.955298,  -15.763851,  -13.738992,  -19.790226,
        -13.422862,  -36.562317,  -23.335316,  -12.494165,  -38.752712,  -33.915749,  -11.590058,
        -14.068344,  -10.276906,  -18.176432,  -0.679929,   -17.996382,  -10.447833,  -24.938923,
        -9.285890,   -39.248089,  -12.180991,  -50.940800,  -10.727830,  -51.568436,  -10.146623,
        -9.032307,   -8.905635,   -15.457907,  -3.182361,   -45.839706,  4.662863,    -26.243877,
        -5.239858,   -40.555099,  -0.909566,   -14.028900,  -22.266411,  -36.398827,  -15.831614,
        -40.554482,  -11.377250,  -2.050926,   -5.782260,   6.642550,    -2.714097,   -25.901775,
        5.777256,    -24.201069,  11.834753,   -46.606468,  3.956314,    -48.326622,  7.167455,
        -38.046471,  -11.099044,  -31.720341,  -9.144099,   -13.055254,  12.438599,   -25.549011,
        10.119264,   -44.450272,  13.678235,   -15.173109,  11.080317,   -89.505440,  19.530510,
        -8.043734,   6.222951,    -31.114391,  9.159163,    -56.407921,  9.271787,    -11.398653,
        25.819920,   -19.460693,  18.334473,   -39.031651,  21.882635,   -9.264839,   17.922041,
        -26.778820,  28.594318,   28.265152,   4.905581,    92.846298,   -9.035005,   -31.681469,
        18.782923,   -5.283543,   20.885612,   -18.067408,  26.876257,   -1.169850,   23.795172,
        -23.412098,  29.448675,   -11.328632,  25.375238,   20.353907,   21.450041,   -41.045540,
        29.781176,   30.351311,   13.430619,   12.973264,   0.880866,    -5.459448,   21.533482,
        -13.321531,  23.856915,   -6.303819,   25.591492,   6.375587,    26.062107,   29.374336,
        24.693312,   17.382273,   21.838694,   -73.373932,  26.142765,   25.920380,   -13.602107,
        23.727150,   -63.325432,  14.265683,   -62.025200,  4.525122,    -14.717572,  -8.442205,
        -57.661095,  -35.903530,  -60.212982,  -37.741745,  -153.944717, -69.631561,  -46.288883,
        16.909893,   -22.448265,  25.598774,   -12.451198,  9.957866,    -20.824409,  -4.960383,
        -18.984009,  -5.569606,   -0.458970,   -2.567916,   -38.471771,  -16.147856,  -78.606064,
        17.464508,   -146.327438, 19.930168,   -56.027267,  6.823185,    -0.443669,   -15.028660,
        17.917324,   -14.176949,  -8.055936,   -7.414022,   -24.430872,  -20.100950,  23.148964,
        3.523108,    -57.991905,  5.962214,    -79.056702,  16.935614,   -55.100967,  5.728791,
        -10.570184,  -8.796174,   13.871817,   6.267346,    -11.944158,  -21.978830,  10.783072,
        -3.197917,   -10.501504,  -33.119850,  17.737089,   -25.171795,  26.292873,   9.245748,
        -11.354638,  -14.039467,  6.327098,    -30.759033,  70.060059,   -6.193310,   37.581184,
        -5.544788,   14.331866,   -10.861963,  44.310387,   -62.315414,  100.206520,  1.805941,
        7.339398,    -1.589778,   -7.218337,   17.889305,   -17.375282,  -5.355720,   16.347914,
        -13.059030,  15.606554,   -9.635598,   44.646927,   82.078918,   -49.825672,  40.955303,
        -34.452415,  -10.483852,  47.824249,   33.883053,   -38.432549,  -37.266182,  76.003983,
        -26.184954,  58.626781,   -3.792777,   52.821415,   -10.983858,  50.559948,   -27.692335,
        95.774887,   -9.131025,   49.187996,   10.837716,   59.634716,   30.022888,   40.222080,
        90.155388,   -27.698500,  -15.803822,  54.666607,   -2.053619,   47.642426,   25.665157,
        39.365158,   93.741936,   -14.097789,  27.875687,   55.256683,   57.176846,   25.579605,
        18.045382,   -11.577806,  42.078445,   -8.804101,   -22.361914,  10.573041,   -96.703117,
        4.432518,    -32.819107,  -11.147091,  -66.330757,  -4.637931,   21.329952,   -8.384876,
        33.180855,   -23.289347,  -13.579600,  -17.183744,  -51.285007,  -2.125054,   -64.428963,
        -0.318660,   -84.128922,  7.665735,    -80.420143,  1.538159,    -47.788944,  3.359506,
        -16.879715,  -0.444310,   10.330795,   -13.198591,  4.495842,    -37.456245,  -75.064529,
        -1.497284,   -66.120621,  -0.325761,   -69.885277,  5.788635,    -80.194397,  10.202767,
        -73.173859,  -0.564903,   -55.906006,  -13.977374,  -63.772377,  -3.881499,   -94.208916,
        0.011409,    -57.485439,  -5.688622,   -111.867607, 18.824694,   -122.557686, 16.941154,
        -102.936935, 8.257246,    -97.629211,  10.353014,   -67.734459,  -3.938503,   -55.224857,
        -18.249458,  -105.620338, 20.567184,   -132.457657, 24.269922,   -117.847359, 19.268965,
        -200.237885, 27.562027,   -166.764557, 18.109480,   -114.272522, 13.140155,   -45.504944,
        15.054194,   -27.161030,  -1.732057,   -106.451286, 3.599628,    -71.779541,  15.695024,
        -135.727524, 36.120178,   -136.016693, 27.732035,   -180.075226, 27.461775,   -20.418758,
        25.450434,   -120.078522, 32.975925,   -71.197739,  10.058104,   -113.794960, 17.090910,
        -79.361671,  4.956599,    -68.389442,  -7.052974,   -105.706573, 12.504052,   -105.926170,
        25.082960,   -106.368584, 24.163803,   -34.514214,  31.341400,   -203.263184, 10.845397,
        43.908226,   -55.268387,  -1.514975,   -20.326963,  8.184417,    -18.712765,  -17.130537,
        -16.299824,  -2.740792,   -12.507923,  18.774914,   -18.938318,  -26.523870,  5.325877,
        -242.394852, -70.214607,  0.000000,    0.000000,    90.000000,   90.000000,   78.709984,
        95.532593,   17.344698,   66.702995,   -3.389761,   37.718895,   4.451320,    13.510715,
        3.745698,    12.849194,   12.389693,   20.066286,   12.726817,   9.601598,    -5.050508,
        -4.855246,   -6.783521,   2.889151,    32.204922,   69.129417,   -0.115424,   1.607064,
        -37.301266,  -11.269993,  18.475752,   13.218242,   27.683668,   5.105366,    2.695541,
        12.645990,   10.678972,   19.647160,   67.712669,   16.621445,   2.024556,    0.539509,
        0.000000,    0.000000,    -1.130658,   2.240073,    3.211487,    3.720290,    3.205291,
        3.488794,    2.497018,    3.742452,    0.000000,    0.000000,    5.592966,    0.536826,
        0.829513,    -0.908625,   4.373910,    -2.389258,   1.781453,    0.062982,    3.533214,
        1.175623,    -0.989639,   -3.403174,   4.803482,    0.379707,    -5.384002,   -1.485109,
        11.574709,   -3.814711,   7.054618,    -0.620244,   20.000000,   10.000000,   3.704362,
        -1.466676,   -7.246362,   -39.896507,  10.693589,   -12.572432,  7.750530,    4.129958,
        -48.123646,  -38.825993,  -4.908635,   -12.717349,  5.832924,    8.882569,    -29.932096,
        -41.224838,  -14.353869,  -11.086747,  8.082573,    8.249681,    -52.319946,  -16.915567,
        -3.538649,   -5.514628,   1.619322,    14.271755,   -73.544830,  -0.110001,   -57.345951,
        20.376501};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
