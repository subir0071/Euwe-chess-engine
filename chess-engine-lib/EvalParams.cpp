#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.617383,    1.000000,    0.473357,    1.151970,   3.138300,    0.000000,    126.539955,
        76.902588,   514.312561,  218.621521,  512.738220, 228.129929,  690.069519,  470.887634,
        1857.896362, 433.405029,  0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -29.041729,
        22.817038,   -27.872393,  11.494451,   -36.268177, 17.251291,   -22.642519,  -41.736115,
        -0.845619,   -2.033958,   12.972910,   0.335664,   43.860703,   -11.423434,  -11.310179,
        -16.629213,  -20.560822,  16.160044,   -16.763062, 3.918684,    -12.919211,  3.910745,
        -6.305545,   -3.649848,   -12.582777,  1.269156,   15.304070,   -9.187225,   47.687366,
        -23.081879,  7.348987,    -10.832737,  -10.668014, 13.467465,   -17.842781,  25.255175,
        -8.163184,   4.111059,    13.418392,   -26.369034, -0.560194,   -2.247925,   18.752701,
        -5.866821,   3.084317,    2.799253,    -10.613095, 0.313172,    -18.088676,  46.509983,
        -4.756379,   19.007389,   -17.700512,  16.894669,  7.472860,    -9.841541,   22.117773,
        -3.743084,   1.728017,    -0.650736,   9.900851,   2.093811,    -3.738495,   -5.444614,
        3.304199,    36.514362,   55.008026,   4.506972,   -39.655132,  34.057903,   9.621738,
        -11.081755,  55.113022,   -44.007366,  26.105083,  -23.393377,  170.453873,  -30.209551,
        94.161278,   -47.871796,  349.441803,  5.731537,   237.560181,  28.101496,   70.185005,
        53.735126,   140.524628,  35.308472,   102.384468, 32.122875,   73.582596,   51.173679,
        51.413906,   118.792976,  260.484619,  -5.157735,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -187.866455,
        -20.471203,  -35.106682,  -78.957451,  -58.212563, -6.972506,   -15.385952,  -7.103299,
        -41.172112,  -24.725197,  -20.799440,  -46.891518, -58.054039,  -58.310486,  -44.110626,
        -107.578773, -58.622261,  -44.220940,  -91.041451, 12.811731,   -34.483147,  -21.260960,
        -2.076518,   6.144996,    -3.557774,   -3.135189,  27.958672,   -19.885773,  -4.068335,
        -44.434429,  -52.537685,  -9.908758,   -45.083344, -24.859554,  -18.919250,  11.103449,
        -5.565737,   0.038099,    -0.366217,   -1.742911,  53.760395,   -3.909724,   4.245805,
        -18.585896,  15.370688,   -27.871140,  -65.154510, -5.153765,   -23.935883,  -5.728726,
        -42.690266,  14.801311,   15.625243,   29.047503,  -0.483864,   42.351696,   11.381602,
        30.839756,   23.392902,   6.534890,    12.949367,  2.783858,    1.464279,    -12.526516,
        -24.484055,  -5.033864,   22.537975,   -2.074709,  42.418545,   14.798676,   63.233372,
        16.570206,   20.875969,   23.380293,   66.710007,  8.123357,    -10.729088,  45.995865,
        42.213451,   -18.735729,  -7.236732,   -21.122177, 4.930147,    24.666672,   51.568462,
        25.548630,   82.620468,   -1.684061,   118.753662, -22.268524,  143.216553,  -31.477818,
        19.716061,   22.880808,   -23.036623,  7.066312,   -24.124430,  -15.421686,  -43.213631,
        2.424805,    26.660622,   7.353081,    98.726257,  -9.500116,   46.145031,   -10.383783,
        60.387608,   9.117134,    19.426811,   -55.079437, 38.054573,   -36.807423,  -270.822083,
        11.598933,   -213.216812, 26.424057,   101.648659, -69.823280,  -178.947983, 10.003388,
        173.272308,  -64.603790,  -264.584534, 41.058033,  14.817016,   -15.086208,  -334.986664,
        -4.504237,   -36.315636,  -13.888096,  10.814137,  -37.564606,  -3.157535,   -20.416103,
        -45.206917,  23.177967,   22.540844,   -37.265003, -31.062775,  -24.431118,  -81.984497,
        -4.175854,   5.516807,    -8.620287,   16.297588,  -51.720516,  4.655099,    -17.284622,
        22.441803,   -14.257927,  2.769798,    3.788721,   1.327691,    -13.593346,  -24.952749,
        9.257145,    18.642811,   -35.457172,  -28.597738, -64.170685,  5.602475,    -16.822090,
        11.897109,   7.857326,    4.830934,    -3.886435,  -0.214440,   4.444099,    4.765172,
        8.474493,    12.694020,   -4.295303,   -2.854350,  11.334280,   -11.462417,  -40.597988,
        20.887173,   -10.222914,  -5.303149,   0.226784,   -12.011394,  40.520737,   48.140312,
        -7.822617,   21.615726,   -5.464230,   -4.359168,  4.446770,    -16.593561,  10.724380,
        12.664453,   -17.060427,  -21.912100,  9.183032,   -18.183350,  36.970890,   25.584347,
        -9.380276,   25.075977,   14.533809,   61.375114,  -9.044317,   21.834114,   -4.394680,
        -21.909203,  22.132000,   -58.115200,  29.319529,  -19.775034,  28.002562,   1.024829,
        4.987447,    14.847442,   11.995876,   31.315189,  -13.120314,  38.712261,   3.729409,
        70.489738,   -4.727438,   145.779373,  -19.489700, 25.807602,   6.960305,    -21.038431,
        25.246937,   -50.885223,  22.549757,   3.205150,   10.190725,   11.215030,   13.768756,
        26.513790,   -4.135180,   -10.454791,  14.767662,  -83.391609,  17.668417,   -67.806076,
        29.324249,   -171.588333, 67.832108,   -6.445422,  14.737537,   -144.666733, 27.410236,
        -25.344542,  10.158063,   77.990028,   -1.541159,  -258.484070, 28.940626,   89.378670,
        7.772368,    -76.892563,  2.043496,    27.054998,  -20.863451,  8.362952,    -24.999990,
        0.124635,    -10.729841,  3.071395,    -15.637102, -8.812562,   -15.670534,  -12.015966,
        -7.944942,   -18.720036,  -10.593727,  -11.806866, -68.857002,  -27.788073,  -2.066017,
        -43.571587,  0.209431,    -25.591888,  -6.925184,  -9.532923,   -10.010519,  -24.537464,
        -12.688982,  -38.904457,  -2.617260,   -42.512749, -9.160234,   -38.034103,  -25.587011,
        -16.328938,  1.559442,    -42.460629,  8.360540,   -52.337517,  28.966705,   -18.230032,
        -8.407715,   -53.716801,  8.956963,    -9.645151,  -26.369009,  -46.886703,  -4.589584,
        -36.430645,  -5.992001,   -38.406666,  22.301050,  -67.951088,  36.232655,   -58.073425,
        22.725208,   -26.722433,  13.007453,   -65.460190, 26.372608,   -64.543915,  24.413633,
        -57.476822,  13.889474,   -63.531044,  19.947701,  -19.257181,  20.288158,   -45.760967,
        24.386221,   -62.416382,  32.454128,   -11.592534, 14.739426,   -124.631905, 55.728394,
        -21.213581,  16.241999,   -25.081406,  13.901406,  -121.007553, 36.345448,   -41.255928,
        27.301849,   -60.075539,  34.353031,   -14.551215, 16.571157,   -6.002730,   14.509251,
        -16.221821,  10.046211,   39.012115,   -4.687006,  83.651772,   -6.724134,   -140.610321,
        40.915924,   -7.441968,   15.879044,   8.820243,   17.151823,   27.277239,   12.275060,
        28.089468,   13.682493,   40.582222,   8.198384,   43.425438,   12.436450,   103.671661,
        -4.857164,   36.850586,   -3.726561,   45.267296,  -11.947752,  22.832483,   17.239649,
        7.703288,    25.935139,   12.741092,   28.919304,  43.108398,   19.666407,   62.573524,
        20.586014,   109.570618,  7.601384,    34.384129,  -3.794388,   48.577499,   -17.836424,
        21.728380,   -3.665468,   8.624529,    4.370352,   31.646570,   -21.206335,  37.335663,
        -61.940704,  59.643501,   -105.079979, 5.477304,   -60.567886,  -63.479446,  -41.871414,
        -39.945293,  21.830256,   -16.749876,  14.457891,  -1.234019,   -18.616575,  1.327394,
        -14.063112,  18.759058,   -43.942215,  11.508951,  -34.530388,  15.856089,   -106.259743,
        -34.201916,  -71.414276,  -8.362261,   -30.485563, -33.978539,  2.953421,    -42.948029,
        -2.001223,   -16.944101,  -56.780258,  -8.053354,  -43.478363,  -25.394907,  -7.099054,
        -0.059542,   -24.058561,  -29.541475,  -6.613672,  -35.090992,  26.960361,   -43.057461,
        7.105558,    -62.493958,  0.952261,    -54.262596, 6.616583,    -70.129021,  15.139418,
        -22.542593,  -10.216391,  -76.396828,  44.841934,  -64.794998,  75.212341,   -19.741434,
        28.398495,   -46.967564,  19.499420,   -70.445107, 44.541035,   -94.972023,  32.491634,
        -62.842804,  5.221674,    -61.270084,  25.602877,  -87.670967,  48.089581,   -77.856407,
        75.689369,   -11.302839,  25.479229,   -18.825148, 16.192556,   -120.880600, 68.222359,
        -97.920708,  41.180305,   -109.882378, 73.587372,  19.916880,   -34.941643,  2.775186,
        -15.376303,  -89.126038,  80.849060,   -25.019869, 54.583073,   -101.110245, 100.285873,
        -55.252083,  66.795166,   -105.193436, 72.092018,  -125.790833, 73.703865,   -67.604477,
        24.092419,   -57.678345,  37.839691,   -66.900322, 122.492683,  -16.165152,  62.019592,
        28.139208,   26.581570,   -63.994114,  75.863617,  -140.644302, 99.494064,   23.306902,
        -13.604467,  150.390167,  -55.924561,  -42.474480, 81.698944,   168.281204,  -134.763489,
        -74.544174,  54.981815,   21.991920,   -41.065548, -16.271011,  5.018611,    -83.536858,
        14.760372,   -12.521800,  -20.842728,  -62.438652, 10.189440,   -4.657135,   -19.266325,
        -47.583290,  -21.539745,  -3.795049,   -30.235954, 19.138948,   -20.495665,  18.285131,
        -1.215912,   -10.546565,  16.815226,   -20.024996, 25.800682,   26.690018,   6.145910,
        8.087164,    9.903700,    0.695919,    -21.216503, -32.599857,  -21.660130,  44.569107,
        -21.751129,  86.818230,   -13.778330,  97.196320,  4.190643,    46.545891,   21.807112,
        3.455030,    20.863480,   -7.979495,   10.201709,  -58.190140,  6.544079,    20.370392,
        -30.966463,  32.470337,   3.131818,    182.470779, -5.855886,   178.077301,  2.170449,
        92.705460,   11.322826,   59.623219,   14.262135,  -18.968311,  20.495377,   1.192868,
        -6.592113,   103.787575,  -22.738928,  73.655373,  8.622056,    209.434158,  -0.098896,
        233.534882,  -12.908386,  185.756348,  6.101648,   -16.213799,  35.949097,   124.159065,
        12.704110,   118.859787,  -10.066137,  146.514236, -22.609015,  120.917061,  6.157053,
        224.147308,  3.902715,    233.483826,  0.156710,   190.727310,  8.489961,    76.029106,
        36.097313,   -85.515823,  50.394291,   -90.779037, 20.479389,   -41.275578,  10.540060,
        47.752953,   9.194372,    268.058929,  -29.452215, 251.435669,  -15.333156,  225.260956,
        5.947933,    242.151840,  -0.703061,   17.029312,  32.783730,   -54.408337,  15.548796,
        365.823151,  -62.233288,  104.291122,  -6.737066,  397.059357,  -93.769836,  274.395782,
        -66.084557,  340.099243,  -59.095810,  165.395752, -10.168105,  119.565071,  15.337341,
        -493.894440, -14.093410,  0.000000,    0.000000,   90.000000,   90.000000,   74.337692,
        114.760170,  26.818296,   65.818573,   -3.289771,  41.771847,   -12.542717,  17.502523,
        -14.952118,  26.156874,   19.856762,   13.221139,  14.372593,   5.680216,    67.254745,
        -92.619873,  8.342682,    36.370953,   0.423855,   31.902056,   0.256970,    11.074932,
        0.000000,    0.000000,    1.539041,    -13.597808, -6.966486,   -10.980807,  -31.617424,
        23.986502,   -32.012180,  -138.628296, 14.948874,  80.244888,   9.588011,    -10.837989,
        -30.596703,  2.652892,    27.918442,   6.924343,   39.420483,   -6.799579,   -387.353607,
        29.884722,   88.146309,   -29.713089,  3.179947,   -2.066014,   22.548405,   -4.501460,
        0.000000,    0.000000,    -2.704125,   20.855345,  -9.547219,   51.377930,   -17.907284,
        92.242355,   -18.700258,  161.592117,  287.566833, -120.150261, 77.127541,   -63.900276,
        9.166261,    -27.686747,  -10.618020,  -5.024355,  0.000000,    0.000000,    -21.474026,
        21.784523,   -35.463921,  45.760651,   -39.830517, 63.106686,   -39.090004,  59.879879,
        2.665867,    1.930144,    0.000000,    0.000000,   0.922054,    0.336687,    3.952593,
        4.313848,    3.625241,    2.720415,    1.309977,   7.597779,    0.000000,    0.000000,
        0.000000,    0.000000,    5.382482,    -3.793905,  3.365670,    -3.843771,   11.924275,
        -6.512561,   30.014553,   6.398550,    0.000000,   0.000000,    20.000000,   10.000000,
        5.485838,    -2.606385,   -4.149156,   -53.165287, 18.661331,   -24.870533,  14.385869,
        0.345636,    -59.554562,  -25.589825,  3.358213,   -22.531017,  5.371889,    5.161299,
        -34.217999,  -34.312897,  -14.725582,  -12.422890, 2.407995,    11.542652,   -64.356735,
        -5.326522,   -12.908035,  3.093675,    5.490612,   8.922222,    -69.438148,  -36.523129,
        -50.446293,  -16.199694};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
