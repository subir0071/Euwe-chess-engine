#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    7.517566,
        98.744827,   289.710022,  344.021667,  297.795685,  374.755890,  421.142853,  606.096069,
        871.611145,  1086.106812, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -21.747341,
        13.273528,   -22.226692,  -2.509964,   -19.582848,  0.705044,    -29.598351,  -19.787251,
        5.370308,    24.976168,   16.337563,   -6.968765,   34.894928,   -6.864418,   -10.291095,
        -14.336990,  -5.458053,   7.736703,    -15.840892,  5.142949,    -12.562469,  -0.275686,
        -10.995849,  -5.490072,   -11.699611,  -2.543297,   3.092171,    -2.407293,   29.915894,
        -6.395921,   6.824425,    -11.277328,  -3.388771,   8.174582,    -13.938464,  13.729164,
        -1.306076,   -3.294739,   7.836953,    -15.349800,  -9.452025,   -4.593786,   13.354157,
        -0.755546,   -2.864421,   -0.012289,   -23.421402,  -6.123167,   2.477860,    33.710560,
        -6.259429,   17.950363,   -10.647227,  -2.092783,   1.281731,    -1.109943,   14.651383,
        -2.601188,   -3.579277,   -2.556045,   -4.411830,   3.101804,    -28.538589,  -0.175178,
        -4.960632,   49.292953,   16.562035,   41.222706,   12.388268,   21.256269,   14.555306,
        -11.700291,  19.003296,   -7.196655,   38.773071,   13.430675,   62.862434,   26.989479,
        16.103691,   -1.472746,   106.526123,  81.774658,   76.032532,   112.256783,  79.820297,
        66.805786,   145.379807,  71.151184,   54.693474,   79.125847,   16.984688,   105.506424,
        -25.104053,  133.934708,  -133.701324, 113.677063,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -186.577484,
        -63.186172,  -19.851025,  -59.069149,  -57.410271,  -15.249961,  -24.911280,  -29.983973,
        -51.317539,  -16.484211,  -17.458988,  -25.482864,  -45.956585,  -64.166306,  -163.094086,
        -10.866311,  -62.458134,  -59.412086,  -86.771538,  -19.188354,  -33.980003,  -28.721518,
        -3.639872,   -5.102092,   -10.483721,  -3.986943,   7.709116,    -12.829160,  -46.869301,
        -9.420072,   -42.923637,  -41.728081,  -21.850649,  -22.002611,  -3.116727,   -5.644256,
        0.710423,    0.716558,    2.567053,    0.268420,    40.015305,   4.398200,    -4.076432,
        -10.325149,  5.124479,    -12.057096,  -40.785686,  -21.958399,  -8.347644,   -15.215449,
        -11.685267,  -1.654883,   35.633762,   9.736732,    -0.355213,   28.353249,   17.425629,
        24.712101,   24.366444,   17.178177,   5.642779,    18.358036,   -14.344721,  -23.059256,
        0.465701,    -26.886370,  12.881819,   2.438155,    30.589697,   18.713913,   63.111103,
        18.719559,   19.774494,   20.675896,   62.090748,   11.424113,   -4.780462,   9.468181,
        11.716415,   -23.866388,  -46.563511,  -33.550312,  8.825124,    4.770133,    39.685825,
        23.139290,   77.342636,   12.009646,   93.620422,   -1.777259,   134.361221,  -1.245763,
        41.168240,   6.978442,    -21.100203,  9.063579,    -42.466183,  -34.485981,  -29.794659,
        -21.964010,  22.030014,   -15.409675,  35.180897,   13.014491,   23.255497,   9.153670,
        8.957380,    -20.977343,  -54.695415,  -12.127498,  15.798347,   -17.848255,  -59.861309,
        -106.073143, -16.275642,  -17.858805,  -55.454853,  -25.607822,  -53.330875,  -13.176215,
        28.981401,   2.513705,    -21.848680,  -14.673418,  -177.907303, 9.632606,    -238.470398,
        -123.465622, -34.802876,  -38.751598,  -34.534462,  -55.148678,  -24.517679,  -13.007524,
        -51.172543,  0.999236,    -19.532206,  -8.402392,   -48.978230,  -13.962564,  -25.671034,
        0.148954,    -40.238007,  -5.842895,   -15.277370,  -31.030968,  -3.337584,   -22.365665,
        -6.322361,   -4.953082,   -13.792049,  5.854579,    -5.047183,   2.512130,    4.578528,
        3.780711,    16.714447,   -12.012900,  -44.052456,  -37.372383,  -5.755089,   -24.458353,
        15.986550,   -0.930287,   18.437737,   1.089622,    12.044024,   12.119609,   11.273455,
        14.347064,   25.453154,   -12.225604,  19.888094,   -1.065209,   -3.215061,   -33.784321,
        29.089174,   -20.181585,  18.422947,   -0.452102,   18.252008,   10.743243,   44.163471,
        13.381911,   39.570576,   -1.987414,   16.697809,   9.008922,    20.585070,   15.128364,
        29.978109,   -7.621814,   -9.962434,   -3.392754,   24.024920,   1.755382,    25.057049,
        2.872844,    55.115417,   13.811618,   75.377151,   8.637553,    57.528454,   -7.900237,
        17.913200,   3.907104,    36.501835,   -0.536629,   10.385628,   -3.653296,   27.255610,
        1.464267,    36.505714,   -0.592675,   49.268833,   -2.401444,   69.921829,   9.035762,
        144.137665,  14.239699,   121.649551,  -12.181651,  62.755661,   9.073710,    26.641293,
        -19.067173,  17.907457,   -1.817691,   41.142582,   12.213832,   -30.126701,  15.121322,
        48.941841,   -11.955739,  23.197392,   6.041366,    25.909346,   0.951951,    -3.277104,
        -34.085999,  -30.663696,  17.937134,   82.225349,   -16.343327,  96.526749,   -30.992331,
        -24.178389,  4.204555,    -10.243207,  6.007277,    -5.688961,   -25.323168,  99.192215,
        -5.565869,   -51.885414,  -28.565601,  27.737070,   -26.895464,  13.887545,   -24.995111,
        1.580357,    -9.644690,   2.072930,    -13.728230,  -14.701232,  -14.465004,  -18.193153,
        -13.317635,  -33.603691,  -18.891554,  -9.047712,   -36.098244,  -39.326599,  -14.019196,
        -17.750984,  -11.314905,  -19.940884,  0.581079,    -16.739510,  -10.280680,  -23.445074,
        -7.832823,   -38.716953,  -9.859190,   -48.195980,  -6.749392,   -53.550129,  -5.996328,
        -12.126888,  -11.177526,  -18.706356,  -4.078348,   -46.258179,  5.320456,    -25.631414,
        -4.519541,   -38.495163,  -0.649000,   -10.687637,  -20.165997,  -31.196196,  -12.757177,
        -37.082153,  -10.219316,  -5.922912,   -5.847700,   5.485194,    -2.887335,   -26.210979,
        7.133802,    -20.945374,  12.514940,   -45.942600,  7.549265,    -43.488979,  10.387922,
        -33.016575,  -7.947523,   -25.584837,  -5.393995,   -14.502422,  11.844526,   -29.996021,
        11.363214,   -44.265957,  14.724169,   -15.400018,  13.334288,   -86.796440,  22.410295,
        -4.103378,   10.377844,   -22.688299,  11.343187,   -51.246490,  12.288580,   -15.485857,
        23.831530,   -21.854078,  17.353830,   -36.412743,  21.567255,   -8.350004,   18.912153,
        -27.705524,  32.482887,   34.958733,   7.158014,    93.434059,   -6.104895,   -18.397032,
        19.941622,   -7.547533,   17.632013,   -23.941603,  24.787058,   -6.097204,   24.417009,
        -24.197916,  29.900362,   -9.267975,   27.244265,   16.465776,   24.187143,   -51.167664,
        33.074928,   20.970766,   14.914846,   11.074327,   -1.420767,   -9.779366,   21.366114,
        -16.232862,  24.627306,   -6.982133,   28.469233,   10.253817,   29.048326,   29.601580,
        28.627588,   27.143179,   22.002146,   -64.204391,  25.067110,   26.634377,   -16.852175,
        28.371696,   -67.649460,  15.619834,   -65.168327,  6.277736,    -18.395262,  -7.821692,
        -60.547569,  -37.887562,  -63.774269,  -40.481945,  -149.133392, -83.100143,  -27.142584,
        21.503792,   -22.797525,  26.079292,   -12.284259,  10.225085,   -18.107168,  -5.144910,
        -20.937666,  -6.419484,   -1.191909,   -6.804753,   -37.023769,  -22.590706,  -73.842216,
        18.162033,   -143.904129, 22.038479,   -56.786400,  7.713698,    1.725736,    -14.377656,
        19.188871,   -16.033655,  -5.511401,   -9.397994,   -25.737993,  -20.695061,  21.521811,
        0.223165,    -62.097626,  -1.973153,   -65.673271,  18.696789,   -57.576927,  7.614768,
        -8.476001,   -7.564750,   11.874333,   6.199065,    -13.351451,  -25.743410,  11.602368,
        -6.948213,   -10.149043,  -41.538292,  26.487745,   -29.478617,  31.844305,   10.861854,
        -17.513983,  -18.708616,  17.170561,   -31.431122,  73.217644,   -12.890097,  39.920162,
        -10.716405,  15.610616,   -14.574876,  45.797924,   -63.738766,  100.645576,  -0.354861,
        4.277441,    4.948253,    -16.163027,  22.421928,   -26.425749,  -11.328527,  21.394621,
        -20.002932,  13.908528,   -21.477880,  54.670963,   86.399147,   -60.997482,  54.511200,
        -60.722168,  -10.025260,  43.879223,   36.912910,   -45.081497,  -42.610207,  76.683449,
        -30.974464,  64.651344,   -14.037866,  61.993740,   -14.994683,  49.158306,   -45.831886,
        113.554695,  -2.905307,   29.350744,   11.850165,   48.245625,   36.926270,   36.822323,
        94.014076,   -30.506865,  -15.757420,  58.250370,   2.824197,    42.714481,   27.247063,
        39.945866,   98.995285,   -20.147718,  27.868889,   54.560612,   63.103966,   17.969374,
        -31.560625,  -36.723511,  23.430635,   -27.597006,  -23.858643,  0.620395,    -93.433975,
        -8.337533,   -17.769032,  -23.496094,  -63.342522,  -17.058825,  13.973256,   -26.386894,
        -1.952564,   -48.237556,  -17.533745,  -34.611961,  -31.478069,  -10.898190,  -34.401196,
        -4.295652,   -50.911140,  7.921352,    -36.441334,  3.526391,    -12.413075,  5.390801,
        9.278940,    -4.070261,   11.563615,   -27.004732,  37.028255,   -51.843830,  -46.315392,
        -2.904321,   -22.268040,  6.674641,    -42.008133,  19.158955,   -45.249615,  25.379314,
        -36.716873,  14.441476,   -24.473852,  -5.159458,   -52.057297,  -3.693469,   -50.933704,
        -6.479093,   -37.428299,  0.370539,    -100.911591, 33.871563,   -116.059166, 38.136520,
        -103.827927, 33.049595,   -87.768272,  32.542496,   -44.625526,  10.598453,   -41.341419,
        -10.823647,  -96.943176,  18.607714,   -126.592735, 35.335251,   -119.942413, 37.146206,
        -211.978317, 51.103382,   -183.034180, 42.762314,   -118.878876, 34.245651,   -52.213657,
        31.223492,   -28.119564,  7.540198,    -81.058235,  -3.846017,   -73.684677,  26.807800,
        -133.131470, 52.215794,   -141.297684, 47.715794,   -193.231140, 46.919601,   -34.586479,
        44.487736,   -119.745102, 47.928993,   -56.544422,  16.743853,   -89.976883,  12.062338,
        -57.800354,  8.378374,    -63.123203,  3.390930,    -102.551865, 25.177694,   -98.450027,
        35.126541,   -108.555267, 37.549564,   -24.393145,  43.122444,   -186.168427, 15.347984,
        59.999603,   -68.802528,  -10.629282,  -16.190300,  -1.998895,   -15.290689,  -0.214663,
        -14.388068,  -12.714257,  -5.739564,   17.803545,   -10.762351,  -31.760868,  13.611577,
        -213.257385, -76.888000,  0.000000,    0.000000,    90.000000,   90.000000,   78.589966,
        96.474815,   17.876982,   66.443069,   -3.490142,   37.431183,   2.711007,    12.938396,
        2.876536,    11.890408,   13.899097,   19.500223,   12.529727,   9.645170,    -5.615304,
        -4.386302,   -7.105272,   2.830635,    31.834991,   69.798416,   1.102060,    1.190783,
        -39.930260,  -10.393709,  19.117792,   11.535038,   28.020813,   5.521842,    1.501027,
        13.844356,   8.499334,    20.772821,   57.891449,   23.771526,   2.651118,    1.642641,
        0.000000,    0.000000,    -1.273233,   2.012297,    3.303117,    3.651508,    3.410668,
        3.393612,    2.605313,    3.622991,    0.000000,    0.000000,    0.000000,    0.000000,
        1.555342,    -1.238649,   5.268897,    -2.897812,   1.094895,    -0.815131,   3.520133,
        1.373747,    0.000000,    0.000000,    4.358483,    -0.630879,   -6.219567,   -2.408430,
        11.056671,   -4.835190,   7.841532,    -0.925055,   20.000000,   10.000000,   4.105074,
        -1.424530,   -8.474487,   -42.319572,  11.714926,   -14.761414,  8.170476,    4.544867,
        -46.941208,  -36.900570,  -4.354384,   -13.085939,  6.205494,    8.863153,    -28.350002,
        -40.655712,  -12.814018,  -12.893336,  8.362341,    8.578896,    -52.030674,  -16.185177,
        -4.377799,   -5.002414,   1.832405,    15.675722,   -72.980614,  3.397708,    -56.942516,
        18.794462};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
