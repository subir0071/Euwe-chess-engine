#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,    8.460752,    0.000000,    87.243233,
        96.397507,   383.061371,  273.559906,  391.291016,  294.542053,  504.195282,  551.844238,
        1538.544189, 627.980408,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -26.764997,
        21.629856,   -21.601213,  7.360780,    -27.271471,  7.705183,    -23.335691,  -37.787632,
        -4.875549,   4.009562,    16.427273,   -7.037158,   37.534679,   -12.234422,  -12.902043,
        -10.028589,  -18.317175,  15.375823,   -13.174653,  2.942671,    -9.312247,   -2.327509,
        -8.736894,   -1.500597,   -11.944589,  -5.407684,   12.283682,   -4.948322,   39.776157,
        -17.809328,  3.271580,    -5.905633,   -13.402368,  14.737771,   -12.594037,  19.311131,
        0.013974,    1.988059,    13.932480,   -23.867111,  -1.082310,   -6.879856,   17.656239,
        -5.118037,   0.767848,    -2.012114,   -15.312356,  0.319957,    -12.276366,  43.032455,
        -5.192521,   22.600788,   -9.621558,   9.831052,    4.694519,    -3.091671,   17.573362,
        -6.150320,   0.864806,    -7.313718,   3.864214,    2.474775,    -5.496632,   -0.978977,
        -10.975234,  42.415279,   36.702286,   13.179252,   -1.279766,   16.540613,   15.042390,
        -16.614838,  43.285866,   -27.457720,  57.310215,   -15.937834,  135.810577,  -5.392275,
        81.613495,   -28.130314,  185.940598,  52.373257,   116.977608,  67.006767,   77.979576,
        53.444447,   132.629181,  36.753899,   45.329502,   76.969383,   37.829201,   55.195557,
        22.125790,   115.122833,  56.692188,   49.399841,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -196.887207,
        -17.386398,  -35.070026,  -61.219746,  -38.458248,  -14.156026,  -35.609707,  -13.223050,
        -25.845816,  -34.554562,  -8.773260,   -38.908695,  -55.571018,  -53.553192,  -147.889404,
        -62.996193,  -52.685535,  -38.955452,  -63.350742,  4.100067,    -21.038214,  -25.709620,
        -3.612071,   6.973789,    -6.313452,   -6.379076,   12.161919,   -15.616909,  -23.071543,
        -44.803997,  -32.778568,  -19.731424,  -45.305202,  -31.544468,  -14.481436,  0.390471,
        -4.885947,   -3.528116,   4.521039,    8.614197,    47.592655,   0.022816,    4.230226,
        -17.826630,  5.983932,    -17.681395,  -53.524639,  13.905285,   -19.256887,  -12.139086,
        -24.164476,  6.030975,    20.695980,   18.853085,   -0.518839,   29.231174,   18.160706,
        22.864567,   17.112324,   7.497135,    19.069452,   12.575134,   1.615249,    -0.394232,
        -14.659395,  -12.344238,  14.642784,   3.919258,    47.359715,   12.246933,   57.580883,
        18.384098,   25.182583,   23.626289,   65.226883,   11.557831,   -2.992281,   22.813633,
        42.070614,   -29.885269,  -15.276045,  -14.284781,  11.465204,   4.183315,    46.792255,
        22.433159,   83.049660,   6.957619,    109.815773,  -17.556028,  143.185593,  -20.865084,
        52.614655,   7.512020,    3.343484,    7.761566,    -73.043228,  10.417313,   -26.479605,
        -1.299600,   5.417964,    12.130093,   60.051949,   15.034649,   47.944622,   -9.030909,
        43.497585,   0.018467,    -25.743643,  -28.048941,  48.253410,   -29.127439,  -151.671631,
        -43.832207,  -158.139771, -7.179838,   -26.108934,  -21.677599,  26.914480,   -38.690857,
        -48.705837,  10.287170,   -175.137894, 15.059204,   114.710953,  -24.597733,  -241.958298,
        -66.079735,  -17.065855,  -34.813129,  10.472481,   -46.009060,  -2.945219,   -24.596336,
        -24.317442,  -1.087256,   29.114643,   -31.852444,  -24.447062,  -33.328991,  -63.287785,
        2.432823,    -2.416467,   -15.199090,  9.477051,    -27.187057,  0.769493,    -12.361914,
        15.698170,   -10.927724,  -0.730043,   5.898660,    4.626930,    -20.039360,  -7.886690,
        0.944925,    24.758251,   -37.500908,  -42.052532,  -57.607784,  8.284348,    -17.306236,
        11.084377,   4.695796,    5.652887,    -1.370846,   -1.965689,   -0.848559,   3.338915,
        7.305383,    10.759409,   -7.480416,   -1.372408,   -5.583224,   17.906086,   -42.100861,
        12.002230,   -3.027046,   2.886248,    8.697191,    -4.637934,   19.337065,   29.530281,
        8.760035,    13.197453,   4.079446,    -3.684198,   5.528177,    -12.039202,  19.518629,
        5.217699,    -16.979181,  -11.101015,  -1.652567,   -17.783754,  14.968931,   5.137047,
        7.104768,    22.148199,   22.749220,   44.317211,   4.947246,    1.005980,    3.562118,
        -26.431726,  20.625834,   -64.737938,  31.111883,   -3.546015,   3.759765,    8.944422,
        6.766836,    6.302500,    13.795389,   2.394095,    3.236734,    45.655399,   10.914827,
        120.579399,  0.983732,    99.508499,   -12.349656,  21.272665,   4.201585,    17.469213,
        -10.083735,  -28.322222,  24.611166,   0.197958,    16.169172,   6.383259,    26.568666,
        7.367933,    4.448019,    -31.060968,  20.470171,   -63.228100,  15.738264,   -68.365585,
        16.249826,   -206.217453, 95.334206,   16.541853,   5.526138,    -12.253729,  -1.799076,
        -27.939604,  9.158766,    -18.925962,  10.169462,   -175.351410, 15.768396,   178.833130,
        -6.514182,   -61.228870,  -14.333838,  22.464912,   -27.654587,  8.970787,    -29.016245,
        0.388718,    -13.387388,  -0.566845,   -17.167494,  -6.806480,   -16.266096,  -7.126411,
        -16.021818,  -7.106285,   -22.111712,  -17.870205,  -46.723606,  -44.411190,  4.639085,
        -23.195751,  -7.884821,   -21.400425,  -11.336584,  -10.162533,  -11.335791,  -13.812241,
        -12.959257,  -29.698353,  -3.832617,   -25.511135,  -18.493490,  -42.036861,  -17.166502,
        -14.176224,  -9.391935,   -37.931889,  7.365823,    -37.548458,  10.614626,   -16.510639,
        -9.313101,   -43.633305,  4.842058,    -35.173695,  -11.971273,  -17.999477,  -23.240488,
        -30.275684,  0.587980,    -30.399052,  15.405558,   -37.482975,  22.259928,   -47.325680,
        23.225061,   -24.184811,  16.717279,   -46.641872,  20.745188,   -40.644131,  14.853571,
        -39.359760,  0.509104,    -46.233662,  10.617708,   -35.638409,  24.433626,   -31.952465,
        22.753252,   -44.533413,  31.485651,   -12.641293,  18.680170,   -99.825752,  47.427055,
        -4.212886,   9.892534,    -12.115620,  11.854368,   -84.048241,  32.456215,   -34.012287,
        34.494652,   -19.318157,  25.354845,   -19.116688,  21.953218,   7.886914,    11.078142,
        0.209278,    18.401865,   19.653217,   7.238348,    121.121635,  -14.929903,  -22.638256,
        12.013533,   -13.112225,  21.674105,   -3.243553,   27.400972,   -7.241790,   32.788994,
        15.249947,   24.333673,   16.854897,   22.330477,   47.566280,   10.616926,   69.859451,
        5.599802,    27.135681,   9.163977,    32.006390,   -9.117235,   26.463146,   17.161806,
        -4.333023,   34.000412,   31.223129,   23.823282,   34.561878,   29.920069,   62.331837,
        23.584169,   112.210228,  3.317419,    18.657400,   8.351061,    37.627357,   -85.920120,
        8.967852,    -19.242470,  8.974886,    -35.407822,  23.983507,   -25.901388,  36.168198,
        -73.802589,  31.301668,   -119.927338, 36.309669,   -154.447403, -47.580673,  -34.072227,
        -21.809950,  -2.099067,   -8.589277,   3.073807,    1.797914,    -21.643848,  0.759500,
        -8.867763,   11.390764,   -30.145239,  21.926523,   -76.434181,  24.821909,   -147.008820,
        -7.315825,   -115.762550, -5.856550,   -31.647970,  -28.381910,  9.021321,    -36.984940,
        8.277463,    -17.509306,  -22.101856,  -7.096952,   -28.988157,  -18.448973,  -3.916343,
        6.621721,    -38.385456,  -23.170820,  -7.927093,   -28.010435,  23.715271,   -16.550978,
        -4.932350,   -53.644882,  27.627533,   -50.281006,  26.998917,   -53.670776,  29.960556,
        -10.691343,  -5.364704,   -47.643585,  30.262039,   -43.597870,  51.942276,   -20.960386,
        13.662179,   -37.041779,  12.583848,   -47.911942,  45.601143,   -63.241760,  32.926765,
        -52.313004,  31.502937,   -44.492554,  23.117508,   -60.688141,  68.343872,   -42.649780,
        49.516869,   -11.220640,  -7.148304,   -9.922499,   2.282399,    -69.050430,  48.619370,
        -80.804718,  49.137138,   -81.744751,  80.164665,   30.489656,   -10.525195,  18.828043,
        -29.889494,  -48.684937,  64.408485,   3.805513,    0.393571,    -71.934753,  84.180977,
        -45.772766,  60.538162,   -85.583496,  77.184608,   -81.572784,  69.256279,   -59.743637,
        47.006943,   -29.941755,  -9.758056,   -19.780439,  47.060410,   13.432749,   40.637901,
        24.390345,   18.110832,   -82.182449,  88.679619,   -72.162445,  61.052170,   22.685198,
        1.735489,    205.718597,  -138.154602, 7.038179,    45.484848,   159.300858,  -68.086395,
        -34.577904,  -21.790930,  31.613155,   -47.352207,  -6.247769,   1.874600,    -68.870865,
        0.148853,    1.143888,    -23.940075,  -53.997952,  -5.932576,   4.570484,    -29.118191,
        -28.350029,  -48.984482,  -26.124561,  -26.870481,  -20.388847,  -12.775504,  16.599747,
        -8.686419,   -23.453478,  14.976320,   1.345013,    5.587015,    13.453821,   -2.255749,
        11.000807,   -1.437534,   10.317001,   -35.058243,  -74.635269,  -19.627487,  11.591541,
        -18.977936,  39.898968,   -6.975018,   34.224422,   15.630937,   -18.470091,  26.589016,
        -5.603403,   14.501340,   -18.937916,  2.722254,    -53.587887,  -5.140046,   31.315056,
        -23.190269,  -29.001074,  6.562437,    54.542862,   18.229443,   7.950689,    30.647913,
        7.455510,    27.126143,   -22.426292,  27.526661,   -51.935608,  24.053297,   -27.139992,
        -8.792191,   -30.978830,  1.661417,    -111.716255, 47.054375,   -65.437256,  43.587204,
        -102.652534, 47.018658,   -99.384193,  46.474342,   -84.278198,  44.540009,   10.730133,
        28.480057,   -7.324358,   6.610650,    31.322456,   -3.389134,   20.098364,   25.569210,
        48.923462,   36.553112,   -95.905106,  54.584618,   -163.742737, 63.423187,   -35.813305,
        51.626152,   -153.056244, 66.864113,   -162.969070, 31.485584,   -26.014904,  7.817946,
        -79.540154,  36.444534,   25.389502,   11.900469,   -15.122912,  38.662624,   35.935261,
        27.759619,   -0.777508,   34.988842,   -70.441208,  43.482708,   -311.683289, 49.855312,
        196.596085,  -53.882641,  112.858749,  -17.888441,  131.998032,  -40.033871,  47.473690,
        -33.958447,  172.949951,  -37.162872,  117.550743,  -19.875202,  2.982668,    20.975409,
        -516.751099, -23.111557,  0.000000,    0.000000,    90.000000,   90.000000,   71.723274,
        103.609131,  33.464893,   58.620235,   -6.909834,   37.046738,   -6.800223,   11.064154,
        -4.772375,   12.874794,   20.767847,   12.684539,   12.934271,   7.671770,    46.128914,
        -23.385111,  11.012184,   14.743927,   7.445580,    17.059910,   2.106610,    8.373157,
        0.000000,    0.000000,    -0.384094,   -12.036754,  -8.520027,   -16.058369,  -24.700121,
        13.252064,   -31.918137,  -81.323318,  19.746393,   79.550323,   8.788802,    3.354856,
        -19.512897,  18.291714,   24.445786,   7.555542,    37.816582,   -4.018942,   -454.844269,
        20.238298,   42.058109,   -27.914915,  5.449420,    -7.610806,   13.533081,   -1.741513,
        0.000000,    0.000000,    8.430234,    13.983546,   7.298283,    34.066910,   5.300865,
        62.879280,   4.894648,    114.044907,  220.875626,  -131.571762, 40.478569,   -49.278618,
        -15.852112,  -9.659543,   -19.750639,  1.880000,    0.000000,    0.000000,    -5.426922,
        10.065302,   1.016985,    17.886171,   9.264167,    22.535736,   23.222168,   18.782516,
        2.375349,    1.660009,    0.000000,    0.000000,    0.380565,    2.079047,    3.321653,
        3.995321,    3.342263,    3.030205,    1.379595,    6.007515,    0.000000,    0.000000,
        0.000000,    0.000000,    4.513254,    -2.849883,   3.345710,    -3.963584,   9.717755,
        -6.791437,   22.570274,   3.626404,    0.000000,    0.000000,    20.000000,   10.000000,
        4.935727,    -2.594621,   -7.424227,   -47.848648,  15.370342,   -21.596067,  9.146612,
        4.907513,    -58.930534,  -24.877197,  -1.990582,   -14.756784,  6.893997,    6.220900,
        -30.688574,  -37.766476,  -13.834327,  -12.275976,  3.815798,    10.494832,   -59.236832,
        -7.586464,   -15.501984,  1.088008,    3.586193,    15.961368,   -67.004837,  -31.284296,
        -50.521122,  -13.775661};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
