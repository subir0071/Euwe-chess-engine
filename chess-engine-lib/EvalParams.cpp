#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.674096,   1.000000,    1.774307,    2.675873,   8.010433,    0.000000,    -8.756994,
        86.185722,   297.326294,  318.218445,  371.018280, 405.893219,  368.517700,  556.741333,
        852.950378,  988.965820,  0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -24.381275,
        13.357551,   -19.455151,  -2.302428,   -21.080648, 2.188793,    -24.588207,  -29.326889,
        -3.452615,   23.328112,   13.758970,   -5.376080,  31.719282,   -2.931625,   -5.986443,
        -14.488648,  -9.789891,   7.524367,    -13.203718, -1.380971,   -10.393618,  -2.875531,
        -10.548454,  -4.806691,   -11.489289,  0.056762,   5.432880,    -0.711929,   29.979704,
        -4.174023,   11.055830,   -10.745107,  -5.061512,  5.775800,    -12.292403,  12.386872,
        -1.945190,   -0.653031,   8.022377,    -12.106233, -7.642220,   -6.306054,   9.175984,
        -0.497950,   -1.023633,   1.079976,    -13.999713, -5.931012,   -3.557568,   32.604134,
        -2.348145,   16.014849,   -6.087306,   0.045915,   -0.500352,   -0.915360,   12.151349,
        -1.073712,   2.408967,    -3.774789,   -0.749212,  4.652987,    -19.101622,  -1.472526,
        -2.842792,   43.770123,   24.110302,   26.829901,  9.619359,    12.001149,   33.653973,
        -13.670432,  38.891956,   -18.549698,  31.928183,  -0.071187,   66.788437,   18.632355,
        27.194714,   -10.618312,  89.171349,   66.375313,  54.577023,   94.009544,   76.187622,
        54.679417,   103.186234,  63.263649,   51.219227,  80.643745,   13.625765,   78.652710,
        -29.960575,  114.462479,  7.192104,    70.255592,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,   0.000000,    0.000000,    -210.687607,
        -60.894596,  -29.567142,  -34.842564,  -66.122406, -17.743643,  -19.423676,  -35.973663,
        -31.514908,  -22.349016,  -1.649945,   -29.338856, -45.867001,  -66.735550,  -157.267624,
        -43.378582,  -65.140182,  -59.442188,  -78.257309, -28.980953,  -35.317791,  -31.217957,
        -5.521422,   -0.914350,   -5.568027,   -16.479561, 21.544996,   -10.349545,  -24.929249,
        -30.680658,  -37.808201,  -31.843550,  -30.501560, -23.884516,  -10.026097,  -7.299918,
        -1.089912,   -3.706738,   -3.699600,   2.405453,   37.142166,   7.431869,    0.840945,
        -13.374035,  17.152025,   -8.947041,   -25.457405, -19.436338,  -15.880443,  -17.518097,
        -17.916492,  -6.579913,   27.254244,   9.188005,   1.688540,    26.731581,   20.698400,
        19.417740,   24.494318,   12.482814,   10.418068,  14.755036,   -7.397981,   -20.948256,
        -12.724006,  -18.459837,  6.984737,    6.677072,   32.647671,   16.623232,   57.980049,
        19.600788,   18.878700,   18.522247,   57.760773,  18.842207,   0.505862,    9.346910,
        17.571220,   -25.514099,  -34.361446,  -25.204861, -3.756849,   13.689820,   21.543226,
        27.862230,   70.888535,   19.176962,   89.152840,  -2.638342,   104.284485,  -0.853413,
        30.501623,   1.818613,    -27.260288,  -2.136049,  -13.291177,  -22.617422,  -34.477676,
        -7.848947,   6.958830,    -6.144220,   32.616177,  15.243093,   24.633425,   2.856268,
        33.058765,   -17.887390,  -56.718357,  -2.403220,  6.205015,    -14.394555,  -89.858490,
        -81.676430,  24.936991,   -25.547729,  -30.620861, -20.166349,  -40.743027,  -8.932076,
        47.005379,   -4.605817,   -18.072220,  -34.863499, -176.024612, -4.585821,   -229.672623,
        -98.040909,  6.990520,    -38.396320,  -15.296975, -38.007454,  -7.663760,   -22.217562,
        -33.575176,  -6.947183,   -1.992173,   -13.871566, -24.557596,  -28.505056,  -39.074333,
        -15.260884,  -12.586589,  -10.547004,  -4.595689,  -21.659988,  2.803567,    -14.280299,
        6.116328,    -8.093022,   -4.458916,   4.816251,   4.056170,    -9.057838,   7.592385,
        -5.556552,   23.863762,   -33.371914,  -39.778149, -41.736584,  -5.375048,   -12.804957,
        12.151581,   1.189985,    15.075090,   2.745872,   5.648008,    8.691809,    0.233892,
        8.157871,    17.636013,   -18.583664,  13.694669,  -8.975415,   -19.365662,  -20.006582,
        13.397470,   -12.099246,  5.489534,    1.215237,   1.152210,    12.360651,   25.684647,
        15.696270,   16.699255,   -0.471084,   -5.304829,  5.212793,    3.752915,    9.555464,
        14.247299,   -8.091145,   -20.860422,  -2.447461,  -3.518342,   9.902154,    -8.226729,
        7.584950,    25.472944,   16.071926,   40.922016,  9.053078,    22.573669,   -1.602813,
        -15.273856,  7.367510,    -1.325047,   13.954783,  -13.268554,  -3.210052,   -11.839480,
        11.400462,   3.753534,    10.004800,   9.692999,   -1.013482,   30.765076,   11.371050,
        75.822067,   14.680202,   67.186966,   -9.568317,  18.265413,   9.349078,    -7.999312,
        -16.719269,  -36.682995,  15.127660,   -7.281672,  17.671495,   -68.447159,  29.495510,
        -8.746871,   -3.318775,   -32.124332,  11.603562,  -42.775623,  2.584744,    -65.807823,
        -20.201582,  -124.010643, 41.331078,   36.469925,  -4.668820,   -12.829747,  -13.741818,
        -33.179317,  10.214223,   -79.933411,  17.076033,  -73.660561,  -16.901543,  87.578163,
        1.678372,    -61.415596,  -22.721552,  26.192080,  -22.543497,  13.634363,   -20.585808,
        0.625765,    -11.684435,  -0.219779,   -12.745678, -9.855895,   -16.447416,  -15.062396,
        -12.520731,  -28.794937,  -20.080330,  -10.751082, -36.211025,  -27.650700,  -10.086342,
        -13.847411,  -11.056414,  -10.293891,  -6.234539,  -15.174499,  -11.670235,  -24.104595,
        -6.972168,   -30.307545,  -14.936365,  -38.573780, -12.826544,  -59.321259,  -6.649802,
        -10.707652,  -15.317949,  -18.495964,  -0.301691,  -39.176369,  2.622116,    -25.766209,
        -4.639719,   -39.154583,  -2.681967,   -14.082751, -24.273987,  -12.240184,  -22.898493,
        -37.932384,  0.302707,    -5.583435,   -2.834045,  -12.165484,  0.675719,    -23.639221,
        9.994670,    -29.770031,  6.403644,    -49.889656, 4.971098,    -37.791546,  2.587876,
        -29.759781,  -9.842524,   -36.450947,  -3.402782,  -31.718426,  16.189869,   -38.780613,
        14.891296,   -45.673386,  12.801327,   -22.217503, 14.387637,   -90.772377,  24.143059,
        -5.527988,   0.405254,    -22.044205,  4.926549,   -50.824547,  8.989020,    -27.425087,
        26.285797,   -35.906467,  18.974558,   -40.270710, 20.193865,   -8.922179,   18.447924,
        -42.741570,  32.250587,   15.062667,   9.397282,   85.068275,   -7.311449,   -18.876759,
        16.604839,   -20.226192,  17.889896,   -16.573914, 23.925602,   -18.031185,  27.096098,
        -16.763596,  27.525082,   -14.049186,  25.712132,  15.731213,   21.949394,   -27.932755,
        23.777931,   15.562490,   12.039598,   12.118503,  0.520771,    1.033888,    20.555166,
        -8.514705,   23.402018,   -14.608119,  28.212631,  -6.628158,   32.878307,   35.697102,
        25.226027,   20.028765,   23.361092,   -63.683533, 23.748899,   13.896489,   -22.657375,
        25.627384,   -62.826897,  13.155011,   -36.992073, 16.972805,   -7.994037,   13.840390,
        -50.112343,  3.755006,    -63.482964,  -4.849761,  -126.161186, -42.082458,  -61.870167,
        -2.394252,   -14.783623,  -2.621951,   18.627666,  0.406446,    -15.313446,  -4.201461,
        -15.934338,  5.432942,    -7.831712,   13.546281,  -48.842552,  17.250050,   -115.380272,
        21.799656,   -139.461288, 8.697854,    -67.424866, -16.477823,  2.850818,    -30.884344,
        8.307502,    -20.451170,  -19.444710,  -10.149291, -29.674494,  -14.425715,  17.334099,
        11.592324,   -50.792667,  -1.650226,   -57.272964, -19.837675,  -23.832762,  -20.467749,
        6.118583,    -40.430267,  12.102824,   -16.711061, -7.604940,   -26.739553,  -3.286643,
        -12.716304,  -10.035661,  -26.176908,  7.550221,   -22.967512,  21.174694,   -14.814986,
        -3.388320,   -22.580023,  0.090661,    -48.298561, 70.045494,   -48.039619,  47.459354,
        -28.928473,  11.750690,   -28.774221,  33.906651,  -61.750595,  74.957397,   -21.848433,
        11.845611,   -15.840392,  0.536332,    0.325170,   -10.459858,  -37.073044,  38.490932,
        -46.067032,  24.369061,   -32.008194,  38.586449,  20.581860,   11.145297,   14.059926,
        -29.537027,  -33.224831,  40.947807,   23.841589,  -35.652985,  -42.494225,  61.139706,
        -31.111952,  36.322708,   -48.521164,  46.458630,  -47.163033,  35.848705,   -49.659920,
        70.073425,   -36.721321,  52.476986,   -27.616125, 63.923161,   22.680670,   22.942280,
        57.611710,   -27.116798,  -44.535431,  51.243526,  -37.488693,  54.728008,   -23.999151,
        55.887653,   41.787266,   -2.450581,   -35.629829, 78.300819,   64.739822,   -10.288605,
        -27.812654,  -30.788778,  9.604107,    -25.717287, -19.591480,  3.067649,    -69.536148,
        -5.414441,   -2.475830,   -25.262138,  -53.095234, -16.506071,  5.733055,    -21.104355,
        -28.247702,  -35.237434,  -33.856651,  -31.806337, -17.913967,  -12.941762,  3.741193,
        -8.675978,   -11.504686,  3.381931,    -4.204081,  1.916094,    11.331842,   2.137633,
        19.566950,   -2.557709,   4.440253,    -22.391994, 60.951782,   -35.113895,  -23.734665,
        -11.332889,  8.359241,    -4.122139,   -8.201532,  11.825288,   -10.939113,  20.497765,
        0.557260,    12.200080,   -12.928201,  -1.340799,  -43.084652,  -5.554367,   -41.954895,
        -0.323216,   9.131393,    -1.957774,   -44.809814, 23.448950,   -60.029190,  30.262178,
        -66.229897,  24.682907,   -19.321285,  24.438761,  -29.989086,  12.735980,   -14.334100,
        -9.198058,   -22.473883,  19.875641,   -61.698986, 27.992939,   -59.623837,  30.215828,
        -133.069763, 37.620693,   -104.608360, 32.820877,  -86.341805,  30.131083,   -15.331166,
        26.042114,   -0.581956,   7.298807,    13.127947,  -10.428704,  3.502667,    21.216429,
        -41.113304,  42.299191,   -88.251976,  36.891647,  -113.626892, 38.231892,   -32.239758,
        45.392532,   -73.300507,  45.467148,   -46.610504, 20.990461,   38.670841,   -17.890095,
        -62.381531,  22.246250,   -16.679386,  3.355405,   -25.098843,  18.753004,   -45.493778,
        37.435886,   -27.865923,  30.620068,   -6.371301,  38.695789,   -132.561462, 10.435300,
        121.148224,  -84.781982,  47.541882,   -24.781563, 39.129143,   -5.130181,   35.530575,
        -11.201213,  49.043564,   -27.183664,  60.081776,  -14.946457,  -26.183779,  20.355835,
        -108.703537, -76.400681,  0.000000,    0.000000,   90.000000,   90.000000,   62.830566,
        96.429306,   17.327368,   61.556305,   -4.806472,  36.928062,   -3.881811,   15.651592,
        -2.480982,   13.302572,   15.246977,   14.840747,  9.257212,    9.633162,    -9.034975,
        -12.598348,  -9.535229,   -7.997149,   27.706318,  68.776260,   0.516994,    -0.023577,
        -13.250725,  -15.245770,  18.662296,   9.961884,   28.692600,   3.854177,    6.295608,
        12.638022,   12.846334,   21.799322,   59.438961,  29.577799,   2.978812,    1.102634,
        0.000000,    0.000000,    -0.817522,   1.007542,   2.871576,    2.953843,    2.823707,
        3.340592,    1.893991,    4.368241,    0.000000,   0.000000,    0.000000,    0.000000,
        4.480756,    -1.877863,   1.016848,    -2.502696,  10.770088,   -3.954659,   16.688486,
        0.591637,    0.000000,    0.000000,    20.000000,  10.000000,   3.015080,    -1.301653,
        -6.450740,   -40.594097,  9.367662,    -14.559615, 8.434110,    3.866648,    -41.756821,
        -33.243526,  -2.695161,   -13.106521,  7.087565,   7.740597,    -29.408491,  -37.242683,
        -10.826902,  -10.547076,  5.978614,    9.456751,   -49.111465,  -16.217674,  -6.395424,
        -6.925136,   1.210936,    13.998735,   -68.939201, -12.172428,  -57.321949,  20.591181};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
