#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -109.747726,
        134.173157,  314.579529,  355.771545,  331.114136,  407.674408,  418.299469,  651.484070,
        869.178833,  1188.820312, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -23.460823,
        9.039623,    -23.606470,  -5.180195,   -23.183231,  -12.179759,  -27.303652,  -16.840126,
        -13.466265,  5.889750,    4.160529,    -7.312824,   25.954655,   -8.210509,   -11.849943,
        -26.812275,  -7.204625,   3.802592,    -7.456279,   1.031217,    -21.576191,  1.090539,
        2.236706,    -4.098366,   -8.601265,   -4.382526,   0.443572,    -1.969031,   25.374269,
        -4.900138,   14.161633,   -24.239136,  9.074109,    12.007062,   -2.009666,   16.357210,
        10.806125,   4.853706,    19.129377,   -4.838763,   -9.375772,   5.238513,    12.837193,
        1.279200,    2.293367,    4.653632,    -14.470230,  -3.156298,   23.223375,   31.119085,
        18.222313,   20.852140,   16.508209,   -1.487367,   10.160393,   -2.450001,   21.938297,
        9.116899,    9.615849,    13.475958,   -19.426298,  9.317241,    0.783299,    0.720110,
        14.784598,   51.362350,   48.761528,   42.498272,   1.329649,    38.236122,   18.263348,
        -6.273299,   43.730469,   -16.540499,  45.626915,   14.551252,   78.455597,   16.288242,
        32.026447,   1.355712,    170.980682,  138.227722,  126.909096,  171.820267,  251.194626,
        134.963882,  152.979401,  128.056046,  150.488983,  133.460419,  103.585236,  148.100052,
        -67.040611,  160.889572,  27.109360,   137.013321,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -338.823517,
        -21.765350,  -26.811371,  -50.859112,  -99.117569,  -15.728042,  -41.630020,  -9.285611,
        -47.233269,  -4.952258,   -18.345392,  -32.764168,  -59.165169,  -70.760162,  -236.867065,
        20.530369,   -52.080658,  -59.491619,  -100.720932, -3.662387,   -20.654600,  -30.359489,
        3.178528,    -10.719781,  -13.722018,  -3.829125,   2.083565,    9.952154,    -48.442223,
        -4.050419,   -31.472878,  -25.651009,  -22.275055,  -9.779870,   -12.034274,  -18.615997,
        -8.687481,   -5.041014,   16.663128,   16.638033,   35.882286,   9.095595,    1.238116,
        -13.956298,  -3.421409,   -19.283321,  -42.900948,  27.237246,   -23.078445,  -16.578955,
        20.586136,   -1.902957,   26.387486,   18.986607,   16.064753,   20.046476,   13.116424,
        31.362745,   37.129055,   2.127688,    33.351967,   14.696099,   -6.017382,   -20.488056,
        -12.831610,  -24.763943,  20.950487,   -2.854472,   22.566319,   14.578789,   56.429203,
        29.807236,   20.204678,   19.108644,   66.599762,   8.312828,    -5.251446,   2.822539,
        4.133609,    -16.582659,  -45.999584,  -27.276199,  19.468220,   12.956214,   56.064865,
        3.249181,    70.168556,   9.156842,    83.883636,   -12.549529,  140.626022,  2.384595,
        42.521225,   22.124819,   -52.985180,  -3.344138,   -23.670542,  -28.659676,  -16.297594,
        -22.175739,  4.721769,    -9.208419,   70.490990,   23.041416,   22.879892,   6.622162,
        27.836639,   -20.522457,  -65.067078,  -9.840863,   -11.440120,  -15.473987,  -117.728157,
        -79.392937,  -97.860176,  -56.598660,  -38.998531,  -18.777166,  -52.862476,  -28.337791,
        -2.306063,   14.508441,   -30.222115,  8.724219,    -225.713211, -2.215441,   -95.508812,
        -65.653618,  -74.051941,  -49.199818,  -31.781225,  -49.593487,  -30.967268,  1.152229,
        -55.096256,  18.841618,   -15.290638,  1.494796,    -34.173950,  -9.416878,   -47.360622,
        -19.094334,  -61.721989,  8.223145,    1.646446,    -32.797413,  -12.803491,  -18.611338,
        -5.529055,   -9.047408,   -17.281425,  5.087434,    5.156454,    2.821060,    -5.384722,
        -7.251854,   26.410400,   -19.609358,  -51.105984,  -16.845421,  -14.863418,  -9.314480,
        18.579975,   -3.466966,   16.871660,   2.821451,    14.687623,   18.353561,   8.539798,
        12.602378,   35.837494,   -16.478346,  15.905904,   -25.197697,  9.152313,    -36.609360,
        24.510069,   -31.947536,  -18.432026,  0.232713,    21.707893,   9.116048,    37.209587,
        13.817275,   29.982576,   -0.732575,   16.536543,   -3.215418,   26.414110,   1.563139,
        11.094012,   -34.572182,  1.958648,    3.947622,    24.904465,   4.803784,    16.051344,
        -1.211148,   56.763149,   12.764239,   48.973427,   17.428450,   60.780949,   0.122655,
        1.821849,    15.638515,   7.832491,    -3.353628,   27.963081,   -9.966990,   54.782661,
        -3.793449,   40.266338,   -13.504997,  17.836088,   -6.058707,   73.220589,   12.283891,
        77.559364,   22.044327,   70.532356,   -18.104597,  34.126343,   7.017313,    31.799067,
        -19.917194,  28.272179,   -8.119520,   36.002716,   1.626439,    -48.550396,  21.006199,
        27.096783,   -7.574531,   53.449356,   8.136992,    30.733187,   -1.615759,   -26.176020,
        -29.985172,  -48.278484,  14.096559,   -2.756750,   -27.444633,  60.200863,   -13.385300,
        -50.077442,  8.488594,    -11.867849,  4.522479,    -89.288559,  -16.074129,  6.552149,
        16.314812,   -12.510388,  -27.524334,  31.973480,   -19.373369,  16.853390,   -11.670024,
        5.613961,    -9.007146,   3.259105,    -9.153811,   -12.521770,  -9.035248,   -22.489254,
        -8.680760,   -35.899704,  -12.217671,  -13.110127,  -29.397741,  -18.935017,  -15.555769,
        -9.690152,   -7.532774,   -5.822620,   -11.650631,  -21.129025,  -5.220937,   -15.604234,
        -23.695377,  -41.571842,  -23.237715,  -71.924385,  -9.032969,   -78.059792,  -14.639897,
        -16.781357,  -6.307034,   -19.224520,  0.426554,    -47.189812,  0.230775,    -21.058395,
        -5.016987,   -28.395712,  -10.774870,  -13.356103,  -39.470047,  -14.268449,  -17.960316,
        -34.082558,  -29.264101,  -8.229922,   -2.942782,   0.837136,    -2.686123,   -21.476982,
        3.021577,    -16.923803,  11.017632,   -66.820221,  5.426559,    -53.044189,  -4.263668,
        -58.724697,  4.987101,    -96.062195,  -0.528823,   -17.986275,  11.958551,   -31.922674,
        9.261518,    -49.719410,  8.026632,    -9.981286,   -0.019989,   -94.091537,  9.572184,
        -16.784317,  0.121711,    -46.924774,  17.956682,   -71.938492,  5.874460,    -15.191688,
        26.918430,   -24.325676,  8.206160,    -25.475500,  5.873802,    -20.127478,  6.671278,
        -18.750772,  18.020458,   34.102303,   0.545115,    70.589104,   -9.457343,   -61.842297,
        16.318531,   1.496792,    24.119499,   -39.932106,  29.742630,   3.016457,    20.546265,
        -8.735584,   21.654804,   -6.675819,   13.713308,   7.319540,    23.959885,   5.611395,
        14.780830,   8.406337,    11.955593,   -18.879639,  2.646362,    -31.848322,  17.458048,
        -23.015020,  25.681328,   -31.521708,  25.646282,   -27.135424,  23.025673,   -37.735363,
        26.382656,   -42.558281,  34.778477,   -67.350792,  22.656605,   20.894140,   9.909146,
        14.731054,   8.843673,    26.509279,   -76.067940,  1.385121,    -5.374283,   -2.374610,
        -29.907557,  -60.673267,  -45.399609,  -4.907912,   -158.403885, -102.102821, -23.167002,
        -23.669128,  -2.301845,   11.087952,   -10.630898,  11.495188,   -3.025140,   2.884093,
        -30.198893,  1.264414,    -13.832173,  0.547161,    -60.382530,  -16.237469,  -110.492455,
        -47.813877,  -104.788307, 4.276220,    -6.496274,   10.924819,   -21.424660,  -15.879647,
        15.831584,   -2.474416,   -19.330860,  -11.009858,  -18.430521,  -17.780685,  -13.887543,
        3.038594,    -43.012600,  -1.358552,   -83.421829,  10.536021,   -37.371647,  5.030137,
        -6.114431,   -4.006143,   1.595246,    11.258091,   -1.027999,   -13.702870,  20.076155,
        -7.663543,   -10.486849,  -19.347931,  1.152192,    -23.739380,  75.432732,   4.337242,
        -21.484653,  -29.414337,  36.759151,   -35.045277,  56.662270,   -9.618842,   39.312199,
        5.328671,    25.750895,   -9.245553,   25.908907,   -20.309292,  38.746769,   -13.141337,
        0.275283,    -0.390004,   -30.864761,  -1.973407,   27.656034,   5.683897,    11.670978,
        -10.663369,  26.094767,   3.685877,    42.643433,   65.234833,   -43.410431,  56.214687,
        -87.143211,  -2.932725,   23.114244,   24.609138,   -48.007210,  -33.586742,  64.373802,
        -16.208122,  83.733536,   19.800579,   53.025543,   -41.659462,  78.138016,   -44.416920,
        90.898354,   -19.629196,  53.587959,   3.187313,    55.850456,   19.447948,   37.993031,
        46.562225,   5.703425,    -42.679695,  114.984947,  -28.692776,  70.543457,   -25.433815,
        85.584702,   44.418259,   6.508735,    153.799652,  -100.213860, 92.656876,   -8.410474,
        -0.597692,   19.421019,   31.286282,   4.223553,    -31.381788,  11.349827,   -124.902466,
        30.173256,   -41.964977,  -1.866976,   -70.126160,  13.794070,   22.602833,   5.576152,
        25.481865,   -10.840105,  -11.861108,  15.922320,   41.423332,   -1.238242,   -36.219219,
        -7.159112,   -84.249748,  9.788534,    -91.952698,  3.609190,    -39.396793,  3.369733,
        -9.096262,   3.453746,    -0.356830,   -1.352477,   71.091759,   -47.164036,  -62.998341,
        -19.671728,  -54.459377,  -9.426720,   -60.595161,  -5.457851,   -52.339596,  -1.517197,
        -61.841152,  -8.274852,   -40.318348,  -19.622663,  -59.508221,  -8.960733,   -128.265915,
        -44.006516,  -1.596438,   -30.122524,  -40.406193,  -9.641429,   -86.788162,  -3.949604,
        -85.832428,  -2.199573,   -54.629177,  -7.675280,   -16.647100,  -20.468616,  -74.397301,
        -35.230125,  -26.573605,  -21.149256,  -82.649261,  3.704823,    -94.240707,  2.814727,
        -186.333542, 12.469374,   -113.983223, 5.922282,    -44.999397,  -6.433988,   -27.726725,
        -3.170241,   -40.120392,  -11.794971,  -116.275093, -4.035657,   -78.817116,  4.816211,
        -84.410286,  24.210173,   -93.739693,  16.765862,   -166.373154, 19.046391,   -57.667389,
        24.893087,   -113.882286, 26.332010,   -155.462860, 16.001875,   -107.670746, -9.207087,
        -80.199265,  14.974970,   -76.047958,  4.139130,    -66.385620,  2.670037,    -134.682541,
        26.224934,   -153.400894, 33.614048,   -197.535400, 48.576221,   -313.047974, 10.181559,
        -47.245335,  -27.567823,  40.303459,   -14.815273,  -83.936378,  -8.428870,   -152.614029,
        13.049682,   -204.265823, -5.276251,   57.028774,   -29.515045,  -134.145416, 19.572300,
        -266.711609, -78.810379,  0.000000,    0.000000,    90.000000,   90.000000,   124.926788,
        134.456970,  68.829277,   77.400536,   43.419296,   30.187677,   55.674519,   -3.286268,
        60.581589,   -12.435555,  45.680386,   9.896893,    10.143371,   20.822021,   -10.055553,
        -4.245095,   9.951618,    -3.411798,   9.097175,    -5.171525,   1.378906,    -0.307205,
        0.000000,    0.000000,    -2.649118,   4.898727,    -11.902472,  0.723643,    -23.564453,
        -22.958105,  -3.184472,   -216.834717, -4.309258,   2.068659,    37.201237,   64.104156,
        12.891465,   -9.503181,   -55.453377,  -21.390755,  18.248007,   16.550110,   31.606506,
        2.824225,    -156.489197, -78.301071,  -57.544788,  -50.723911,  2.275181,    -37.879086,
        0.445576,    -11.505056,  0.000000,    0.000000,    14.983014,   16.975130,   22.164120,
        24.650200,   22.641628,   53.768135,   24.767223,   78.444046,   -34.973026,  -109.872589,
        -46.772228,  -73.627930,  -65.936951,  -32.855736,  -32.274467,  -15.488208,  0.000000,
        0.000000,    18.226736,   17.602013,   42.538582,   42.144867,   71.241997,   59.692551,
        100.733047,  69.461929,   97.264427,   52.634743,   2.101740,    0.280542,    0.000000,
        0.000000,    -0.877705,   2.977421,    3.445074,    3.680259,    3.193479,    4.357528,
        2.915525,    2.945115,    0.000000,    0.000000,    5.615586,    0.188698,    0.580038,
        -0.899736,   3.349162,    -2.569212,   1.669111,    -0.314480,   3.577611,    1.258469,
        9.722031,    -1.505874,   3.913513,    3.303038,    -1.089109,   10.138283,   -1.574683,
        -3.526246,   1.071384,    2.744864,    -4.917856,   -0.306695,   11.795715,   -1.586196,
        4.621440,    5.641901,    -2.413452,   -1.028271,   -0.165363,   -5.856501,   -1.535233,
        -12.653854,  20.000000,   10.000000,   5.623209,    -2.200369,   -11.287270,  -36.034225,
        12.301360,   -12.262518,  8.907204,    8.958980,    -43.828136,  -33.718563,  -3.457479,
        -10.800042,  7.222390,    12.178101,   -36.622784,  -39.217655,  -14.604297,  -10.409291,
        6.479847,    8.105220,    -55.913151,  -13.296215,  -6.543912,   -7.388549,   0.027266,
        16.794607,   -75.902000,  -30.809200,  -57.296680,  0.526942,    0.000000,    0.000000,
        0.042670,    10.954230,   -15.014081,  13.568027,   -35.264118,  13.684271,   -56.481396,
        22.356070,   -74.361748,  27.572689,   -100.279533, 19.365332,   -150.038193, 26.835136,
        -207.715027, 10.885006,   0.000000,    0.000000};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    return oss.str();
}
