#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.209377,    1.000000,    0.762991,    1.679964,    6.320265,    0.000000,    1.076343,
        0.199990,    0.166418,    0.371016,    0.575089,    1.000000,    -0.005937,   0.127334,
        0.064202,    0.031037,    218.191772,  -36.727123,  196.701660,  402.951477,  339.637573,
        405.509064,  426.234283,  539.939636,  775.047119,  1502.353394, 1048.176758, 0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    -71.541542,  192.337692,  -78.056221,  190.070892,
        -71.979340,  206.803299,  -70.224030,  177.627823,  -48.966961,  199.120392,  -17.647322,
        198.875580,  8.220877,    185.286728,  -65.051468,  173.890396,  -50.924335,  189.498825,
        -58.581158,  195.277771,  -60.065533,  192.220932,  -33.504314,  199.870987,  -27.625925,
        205.878494,  -22.165112,  203.179596,  -15.111739,  195.562622,  -29.833143,  179.904877,
        -40.637333,  192.769241,  -47.661800,  202.229553,  -31.884033,  193.057938,  -23.839041,
        214.217590,  -32.184742,  216.354645,  -26.902340,  213.143143,  -46.386711,  217.092667,
        -31.490955,  192.847153,  -26.737007,  223.828522,  -32.872906,  230.424683,  -28.111446,
        217.028610,  -0.633032,   206.822357,  2.404150,    208.426895,  -26.692768,  225.114548,
        -70.048546,  220.859482,  -12.727957,  197.169144,  -39.769226,  233.679428,  -32.116135,
        258.490112,  1.361720,    232.973129,  42.957130,   202.460968,  29.887243,   337.874786,
        70.682373,   194.348068,  51.397404,   238.936401,  48.173481,   167.455231,  0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    284.245361,  354.652313,  353.911133,  267.144531,
        356.543243,  320.777252,  357.605286,  359.179138,  383.619904,  324.276520,  384.057281,
        313.650757,  325.492249,  287.156281,  378.261475,  302.834137,  368.544067,  308.373291,
        292.664398,  371.074615,  400.717957,  329.276337,  400.588287,  331.667999,  400.395386,
        325.240265,  432.479797,  318.566376,  417.466461,  313.405029,  355.686493,  336.808319,
        360.939026,  338.258972,  407.818848,  321.372253,  382.390381,  331.880463,  408.122345,
        359.901520,  438.033569,  356.944702,  411.418152,  308.256378,  424.617981,  302.187073,
        353.239105,  312.639740,  369.725464,  369.133728,  381.662994,  361.161560,  424.332581,
        365.782166,  412.585999,  373.644531,  422.409424,  365.223053,  432.024170,  342.451996,
        429.575806,  334.977875,  398.537140,  334.262695,  391.982697,  355.968201,  406.973633,
        370.781952,  437.836212,  360.534149,  495.803558,  344.203186,  420.474854,  366.545044,
        487.975464,  344.003235,  430.195618,  366.536499,  438.524109,  329.129761,  335.863495,
        339.199768,  432.537903,  343.189392,  448.984100,  340.096649,  481.134583,  351.941833,
        499.523590,  337.270050,  543.912048,  330.423828,  447.142639,  341.113251,  434.113678,
        339.028046,  399.752594,  336.256165,  402.004425,  365.522156,  410.249878,  332.752716,
        457.694946,  360.832855,  436.250153,  347.668884,  516.581482,  325.592133,  415.279388,
        327.593750,  253.747360,  356.166962,  219.264313,  313.494446,  344.264862,  334.727051,
        310.921112,  355.624329,  346.322632,  346.215149,  449.728760,  310.150024,  339.823242,
        350.299835,  302.757874,  348.524231,  333.006592,  221.812881,  343.380890,  425.873108,
        391.000763,  401.401947,  371.936707,  428.114014,  390.175720,  443.116516,  373.010132,
        448.082245,  375.152069,  399.272064,  351.814270,  429.688995,  373.947632,  452.799255,
        405.313965,  381.232697,  395.865143,  409.749451,  396.719452,  420.203583,  391.441040,
        439.527344,  405.541168,  429.300079,  416.446930,  419.836853,  455.395752,  399.412201,
        377.501007,  381.663483,  396.478058,  421.289520,  424.119019,  395.763916,  414.080261,
        439.133820,  428.662994,  422.970520,  418.725616,  432.199677,  436.904388,  422.484802,
        433.340210,  394.410828,  425.677643,  383.614624,  412.726410,  396.673096,  402.955078,
        432.773071,  423.876251,  431.604858,  425.402618,  437.864532,  443.786224,  426.042725,
        421.914185,  433.195160,  432.898773,  413.216278,  437.571411,  362.633148,  401.039398,
        427.772369,  427.764374,  445.466705,  426.799500,  428.600555,  460.448944,  423.120056,
        446.728577,  437.301086,  452.893250,  432.966553,  409.857971,  439.648102,  401.661377,
        415.398468,  433.211212,  418.997253,  448.989960,  434.531250,  463.342621,  439.923981,
        497.578796,  389.344147,  494.260529,  414.970551,  511.096954,  412.079315,  447.331024,
        445.017334,  465.497131,  401.555817,  393.341339,  414.726044,  399.451324,  464.552887,
        446.025970,  430.438171,  407.481354,  456.074402,  408.481659,  437.022644,  411.351593,
        447.212433,  439.343719,  423.846985,  358.295258,  360.899139,  364.423309,  449.917084,
        421.704163,  411.482697,  293.060364,  470.240936,  350.113892,  454.760895,  417.783966,
        434.004852,  313.056427,  464.969452,  462.103546,  396.314026,  472.658112,  394.989746,
        552.359924,  759.880310,  543.735413,  760.895630,  535.174133,  770.918274,  544.407410,
        762.583801,  541.377136,  757.839661,  525.107727,  772.035217,  509.260956,  775.603882,
        530.672729,  728.197266,  534.264282,  776.083252,  525.331970,  756.330505,  521.177979,
        776.402283,  525.515015,  777.539368,  542.703674,  763.417786,  547.029602,  747.449219,
        526.602051,  766.155212,  440.881989,  793.725830,  496.871490,  784.904297,  493.322784,
        770.399963,  493.628387,  780.207886,  532.695435,  768.661255,  543.132629,  752.998413,
        531.728638,  761.813843,  546.077942,  759.989624,  543.298767,  750.237244,  495.968262,
        788.372314,  514.243530,  785.299438,  517.963196,  787.132080,  529.740784,  775.338379,
        525.350708,  777.640930,  515.130310,  782.880188,  530.059875,  784.179321,  508.238556,
        784.112671,  528.593384,  793.473572,  544.144653,  780.139832,  548.928894,  781.266663,
        552.126160,  770.977478,  510.900238,  790.119080,  545.129150,  776.481384,  529.451416,
        782.779480,  511.416840,  784.785095,  517.574219,  804.164673,  531.548889,  781.545776,
        541.650879,  780.620178,  555.809509,  774.236816,  601.944397,  758.399780,  572.103394,
        770.285278,  570.822937,  779.652222,  591.301575,  767.109863,  549.349365,  801.752319,
        540.582336,  803.664917,  549.347595,  803.555603,  581.399353,  790.796570,  541.604187,
        808.668457,  612.969910,  777.157593,  572.116333,  790.005310,  635.212341,  779.323792,
        555.464966,  767.182190,  575.071716,  777.231934,  586.482483,  784.693237,  554.774292,
        795.013611,  559.659119,  797.238159,  547.338745,  800.649963,  563.512878,  795.876465,
        576.221313,  795.648010,  1512.479492, 1026.412720, 1512.391724, 1036.415649, 1498.174438,
        1014.759277, 1495.063110, 1033.604126, 1493.504517, 1021.234558, 1453.241821, 1000.856689,
        1396.631714, 1027.773071, 1278.869263, 1224.663452, 1514.553467, 1023.841797, 1504.519897,
        1019.653076, 1511.922729, 1035.671509, 1496.940918, 1059.389648, 1517.632568, 992.914856,
        1509.611572, 999.528687,  1466.309692, 954.414246,  1469.317871, 990.077881,  1507.705322,
        1066.581177, 1502.150146, 1060.016357, 1480.871704, 1117.139526, 1499.946045, 1052.833862,
        1492.770020, 1070.141846, 1509.238647, 1052.867310, 1518.377563, 1006.225525, 1462.089966,
        1093.774658, 1506.546143, 1055.746460, 1506.304077, 1052.960815, 1505.445801, 1038.364746,
        1507.994141, 1057.380737, 1501.089478, 1088.012695, 1495.770630, 1078.560913, 1481.515381,
        1073.948853, 1500.947144, 1061.857422, 1509.833130, 1073.794434, 1478.992676, 1125.444092,
        1480.037720, 1104.121094, 1510.313354, 1076.239258, 1519.607178, 1046.551758, 1513.660400,
        1078.338257, 1509.616699, 1061.978027, 1499.265869, 1044.525146, 1518.597534, 1004.010803,
        1539.202148, 1019.003723, 1510.920410, 1069.784546, 1515.606812, 1051.338257, 1524.561401,
        1050.150269, 1633.106689, 978.369385,  1593.161133, 980.008118,  1531.490112, 1026.495117,
        1496.746826, 1062.827759, 1491.558350, 1092.517700, 1510.497070, 1068.246216, 1536.005615,
        1030.392212, 1563.965088, 1013.344177, 1534.705688, 1058.612549, 1581.744263, 1001.276489,
        1612.899780, 951.609436,  1471.830811, 1135.265015, 1512.875366, 1063.048584, 1494.352295,
        1094.882690, 1497.702271, 1060.539429, 1526.078247, 1078.054443, 1541.313721, 1066.540283,
        1559.121704, 1026.187866, 1467.346191, 1166.003662, 29.622597,   -1.977096,   27.688520,
        -8.291667,   -14.736216,  16.242617,   -87.823402,  23.375650,   -58.374344,  11.090128,
        -67.217125,  35.644180,   28.432402,   19.142130,   35.749878,   9.962098,    4.595098,
        -1.583763,   18.318214,   5.548011,    -23.448875,  -18.673046,  -96.410713,  16.359623,
        -89.595879,  10.573442,   -60.112885,  8.372259,    14.823907,   -2.877357,   26.468758,
        -2.125103,   -40.292160,  -11.436866,  5.325642,    -22.858433,  -89.473534,  -5.525002,
        -48.785748,  -12.293105,  -73.373116,  -2.753592,   -95.156929,  1.126166,    -37.739258,
        -21.189867,  -59.284637,  -19.902758,  -32.638741,  -15.185832,  59.598671,   -37.407337,
        -4.238693,   -27.703209,  -53.726978,  -19.472099,  -43.231949,  -17.634983,  -38.804127,
        -21.267208,  -11.220178,  -37.401730,  -111.732132, -31.343781,  3.076405,    -7.878559,
        14.819692,   -0.390140,   -31.579390,  4.623309,    5.126553,    -11.524752,  -36.655704,
        -23.417770,  59.745224,   -43.171238,  99.205742,   -42.804924,  -38.034264,  -33.151962,
        -45.639759,  28.454672,   -15.196225,  35.264732,   28.346954,   24.244209,   14.675988,
        -0.119092,   79.242249,   -23.404694,  68.440247,   -3.106639,   60.941063,   15.316668,
        -42.057850,  -5.106042,   35.357594,   11.186973,   -20.505865,  33.708576,   44.117008,
        24.884819,   68.822372,   9.956961,    64.266800,   -5.490068,   -48.076458,  -2.873628,
        -63.738049,  42.926556,   274.234436,  -87.866005,  15.337870,   -85.996208,  44.440983,
        3.010387,    -18.174738,  36.993587,   -7.492702,   14.369035,   42.315952,   -7.633682,
        68.550171,   -26.511801,  -506.789520, 101.440582,  -548.402893, -21.792147,  0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    -15.293011,  85.779594,   -60.983967,  115.685738,  -49.890850,  107.254570,
        -171.428391, 166.938858,  36.459629,   52.406921,   12.162865,   64.901489,   22.517584,
        71.780991,   -45.026756,  63.219830,   -6.034483,   107.882378,  -32.349548,  124.269341,
        -29.136921,  117.512779,  -5.942831,   89.606232,   0.956510,    97.639427,   -18.209003,
        118.619644,  -21.629063,  119.280396,  25.873011,   65.083649,   41.443340,   149.372833,
        7.664853,    161.613037,  -20.292797,  152.515488,  10.874971,   119.796692,  -1.608470,
        144.849716,  25.401360,   137.826111,  -8.928198,   163.147018,  36.806225,   136.500916,
        95.492676,   225.320602,  62.220924,   234.677490,  64.280945,   218.920151,  64.289948,
        184.026169,  29.243872,   169.697556,  52.855476,   173.898010,  47.591427,   207.250565,
        51.097061,   185.208115,  167.319077,  320.422821,  145.458298,  330.526489,  153.030365,
        306.660217,  134.227448,  249.379578,  128.493011,  216.543961,  197.135162,  189.365311,
        138.698822,  261.159607,  211.649704,  200.250916,  374.349579,  318.523956,  305.362488,
        390.100189,  282.048187,  393.130920,  273.534332,  317.065155,  205.021957,  311.111633,
        74.006927,   337.809814,  -38.536751,  400.428650,  184.547256,  320.991730,  0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    14.112044,   60.667198,   38.214825,   8.735842,    7.195354,    25.171293,
        14.946903,   13.737808,   31.867029,   -11.911849,  21.174004,   -6.733141,   8.211151,
        -5.591413,   0.000000,    0.000000,    -3.203707,   -1.488651,   -12.791639,  -8.437404,
        -46.715755,  -96.202446,  11.527020,   -243.740051, 7.159967,    8.483311,    34.336521,
        -10.637037,  21.646334,   -12.176571,  5.340552,    3.767783,    -0.000000,   0.000000,
        -0.964290,   -9.735566,   6.083906,    -10.042339,  -53.583431,  53.282047,   38.451260,
        159.323044,  28.145958,   75.224915,   0.806411,    16.259390,   -12.359270,  -45.727406,
        18.632263,   21.950661,   37.898769,   2.209513,    -578.351196, 150.612106,  5.188698,
        -48.803211,  -19.574703,  -24.464779,  17.680639,   -14.256597,  0.000000,    0.000000,
        4.085333,    14.195953,   -1.150621,   31.111097,   -3.663159,   51.524723,   -30.852291,
        136.482620,  -496.277374, 169.752869,  -131.509262, 22.405785,   -38.369030,  -7.925778,
        -2.216400,   -19.093889,  0.000000,    0.000000,    5.298405,    20.020605,   -15.493353,
        58.907219,   -14.012553,  90.377693,   -120.842834, 176.383286,  1035.980713, -1051.734741,
        -6.806986,   -130.182205, -46.728405,  -44.157047,  -55.446922,  -24.826288,  0.000000,
        0.000000,    58.511169,   14.511680,   194.594879,  -90.758675,  290.515015,  -158.022308,
        656.261597,  -597.013184, 2.385482,    0.085605,    0.000000,    0.000000,    2.067800,
        6.051476,    3.012396,    5.727601,    2.530389,    4.377070,    1.394840,    6.964653,
        0.000000,    0.000000,    5.442059,    -0.676395,   -0.439612,   4.395302,    2.088063,
        -0.455386,   1.742284,    -1.122583,   3.395664,    -3.057412,   10.748663,   -2.697602,
        0.789050,    4.307094,    3.853422,    16.404560,   -1.302983,   -5.389112,   0.238401,
        1.315699,    -4.165914,   -0.879250,   6.426821,    -4.060582,   -0.313470,   10.352173,
        -3.881603,   -3.961602,   2.857405,    -9.634846,   -4.533622,   -11.905900,  20.000000,
        10.000000,   2.206979,    -3.896899,   -7.921833,   -51.248837,  11.871791,   -17.187860,
        12.854836,   5.601895,    -54.191597,  -31.532150,  0.282048,    -15.348310,  0.733209,
        12.609509,   -47.596523,  -38.778809,  -22.125446,  -5.591977,   1.680509,    13.190703,
        -68.441536,  -2.447833,   -9.104825,   8.012392,    2.378443,    25.893475,   -92.460632,
        -1.056770,   -60.855129,  25.649540,   0.000000,    0.000000,    -78.827812,  -13.859468,
        -72.479958,  -13.338516,  -66.290390,  -11.046489,  -46.086346,  -25.139606,  -14.950346,
        -39.315479,  20.076031,   -51.129566,  51.636730,   -52.842426,  146.968613,  -96.692436,
        0.000000,    0.000000,    114.999260,  4.425962,    131.892853,  -2.772556,   135.951294,
        8.558196,    131.579605,  3.646377,    129.444550,  16.073416,   0.000000,    0.000000,
        0.000000,    0.000000,    -54.734215,  -0.308034,   -171.936172, -6.519996,   -246.548691,
        -18.485020,  -337.581390, -14.570363,  -426.974030, -17.450344,  -11.580270,  -0.179622,
        -2.884967,   -88.451042,  -0.561403,   -55.651997,  -98.446411,  2.097410,    -37.840935,
        -13.712972,  -18.255953,  20.243410,   -7.659439,   8.560320,    -23.487850,  40.767841};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

std::string getPstPieceTypeName(int idx) {
    if (idx == EvalParams::kPassedPawnPstIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

std::string getTropismPieceTypeName(int idx) {
    if (idx == EvalParams::kDoubledPawnTropismIdx) {
        return "Doubled pawn";
    } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
        return "Isolated pawn";
    } else if (idx == EvalParams::kPassedPawnTropismIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

void writeSquareTable(const EvalParams::SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(
        const EvalParams::PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < pieceSquareTables.size(); ++pieceIdx) {
        out << "\t" << getPstPieceTypeName(pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

void writeTropismTable(
        const std::array<TaperedTerm, EvalParams::kNumTropismPieceTypes>& tropism,
        std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n",
                getTropismPieceTypeName(pieceIdx),
                taperedTermToString(tropism[pieceIdx]));
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumPstPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                getPstPieceTypeName(pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << std::format("\nhasUnstoppablePawn:\n\t{}", evalCalcTToString(params.hasUnstoppablePawn));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTables: {\n";
    writePieceSquareTables(params.pieceSquareTables, oss);
    oss << "}\n";

    oss << std::format(
            "\nconnectedPassedPawnBonus:\n\t{}",
            taperedTermToString(params.connectedPassedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    writeTropismTable(params.ownKingTropism, oss);
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    writeTropismTable(params.enemyKingTropism, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));
    oss << std::format(
            "\npassedPawnOutsideKingSquare:\n\t{}",
            taperedTermToString(params.passedPawnOutsideKingSquare));

    return oss.str();
}
