#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,    -168.215607,
        184.264984,  398.450745,  401.204529,  383.381073,  465.288422,  479.329163,  784.743225,
        1196.815063, 1281.377075, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -18.766981,
        -3.328452,   -18.206163,  -14.133599,  -26.498020,  -3.819198,   -43.521008,  -19.510241,
        -7.720912,   4.106589,    2.488175,    -6.272042,   31.763880,   -11.320896,  -25.946163,
        -28.558613,  4.842106,    0.050224,    3.585120,    -0.108693,   -15.956605,  -0.299379,
        -2.664134,   -4.784060,   -8.517418,   -2.127434,   -4.820369,   -4.399470,   24.068693,
        -6.813981,   -0.447877,   -25.899549,  16.350574,   8.951818,    3.024084,    20.301914,
        2.769061,    -2.546633,   17.569647,   3.587672,    -5.732595,   10.923647,   8.538350,
        4.334835,    -8.654134,   6.445055,    -22.331802,  -2.604595,   33.361961,   27.145582,
        22.613785,   29.396563,   19.470236,   -1.493002,   13.959124,   -0.404854,   19.726210,
        5.756786,    -7.565951,   11.806293,   -27.498732,  12.021175,   -21.129414,  10.790116,
        26.498543,   60.848335,   24.616011,   54.104797,   5.903599,    42.355770,   33.326321,
        -8.305819,   28.097942,   -22.550905,  44.718494,   35.215527,   12.260912,   39.428185,
        -20.216757,  22.635929,   199.908829,  158.250519,  150.783447,  185.485214,  154.217758,
        158.121262,  180.058838,  120.124802,  149.293228,  106.475784,  137.936584,  180.264755,
        -122.185951, 202.216217,  -47.922344,  161.761185,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -781.533875,
        -37.764637,  -36.918983,  -47.923458,  -142.335205, -8.679499,   -22.191236,  0.058556,
        -19.596680,  -38.676010,  2.807393,    -62.926022,  -60.960323,  -91.534851,  -164.947708,
        -29.125467,  -62.466515,  -54.014271,  -65.405426,  3.295568,    -20.049290,  -31.139711,
        5.147170,    -11.205252,  -8.743295,   -30.224051,  -13.686524,  -15.695593,  -9.442658,
        -12.131485,  -21.608177,  -20.284805,  -33.402542,  -19.699011,  -23.367620,  -12.256315,
        -14.510714,  -13.489935,  14.831532,   16.897038,   54.495281,   10.276861,   3.603547,
        -15.253307,  18.919426,   -45.038902,  -39.867275,  4.916120,    -28.459719,  -19.489304,
        9.708674,    15.131514,   24.595238,   24.536730,   9.580712,    22.966141,   16.380714,
        36.773499,   39.295502,   -0.547765,   45.846035,   -13.845419,  1.567279,    -10.755892,
        -16.069620,  -3.447812,   16.009571,   4.547894,    11.511594,   23.318504,   55.823734,
        31.305498,   10.668395,   25.553053,   65.952980,   16.632542,   -11.279760,  4.177991,
        -5.947138,   4.973589,    -13.639733,  -38.308731,  -6.277640,   9.303589,    44.771461,
        13.809282,   71.310471,   25.275732,   68.945381,   -20.708605,  134.698669,  9.628189,
        28.212231,   13.481251,   -54.489059,  12.136999,   -70.373840,  -7.905113,   -7.504939,
        -25.703165,  44.072514,   -14.229910,  53.839115,   22.204205,   23.767570,   11.330672,
        33.947155,   -14.220900,  -42.398930,  -23.946814,  -95.496407,  -21.442705,  -13.548434,
        -49.242920,  -134.525635, -19.688671,  -125.983818, -16.209446,  -82.457420,  -29.783812,
        5.571015,    11.863836,   48.305752,   0.963641,    -240.238205, 35.891251,   -129.741791,
        -216.761002, -78.559845,  -44.512630,  -59.523624,  -39.052143,  -31.221371,  -4.776641,
        -43.289509,  25.552820,   -18.461021,  2.872561,    -27.229544,  2.562428,    -13.051561,
        6.323812,    -113.869957, 28.225994,   -2.604622,   -18.163866,  -14.145142,  -23.911173,
        -2.855362,   -10.651858,  -16.708866,  12.003717,   4.294245,    5.391160,    -12.942160,
        0.160945,    30.286650,   -20.533201,  -55.023285,  -9.548221,   -15.395605,  -5.984166,
        17.770472,   -10.400758,  14.529531,   0.138148,    11.590609,   10.925868,   17.475233,
        13.269109,   39.483299,   -10.961654,  15.898268,   -31.870699,  -6.746059,   -42.055862,
        23.595964,   -64.028290,  -11.006683,  0.994415,    19.408796,   15.998946,   41.669338,
        10.365425,   33.062534,   -9.636415,   17.669683,   -5.697423,   39.038914,   6.622132,
        13.789217,   -34.010757,  -22.714897,  -11.211366,  16.454657,   12.032513,   29.606791,
        -9.329169,   64.520187,   10.208196,   41.208530,   16.002346,   59.977734,   18.923244,
        2.732371,    4.778640,    -13.585877,  -1.249020,   -5.936446,   -7.459880,   33.678055,
        0.704695,    46.879711,   -12.008218,  43.805466,   -15.526540,  44.407177,   28.334255,
        122.288185,  22.092161,   125.176018,  -31.887842,  59.935062,   -15.803023,  5.669335,
        -55.503803,  -17.342869,  -3.575364,   -12.682025,  -4.712193,   -34.364140,  39.552715,
        14.163298,   -10.859862,  45.848789,   2.107883,    38.690620,   15.099182,   39.253044,
        -38.235497,  -48.714767,  3.665580,    -75.865219,  -34.899895,  -11.364560,  -3.052520,
        -267.147125, 8.780814,    -88.286552,  13.860930,   -33.336243,  0.898040,    8.609226,
        11.806746,   115.235909,  -23.992037,  38.893513,   -20.381529,  23.297873,   -9.014014,
        3.433858,    -8.371066,   9.418122,    -13.617366,  -9.012465,   -20.229860,  -27.496063,
        -11.846082,  -48.283993,  -13.996661,  -29.757790,  -27.584454,  9.967834,    -18.360149,
        -28.922102,  -9.079388,   -21.913700,  -3.047009,   -15.693194,  -14.561222,  -1.736952,
        -33.242970,  -42.921333,  -15.692737,  -83.137573,  -2.383560,   -146.442307, 15.365778,
        -23.189463,  -6.788539,   -7.242390,   -6.421635,   -39.404259,  1.315050,    -19.059778,
        -7.257538,   -16.098875,  -25.842770,  -24.210220,  -42.062637,  -19.481207,  -17.957607,
        -64.972153,  -25.626234,  5.667173,    -9.657732,   9.567131,    -5.609852,   -1.161083,
        3.782265,    -20.085020,  4.196648,    -58.794155,  0.438454,    -59.113293,  0.360743,
        -48.504585,  0.765366,    -116.187515, 8.555704,    -8.339872,   12.455950,   -16.195738,
        11.209888,   -55.483978,  13.185562,   3.086588,    -8.449373,   -93.371834,  9.701401,
        -22.242546,  13.244652,   -46.271141,  15.661331,   -86.262589,  18.725042,   -30.368372,
        30.126146,   -33.300293,  12.441721,   -34.549892,  10.650351,   -26.024929,  -7.407212,
        -31.869246,  11.191767,   -26.894171,  15.000919,   87.778183,   -21.428480,  -61.682526,
        16.027414,   15.207153,   23.958647,   -33.634453,  29.613665,   -9.036336,   23.921484,
        -20.422678,  30.701197,   -28.373014,  22.898153,   20.457140,   22.382540,   22.367413,
        12.403797,   22.442028,   8.377516,    -2.470011,   5.909882,    -16.909279,  15.602324,
        -61.463543,  28.290632,   -24.220106,  32.434402,   -6.243713,   19.680674,   -53.174202,
        43.366070,   -22.076073,  38.358719,   -74.543831,  19.150160,   -5.826823,   11.612179,
        -7.126482,   12.907974,   22.335676,   -116.853966, -4.055617,   -12.694752,  -12.191348,
        -24.071339,  -38.645439,  -114.648170, -40.276546,  -145.919907, -180.066895, 167.536316,
        -9.838054,   -46.559151,  16.446714,   -35.241127,  5.572462,    -25.184517,  -2.116660,
        1.970213,    1.064420,    -50.602913,  -13.724185,  -66.545967,  -35.669891,  -103.100685,
        -30.460203,  -209.473495, -12.146174,  42.525894,   10.654717,   2.178199,    -19.350504,
        41.339092,   4.834928,    -31.484276,  -5.218993,   -32.205803,  -12.576377,  -13.133919,
        6.680624,    -24.666912,  -8.366199,   -48.896515,  19.862020,   -73.437225,  19.661703,
        22.763922,   -2.758776,   16.790979,   23.755896,   -38.112953,  -2.393469,   26.286608,
        3.360670,    17.978533,   10.075093,   -83.236038,  0.151517,    -29.213829,  -1.321196,
        27.728914,   -27.244371,  108.086227,  -30.308834,  95.131218,   12.197064,   46.230885,
        4.273351,    61.858463,   7.454072,    44.015949,   -15.489150,  56.092724,   -1.678702,
        -15.616905,  -11.427756,  14.116969,   12.204320,   21.216839,   7.460855,    32.075798,
        4.531709,    29.273939,   20.209158,   60.173073,   62.340527,   -17.574661,  99.241699,
        -132.754761, 15.112462,   6.329166,    39.279598,   -35.389809,  -15.262164,  89.492935,
        0.224096,    95.423370,   31.958845,   32.196129,   -8.049201,   71.368034,   0.126153,
        33.869667,   -5.918463,   48.068363,   41.805439,   -29.729141,  10.994554,   63.012699,
        99.046051,   -54.080292,  -11.395865,  87.986252,   1.494249,    66.930565,   -9.126632,
        83.703995,   -44.493069,  136.083313,  125.623001,  -124.210274, 11.482080,   97.847191,
        23.493862,   4.189664,    11.088778,   -2.025937,   -42.354347,  28.594707,   -121.405457,
        42.519348,   -37.422421,  3.100243,    -55.327698,  17.463051,   13.385521,   11.983328,
        1.626696,    1.677405,    14.384660,   11.498992,   -64.979858,  18.652916,   12.378071,
        -8.620291,   -70.207710,  14.837214,   -66.926079,  5.202154,    -27.523575,  5.584001,
        6.871593,    5.763431,    3.952016,    4.504436,    64.010567,   -31.386829,  -5.263069,
        -28.248444,  -6.919238,   -13.854122,  -35.327358,  -8.692389,   -16.017929,  -6.610202,
        -51.239693,  -5.811763,   -19.765867,  -19.094210,  -32.248001,  -20.513454,  -2.384759,
        -33.415108,  49.648422,   -39.255985,  3.383823,    -12.675543,  2.017716,    -10.246705,
        -7.947367,   -7.927586,   13.521676,   -13.751154,  20.415520,   -36.481998,  -32.600800,
        -47.153194,  10.848594,   -27.677248,  40.908997,   -8.146430,   16.631975,   -15.494996,
        -78.655098,  10.737489,   19.794876,   -4.353103,   75.122627,   -29.839611,  58.180721,
        -12.061546,  89.028923,   -33.602875,  23.201035,   -5.649546,   48.485172,   4.808177,
        26.214083,   16.550781,   -31.705538,  11.947022,   -61.291893,  16.143173,   50.135975,
        27.739508,   0.020461,    28.472754,   50.605244,   7.719398,    -61.856918,  -3.485684,
        -0.836540,   26.285860,   87.410957,   6.580400,    -17.889244,  10.765301,   17.197672,
        3.506540,    56.602070,   9.013238,    -92.668785,  39.884785,   -194.763702, -2.542407,
        33.055214,   -22.510937,  -6.064774,   -6.824008,   -29.190395,  -1.117180,   -27.074474,
        7.524089,    -89.976082,  4.106508,    31.652012,   -30.076736,  -39.878563,  3.482980,
        -271.537598, -50.557007,  0.000000,    0.000000,    90.000000,   90.000000,   135.370697,
        127.833427,  70.648445,   68.769356,   48.973217,   14.731812,   59.245045,   -23.921818,
        63.840801,   -31.915773,  59.580341,   -8.085183,   11.773722,   24.385677,   9.058072,
        -3.332999,   29.204500,   -3.856670,   21.486607,   -2.843473,   11.144651,   -3.683437,
        0.000000,    0.000000,    -5.208444,   -4.846630,   -14.859535,  6.918487,    -37.957336,
        -43.573238,  139.145096,  -267.930695, 27.234869,   -2.820220,   39.337223,   -10.674111,
        27.819550,   -4.281198,   15.364361,   -5.913274,   -0.000000,   0.000000,    -6.405127,
        -16.673637,  -13.395774,  -9.676491,   -42.849430,  20.335409,   149.333954,  -8.676487,
        45.114372,   79.510941,   12.121410,   8.779087,    -52.989120,  -44.716881,  17.764872,
        15.794178,   33.440548,   5.155818,    -357.803223, 46.526176,   -53.499676,  -42.161789,
        -9.464927,   -29.585300,  9.617235,    -14.091072,  0.000000,    0.000000,    -0.193852,
        22.106953,   6.249889,    36.065296,   -0.359450,   60.580120,   -14.451229,  143.928635,
        -142.867340, -28.552660,  -70.343163,  -61.400845,  -46.706642,  -38.946629,  -31.287771,
        -22.380844,  0.000000,    0.000000,    19.841526,   18.944920,   27.759979,   51.794334,
        4.321298,    98.228149,   -53.374699,  133.780090,  -12.578849,  -961.458435, -438.570282,
        -67.130379,  -306.890839, 5.000442,    -130.308365, -57.454941,  0.000000,    0.000000,
        148.888779,  -6.089798,   312.151031,  -10.829183,  578.294800,  -170.365311, 922.753906,
        -437.610291, 1.566188,    0.315704,    0.000000,    0.000000,    0.416925,    2.709648,
        3.401092,    5.864378,    4.006329,    4.279860,    2.274339,    7.263423,    0.000000,
        0.000000,    7.111163,    -0.549043,   -1.833597,   1.596818,    1.410123,    -2.995285,
        3.063132,    -0.702641,   4.509302,    1.293160,    13.111035,   -3.133328,   4.485966,
        2.997796,    -0.255763,   12.593063,   1.814112,    -5.160359,   1.124350,    1.330706,
        -4.846898,   -0.380874,   13.442244,   -2.756364,   1.373985,    5.323194,    0.314892,
        -4.560950,   4.259541,    -7.795994,   2.250782,    -15.492299,  20.000000,   10.000000,
        3.576832,    -2.816410,   -10.479432,  -44.326023,  9.409716,    -13.856676,  8.573501,
        6.383501,    -45.627472,  -33.671093,  -3.134508,   -17.122643,  6.301360,    11.664164,
        -42.912365,  -46.287365,  -15.650831,  -19.120182,  6.120645,    10.299283,   -49.681629,
        -16.645287,  -6.857001,   -9.580222,   -1.812535,   34.079006,   -75.383881,  -34.825462,
        -63.682991,  5.165432,    0.000000,    0.000000,    -3.617464,   12.119550,   -14.495625,
        16.906790,   -38.615040,  15.361398,   -75.583206,  27.925652,   -90.407196,  32.102066,
        -128.536667, 29.718834,   -158.254318, 19.178282,   -272.297180, 18.389984,   0.000000,
        0.000000,    0.265457,    0.204968,    0.295322,    0.979931,    0.854939,    1.000000,
        1.000000,    1.000000,    1.000000,    -0.003521,   0.112494,    0.107589,    0.043385};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    return oss.str();
}
