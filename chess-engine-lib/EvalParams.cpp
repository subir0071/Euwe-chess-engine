#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.029219,    1.000000,    0.592578,    2.183934,    7.688072,    0.000000,    0.268576,
        0.159757,     0.384119,    0.680360,    7.345517,    7.355375,    1.893484,    1.000000,
        1.000000,     -0.005714,   0.095480,    0.079449,    0.040263,    256.374390,  -82.133324,
        232.609329,   484.007141,  495.199493,  511.623779,  567.359863,  655.630188,  1006.346313,
        1538.795410,  1611.466919, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -50.555401,
        -9.985342,    -56.823811,  -17.282257,  -44.586857,  -2.811858,   -41.291607,  -31.219906,
        -9.076840,    -7.101681,   24.972658,   1.804665,    53.838730,   -15.617475,  -29.835636,
        -29.420277,   -22.385786,  -12.767142,  -32.256958,  -13.649656,  -31.805763,  -13.287536,
        5.096149,     0.457374,    7.930868,    8.779654,    22.746531,   6.809096,    26.318277,
        -3.221030,    15.898149,   -22.683182,  -10.247558,  -4.330374,   -21.727974,  -0.480458,
        0.817500,     -8.582862,   17.038279,   20.682928,   10.770389,   20.426592,   11.885945,
        16.421398,    -4.592337,   15.527931,   15.203096,   -9.449288,   12.612707,   30.186865,
        1.039745,     28.047409,   8.577689,    12.723072,   49.821365,   3.382331,    45.753780,
        6.432235,     11.471114,   22.348070,   -31.895992,  20.902840,   30.058535,   -2.964275,
        7.324327,     23.978188,   0.920036,    74.846138,   66.144821,   21.824333,   141.729630,
        -0.320819,    112.124222,  172.186951,  138.866547,  0.692548,    115.676117,  20.556353,
        87.968811,    -24.306894,  243.326828,  189.708740,  189.534241,  251.856491,  216.905350,
        220.074539,   254.940628,  141.765930,  158.684982,  138.851059,  66.022491,   142.864838,
        -98.957878,   221.676346,  11.846371,   169.533218,  0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -136.779755,
        -18.770582,   -61.287422,  -112.022133, -63.407993,  -50.545834,  -55.137569,  14.999669,
        -37.718449,   -16.844604,  -33.026718,  -36.673870,  -62.821304,  -36.208611,  -154.472214,
        -84.238113,   -78.377785,  -70.212646,  -163.128922, 18.721941,   -6.423016,   -21.849579,
        -3.273296,    -6.979378,   -5.850829,   -20.417095,  8.851061,    -31.556141,  7.631835,
        -37.331573,   -66.693024,  -24.253643,  -30.049006,  -41.627720,  8.922199,    -11.896086,
        -21.724251,   -17.329439,  13.711082,   30.850183,   38.802811,   26.657183,   6.790795,
        -28.100773,   23.799803,   -47.769970,  -58.318188,  -46.348595,  -25.716438,  -2.950286,
        -4.674297,    9.311235,    35.698669,   27.191498,   14.688368,   40.180328,   29.560368,
        30.087568,    32.317451,   5.716811,    29.070583,   -6.747460,   -12.921548,  -9.678351,
        -9.530378,    26.671135,   18.459074,   16.321686,   25.170481,   39.782005,   117.082611,
        17.016264,    23.052982,   38.684044,   108.148666,  8.771259,    21.883955,   23.788784,
        48.307892,    -24.305906,  -84.539551,  -49.951309,  62.920494,   4.683572,    52.907925,
        3.527464,     87.208961,   33.828217,   121.283737,  1.964547,    202.864639,  -13.503838,
        42.610828,    9.220599,    12.781464,   -21.918783,  -32.939846,  -3.089219,   -23.207642,
        12.008483,    17.831099,   -25.137150,  51.154442,   27.681557,   40.388851,   14.015414,
        163.363068,   -19.509338,  19.591377,   -5.393923,   -218.884720, 8.612444,    -242.621689,
        -120.367134,  -94.299271,  -53.844986,  -116.298073, -25.373108,  -61.703892,  1.726833,
        64.809174,    -57.547123,  -103.122253, -5.831120,   -52.981426,  -30.156731,  -134.104950,
        -134.172714,  -33.541870,  -37.187195,  -23.431721,  -40.906464,  -41.996025,  1.384708,
        -23.230444,   18.472876,   -29.885744,  13.684795,   -35.715672,  -28.836277,  -57.641533,
        -25.860126,   -21.957241,  23.603344,   -0.317672,   -57.636795,  -3.932385,   -30.789516,
        -6.938131,    -11.774281,  -12.886043,  12.495846,   3.304884,    9.656487,    32.974628,
        2.715187,     51.931366,   -34.908657,  -46.796951,  -56.144806,  -8.426955,   -20.260933,
        18.469345,    -26.705830,  12.927705,   12.981880,   30.043167,   -2.930845,   16.031338,
        8.466781,     43.716785,   -0.158426,   32.049168,   -21.960234,  2.605582,    -34.989666,
        1.025244,     -39.612782,  3.727593,    2.703987,    22.835512,   0.199380,    26.276348,
        13.455934,    49.588654,   -0.027066,   20.019131,   9.209429,    38.741287,   1.943897,
        24.695011,    -52.898888,  3.209648,    -10.169191,  19.969099,   24.280512,   33.593090,
        -0.944749,    67.926170,   -3.164511,   50.949947,   23.475304,   75.700775,   4.372128,
        -3.563635,    24.410835,   -9.913960,   -18.030224,  29.439636,   -12.441851,  47.491589,
        15.941639,    70.711128,   7.135391,    105.470131,  -38.264515,  73.045975,   3.256157,
        115.763062,   -0.257766,   58.266418,   10.646314,   66.673973,   -18.395239,  -15.289999,
        -8.460274,    3.689707,    28.022100,   54.311333,   7.869533,    -1.444782,   17.560686,
        36.397751,    12.318522,   3.373397,    16.290916,   48.124931,   3.447736,    -66.726891,
        -58.694954,   -27.298807,  -17.083258,  -38.496498,  1.951986,    -77.201271,  22.078604,
        -115.571312,  28.791508,   -43.577236,  5.388574,    -67.622749,  11.272129,   105.989723,
        -55.525002,   217.425537,  -60.132988,  15.082458,   -10.237989,  8.225895,    -18.649843,
        0.291071,     -6.314715,   6.489086,    -14.006536,  7.557567,    -23.227001,  -17.321066,
        -2.808346,    -43.083050,  -1.901922,   -32.616142,  -29.078133,  0.478363,    1.903961,
        -7.457326,    -20.778177,  -12.544325,  -9.300836,   -7.303726,   -2.739906,   9.476299,
        -14.370977,   7.025386,    -34.729843,  -20.693502,  -15.360875,  -113.052139, 14.686460,
        -38.674835,   0.739867,    -53.607594,  -14.422500,  -37.433201,  -0.894450,   4.951007,
        -11.849266,   5.111611,    -19.675377,  -6.153147,   -13.406895,  15.842173,   -13.245177,
        -15.031630,   -24.051334,  -44.717819,  7.583139,    -16.599754,  7.418462,    -9.962826,
        8.025925,     8.004957,    -6.110876,   1.822149,    0.153987,    -25.359577,  7.148188,
        -8.335087,    18.295977,   -40.363964,  10.061379,   -5.847819,   19.884260,   23.910847,
        4.477633,     22.207222,   5.068318,    40.821568,   -6.730700,   -31.146126,  15.618745,
        24.042446,    -3.371470,   23.884598,   -0.281273,   -36.202362,  6.687001,    14.415277,
        26.857229,    0.282611,    4.598552,    15.376066,   9.567367,    27.007782,   -6.555246,
        79.024605,    -13.987474,  24.007832,   -0.682133,   40.403923,   10.897665,   67.815552,
        -6.041574,    21.340660,   31.359648,   10.453960,   35.900383,   36.706059,   31.922508,
        82.269127,    15.794036,   45.787025,   30.003000,   107.533218,  7.951934,    62.524982,
        17.978596,    167.183853,  -6.063548,   44.932938,   -10.385776,  55.820675,   0.157726,
        80.685173,    10.555070,   30.778576,   19.595942,   36.326443,   24.587162,   18.697964,
        37.033813,    21.822754,   28.833715,   77.965759,   14.461176,   -5.430681,   -21.549833,
        8.643012,     -12.285213,  -2.184572,   -52.653851,  0.549158,    -64.844292,  -2.051100,
        -75.329742,   -32.976566,  -131.340393, -144.202362, 19.287615,   -310.289581, 267.710938,
        -2.309231,    -44.065086,  -1.995567,   -51.676964,  11.397973,   -37.232742,  -4.140524,
        -3.290949,    23.468826,   -97.733932,  20.020964,   -125.745750, -40.292576,  -124.305000,
        -35.116741,   -97.772919,  -15.022896,  50.135681,   -11.759937,  6.166906,    -27.690998,
        66.216438,    1.853937,    -1.395390,   -15.920959,  26.481253,   13.514421,   -13.290189,
        24.669729,    -66.135712,  -45.327133,  47.574425,   -20.485649,  42.242050,   -7.590494,
        19.444452,    -24.651676,  25.259386,   2.504402,    30.099344,   -1.152758,   38.335037,
        -13.035389,   53.554840,   -17.285076,  -12.609334,  2.028904,    -31.214262,  -18.837940,
        65.131485,    -51.423836,  119.413025,  -51.221832,  95.350540,   4.662983,    40.929756,
        21.875599,    -9.244311,   8.774892,    34.159092,   2.018255,    14.353608,   -12.225935,
        -1.692469,    -29.993996,  10.137967,   9.316747,    -5.432457,   -29.174644,  74.813431,
        -23.389824,   61.090111,   -14.909119,  54.109764,   96.286728,   -22.728308,  102.633362,
        -85.239052,   21.622513,   -35.640491,  -48.501801,  44.922035,   -50.980690,  105.225677,
        -22.783348,   89.026993,   23.133406,   12.428845,   24.032801,   29.924623,   -18.037395,
        115.653976,   120.855179,  -86.232910,  131.942963,  -114.478264, -70.013184,  192.788956,
        -32.002056,   77.188461,   -69.609459,  144.181046,  -31.804832,  55.819908,   -14.901600,
        86.808540,    -29.034233,  111.416473,  120.059517,  -88.877762,  -64.400063,  214.946228,
        45.894814,    -26.381886,  18.575891,   -14.548516,  0.267556,    9.570143,    -117.082588,
        32.809959,    -55.038074,  -1.411352,   -83.221542,  30.618593,   28.384583,   19.865259,
        44.820641,    2.532729,    -6.175736,   5.680602,    43.707939,   -3.315264,   -37.490395,
        -22.530363,   -134.041168, 15.733523,   -128.739059, 11.705289,   -89.136856,  7.387459,
        3.585311,     -2.528681,   27.227942,   -4.961918,   -12.897508,  -35.119877,  -6.897680,
        -22.886364,   -99.026031,  -16.911089,  -46.088665,  -18.697174,  -98.544380,  -2.127294,
        -127.030342,  -2.293374,   -31.274433,  -29.258583,  -63.480087,  -28.442411,  -61.784737,
        -27.298023,   18.987049,   -35.497658,  -5.920247,   -34.635693,  -48.916935,  -21.739475,
        -53.107639,   -17.684256,  -65.174278,  -22.761627,  -44.552223,  -36.983475,  -117.728882,
        -48.101513,   -36.727249,  -28.269211,  -21.461180,  8.212877,    -79.143974,  13.372537,
        -58.172756,   3.163744,    -69.185036,  -9.243896,   32.237274,   -31.227842,  50.983009,
        -32.512268,   -60.640690,  -38.347328,  -45.700455,  15.597699,   -67.476875,  47.762249,
        2.174130,     34.041889,   -115.076492, 30.612608,   -30.526602,  9.400203,    17.306273,
        17.994581,    -32.009377,  36.806007,   -124.878311, 6.331578,    66.922722,   -2.060802,
        -59.016342,   57.438030,   18.574539,   38.151646,   1.287776,    43.612907,   35.132740,
        19.944220,    -12.062298,  -10.654948,  -220.997589, 61.545006,   201.170135,  -72.710373,
        98.858475,    -129.899445, 47.996990,   -1.087782,   31.203936,   32.973186,   30.560930,
        7.266694,     -11.500308,  -0.638119,   91.411949,   -36.277321,  -245.415207, 64.393753,
        -131.625671,  -134.023453, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    -51.238384,  107.492516,  -142.496826,
        140.682816,   -99.825745,  126.885880,  -161.791000, 170.563004,  9.468816,    90.639130,
        -34.090900,   98.184578,   -18.026690,  114.381340,  -130.193787, 88.400970,   -63.601166,
        140.636749,   -97.851715,  156.769363,  -90.976677,  138.187180,  -77.228142,  120.147804,
        -50.530380,   123.460815,  -76.453667,  140.629730,  -92.922684,  163.301147,  -27.487370,
        91.473770,    -8.626832,   192.657547,  -59.049664,  208.074570,  -83.552872,  189.300751,
        -48.518890,   151.900146,  -69.938240,  188.393509,  -8.706670,   178.769730,  -61.528187,
        208.093369,   -41.533005,  186.101608,  49.004520,   284.735107,  5.208529,    287.666229,
        23.536856,    271.635834,  -0.634663,   232.390579,  -24.091330,  210.644531,  -51.895195,
        236.649612,   -31.089869,  265.837891,  -52.850937,  259.558685,  136.425568,  408.035522,
        112.668968,   403.625885,  141.633926,  370.369049,  96.593330,   325.255341,  101.558868,
        273.634583,   94.368202,   261.962738,  98.728127,   328.356720,  154.328690,  274.221497,
        326.120483,   438.959259,  231.202240,  517.238708,  293.383362,  485.768219,  271.060608,
        395.032379,   152.757965,  394.285797,  69.550941,   388.259430,  -102.037910, 482.656952,
        53.628529,    429.154358,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,     0.000000,    0.000000,    0.000000,    67.624062,   9.365369,    12.829891,
        37.499210,    16.039179,   16.450474,   27.869137,   -10.128362,  19.117416,   -6.134806,
        8.719860,     -9.188050,   0.000000,    0.000000,    -6.081384,   -7.216691,   -10.335944,
        -4.001369,    -40.650547,  -122.935318, 5.039894,    -405.358978, 13.671080,   5.734751,
        37.829330,    -8.045737,   26.176199,   -13.369096,  10.083977,   -0.139246,   -0.000000,
        0.000000,     -2.817097,   -2.207469,   3.835348,    12.290751,   -43.844383,  60.903324,
        95.064606,    63.520386,   35.904896,   102.437202,  -2.699195,   24.159239,   -10.806277,
        -84.816414,   19.307148,   28.594400,   40.741222,   7.153446,    -699.979431, 132.137329,
        -27.763912,   -65.279320,  -37.009914,  -32.041428,  22.863886,   -18.959784,  0.000000,
        0.000000,     8.819005,    18.802477,   10.375237,   28.809488,   11.393432,   58.989941,
        -17.407103,   146.323227,  -339.741089, 105.214165,  -162.725540, -10.484957,  -55.364182,
        -30.446035,   -14.434811,  -27.479065,  0.000000,    0.000000,    19.687811,   29.780247,
        6.698012,     82.107521,   -0.563182,   133.370651,  -137.583267, 221.483902,  862.089294,
        -1448.375122, -154.653442, -233.718811, -176.371933, -80.735443,  -125.368271, -38.055935,
        0.000000,     0.000000,    114.203712,  56.501690,   307.166962,  -1.150569,   505.960358,
        -101.820976,  1017.362793, -582.756897, 2.280695,    0.472947,    0.000000,    0.000000,
        1.386295,     4.776218,    3.909321,    6.920521,    3.645002,    5.346533,    2.652299,
        7.555440,     0.000000,    0.000000,    5.515122,    -0.725537,   1.463720,    3.241948,
        2.529752,     -1.365577,   4.502965,    -2.371354,   -0.466804,   5.621619,    13.574395,
        -2.386373,    1.497365,    5.090881,    4.754265,    18.245060,   -4.309197,   -5.140730,
        0.497635,     1.209892,    -5.353107,   -1.559242,   6.464702,    -3.968494,   1.238362,
        10.033751,    -6.198845,   -3.990920,   -0.918010,   -9.414926,   -5.600058,   -12.558959,
        20.000000,    10.000000,   2.478547,    -5.075267,   -10.681310,  -57.982998,  13.468410,
        -17.740543,   16.611521,   5.212883,    -60.848339,  -38.454445,  0.870445,    -20.401907,
        3.608911,     13.944332,   -50.245300,  -49.070190,  -24.810278,  -12.096199,  1.158355,
        14.726955,    -70.312599,  -8.281069,   -12.299509,  9.161138,    2.513578,    33.330719,
        -104.048134,  -14.256633,  -67.146294,  7.688306,    0.000000,    0.000000,    -84.981972,
        -40.060959,   -76.849182,  -40.728836,  -65.111107,  -36.926056,  -37.488422,  -51.470306,
        -5.950721,    -65.950531,  38.170540,   -77.283852,  63.126266,   -70.515923,  211.428604,
        -152.947678,  0.000000,    0.000000,    121.669098,  26.004509,   143.463943,  25.336899,
        149.139221,   36.702244,   142.729462,  27.148474,   139.481079,  38.838043,   0.000000,
        0.000000,     0.000000,    0.000000,    -59.954765,  -2.656297,   -187.580658, -34.171089,
        -268.806427,  -65.766495,  -365.384399, -79.508148,  -457.622559, -99.975464,  -15.363774,
        0.763095,     -0.106713,   -113.322350, 4.571378,    -79.040665,  -121.567596, 2.491645,
        -51.925968,   -18.599981,  -30.774185,  22.377409,   -8.913151,   9.919280,    -25.098375,
        45.026615};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

std::string getPstPieceTypeName(int idx) {
    if (idx == EvalParams::kPassedPawnPstIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

std::string getTropismPieceTypeName(int idx) {
    if (idx == EvalParams::kDoubledPawnTropismIdx) {
        return "Doubled pawn";
    } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
        return "Isolated pawn";
    } else if (idx == EvalParams::kPassedPawnTropismIdx) {
        return "Passed pawn";
    } else {
        return pieceToString((Piece)idx);
    }
}

void writeSquareTable(const EvalParams::SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(
        const EvalParams::PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < pieceSquareTables.size(); ++pieceIdx) {
        out << "\t" << getPstPieceTypeName(pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

void writeTropismTable(
        const std::array<TaperedTerm, EvalParams::kNumTropismPieceTypes>& tropism,
        std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n",
                getTropismPieceTypeName(pieceIdx),
                taperedTermToString(tropism[pieceIdx]));
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << std::format("\nhasUnstoppablePawn:\n\t{}", evalCalcTToString(params.hasUnstoppablePawn));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nownKingTropism: {\n";
    writeTropismTable(params.ownKingTropism, oss);
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    writeTropismTable(params.enemyKingTropism, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));
    oss << std::format(
            "\npassedPawnOutsideKingSquare:\n\t{}",
            taperedTermToString(params.passedPawnOutsideKingSquare));

    return oss.str();
}
