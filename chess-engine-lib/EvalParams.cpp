#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,    -172.180847,
        188.730698,  400.161377,  412.265259,  389.383728,  471.329620,  490.923828,  794.165894,
        1195.508301, 1274.232666, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -16.792864,
        -3.626411,   -16.483322,  -13.830473,  -26.700239,  -3.492258,   -41.741886,  -17.782436,
        -10.144607,  5.171367,    1.267397,    -6.028158,   32.191734,   -11.559771,  -28.780046,
        -28.558704,  6.733945,    -0.191924,   5.752759,    -0.311375,   -15.938480,  -0.084270,
        -2.466667,   -5.454176,   -10.247484,  -2.579159,   -6.398834,   -4.662242,   23.722609,
        -7.052499,   -2.608988,   -26.154980,  19.065535,   7.900313,    5.134473,    21.108627,
        3.312381,    -2.234464,   17.786705,   3.370826,    -6.251427,   11.517162,   6.460566,
        4.723636,    -9.760643,   7.198070,    -24.719271,  -2.721682,   35.580753,   27.049334,
        25.038498,   29.076571,   19.404961,   -0.751677,   15.717168,   0.232818,    19.044271,
        7.446057,    -5.644618,   12.940491,   -26.696188,  13.205632,   -20.633593,  11.400013,
        32.726448,   60.731125,   28.344099,   55.399460,   12.571105,   43.185833,   40.008995,
        -8.118081,   36.796700,   -20.203634,  61.007629,   37.983185,   20.501152,   41.899651,
        -12.473139,  21.841665,   207.315063,  154.101196,  157.718994,  181.241562,  161.136017,
        155.310532,  183.908234,  118.695152,  149.638916,  106.392357,  129.815323,  179.269424,
        -114.351723, 198.108902,  -46.558685,  159.442596,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -304.540558,
        -64.179794,  -37.325077,  -54.525589,  -144.272446, -8.468564,   -24.285933,  -2.034554,
        -19.768684,  -37.550468,  3.837614,    -65.241737,  -60.392620,  -91.044670,  -152.557892,
        -32.510403,  -62.716457,  -55.576317,  -66.062637,  5.667350,    -19.298145,  -31.870888,
        4.551183,    -12.384649,  -8.478601,   -31.313339,  -11.931843,  -13.984655,  -6.533783,
        -13.847208,  -18.734329,  -20.600357,  -34.344204,  -21.301582,  -23.960838,  -13.081359,
        -14.314510,  -14.377334,  17.123367,   15.816774,   54.913872,   9.600607,    3.952184,
        -13.624264,  19.509275,   -40.843109,  -33.131630,  4.104462,    -27.659077,  -19.041578,
        21.392664,   10.973661,   24.544172,   26.458511,   10.208844,   22.490723,   17.359257,
        37.126682,   39.610073,   -0.331561,   45.840755,   -11.957250,  2.125504,    -13.138343,
        -15.188650,  -3.075967,   17.869560,   2.939768,    11.972241,   22.103821,   56.181046,
        32.568314,   6.909530,    25.626158,   62.740200,   18.010126,   -11.575935,  1.466991,
        -10.880760,  3.568953,    -18.088045,  -35.822021,  -3.456963,   11.583951,   42.479259,
        15.611368,   67.614014,   26.897348,   66.702850,   -19.248207,  129.966003,  10.999666,
        31.496187,   11.760818,   -61.868168,  4.997550,    -65.845276,  -7.288221,   -4.289860,
        -22.684774,  46.309883,   -14.561903,  59.023434,   21.378418,   22.509098,   12.210795,
        21.545326,   -11.473611,  -50.716724,  -26.544586,  -107.429886, -25.921106,  14.111680,
        -53.252354,  -119.173271, -21.733145,  -133.551376, -13.397804,  -70.320824,  -31.222277,
        -0.788862,   9.197591,    85.265442,   -2.198488,   -281.845001, 39.205563,   -109.276283,
        -229.762329, -80.626129,  -49.691555,  -56.748081,  -43.665016,  -30.748611,  -6.463200,
        -43.753269,  28.218403,   -16.602362,  4.788680,    -26.684780,  6.047747,    -4.822761,
        6.367606,    -110.256981, 25.332626,   -3.630454,   -21.354687,  -14.568511,  -28.021942,
        -3.779135,   -11.699148,  -14.937006,  12.255876,   5.591319,    9.946558,    -12.668046,
        4.348094,    32.909885,   -15.969893,  -52.112671,  -11.852138,  -17.022810,  -11.543444,
        16.357262,   -13.868609,  14.220701,   -1.781949,   10.798350,   10.505541,   17.852499,
        15.442641,   40.470974,   -6.540247,   16.561544,   -27.172424,  -9.396807,   -41.206768,
        20.828503,   -60.631832,  -13.695049,  -0.915641,   17.830864,   12.983750,   38.074642,
        9.193737,    30.753487,   -9.448841,   18.291748,   -4.978771,   42.732681,   6.533766,
        13.685431,   -37.183937,  -23.435783,  -7.998292,   16.310566,   13.910818,   20.142670,
        -9.338558,   60.597641,   7.658373,    37.281189,   11.812376,   58.618462,   14.635343,
        2.896311,    7.078381,    -21.032455,  -2.855762,   -10.531499,  -4.861906,   33.735161,
        3.249665,    49.874828,   -9.814221,   39.895618,   -15.381672,  34.539013,   26.703447,
        116.771843,  21.392208,   123.879150,  -36.232471,  56.212593,   -17.493069,  3.097874,
        -54.161903,  -20.267313,  -0.365706,   -14.414476,  -6.440699,   -20.640858,  38.737068,
        2.142608,    -13.355937,  49.033802,   -1.293437,   31.456793,   18.462631,   30.743557,
        -36.156109,  -54.528793,  0.041811,    -73.495682,  -35.286564,  2.990908,    -6.645918,
        -282.061310, 12.978380,   -87.776321,  12.998915,   -40.287411,  -3.398614,   -5.703911,
        6.276857,    79.530182,   -23.598001,  37.819431,   -21.925550,  22.550516,   -9.117299,
        2.920821,    -9.386223,   9.800102,    -13.617661,  -8.033650,   -20.400087,  -26.474154,
        -11.467620,  -48.055531,  -12.988704,  -30.307753,  -28.091614,  9.302970,    -17.908895,
        -27.965651,  -10.152112,  -23.005114,  -2.537760,   -13.912966,  -14.866667,  -0.347124,
        -34.333004,  -40.954758,  -16.300020,  -80.971565,  -2.350153,   -143.669067, 16.892176,
        -24.641653,  -6.864494,   -8.960977,   -6.382411,   -37.125423,  1.701705,    -15.392253,
        -7.972105,   -13.161887,  -26.679373,  -24.025696,  -42.312897,  -18.875893,  -18.127283,
        -63.576031,  -24.841494,  4.797238,    -8.370933,   11.108916,   -4.843480,   -1.671602,
        4.379939,    -18.430380,  5.030295,    -56.998756,  1.262789,    -57.860355,  0.635984,
        -46.365292,  -0.310732,   -118.821045, 9.499863,    -9.168649,   12.470309,   -16.353235,
        11.200496,   -56.171757,  13.663369,   6.628716,    -8.282763,   -88.959419,  7.743012,
        -20.154921,  14.522242,   -39.395405,  16.148682,   -81.745445,  19.150023,   -29.602781,
        29.322086,   -32.805897,  12.146944,   -28.880692,  12.057573,   -24.142733,  -6.764976,
        -28.294022,  11.877137,   -27.740532,  15.747448,   92.838242,   -21.626963,  -63.533573,
        17.532606,   13.303939,   23.657988,   -34.180576,  30.173826,   -12.748433,  25.729584,
        -21.539806,  32.343262,   -32.685768,  24.426634,   18.539368,   22.920832,   6.480302,
        16.309893,   31.758772,   7.220062,    -1.929185,   4.539531,    -16.762720,  15.624228,
        -60.018879,  28.382515,   -19.871504,  32.468266,   -5.378698,   20.736073,   -60.030312,
        45.108818,   -19.815807,  37.095402,   -89.471260,  22.856964,   -0.346747,   9.315707,
        -10.461300,  24.232821,   20.412588,   -110.613319, -4.583495,   -9.866414,   -12.236773,
        -24.574614,  -42.565475,  -105.744667, -37.363449,  -147.685349, -181.513306, 178.714951,
        -12.757355,  -38.482315,  15.993178,   -27.330240,  4.800618,    -19.229101,  -2.239015,
        2.988278,    1.751147,    -50.520630,  -12.873495,  -66.713387,  -32.181004,  -112.509926,
        -29.877968,  -199.476715, -14.330059,  55.489758,   11.268151,   -0.206091,   -19.617243,
        42.858147,   6.094532,    -36.761501,  -4.911810,   -36.813347,  -12.580873,  -20.774454,
        4.727923,    -22.371714,  -6.883880,   -59.252266,  20.654064,   -64.297142,  17.867262,
        27.336990,   -2.354589,   10.558973,   22.540794,   -34.850113,  -0.720390,   18.528606,
        1.253596,    13.232104,   8.020234,    -82.746346,  0.126632,    -26.933722,  1.569831,
        28.426701,   -28.572708,  123.560616,  -33.461269,  97.079590,   9.961240,    49.994202,
        3.894100,    57.944496,   7.456453,    48.980064,   -11.558031,  40.038261,   -4.619475,
        -4.407136,   -13.247734,  20.862307,   14.483282,   15.007250,   9.162308,    30.329515,
        5.837072,    31.769470,   23.853725,   58.356792,   70.864136,   -22.310221,  118.298431,
        -161.976776, 31.283569,   -14.129937,  41.451763,   -36.702499,  -14.497030,  93.924759,
        -3.141946,   107.087036,  36.527885,   23.097130,   -4.224325,   74.100906,   9.681391,
        24.416945,   -9.241096,   69.486961,   36.618858,   -16.549248,  12.230621,   76.911751,
        96.798943,   -40.177242,  -0.714849,   76.556267,   15.132623,   57.336147,   -3.416507,
        87.999641,   -26.590103,  111.176109,  143.795883,  -144.492737, 8.164229,    113.394829,
        6.817323,    8.734023,    9.126286,    0.183739,    -45.974510,  29.936756,   -118.685387,
        40.430145,   -37.887325,  2.415884,    -55.784370,  17.460407,   13.898776,   13.567524,
        1.897781,    5.354147,    9.678620,    14.366356,   -76.373993,  18.627876,   8.190471,
        -10.857767,  -76.423965,  14.762001,   -71.240585,  4.544608,    -29.807501,  5.012959,
        6.426670,    6.769841,    4.822773,    5.966415,    62.572136,   -31.892488,  -11.815824,
        -28.687731,  -12.842500,  -16.022985,  -32.656658,  -10.912042,  -13.053623,  -9.578058,
        -53.209679,  -8.100246,   -21.516354,  -20.299799,  -30.914400,  -22.317274,  4.470278,
        -36.154594,  40.886417,   -40.192741,  2.285131,    -12.994776,  1.536078,    -12.428289,
        -10.865556,  -9.054709,   7.314605,    -14.697181,  22.508614,   -39.038994,  -35.589962,
        -49.171032,  20.457798,   -34.366573,  30.115995,   -4.748537,   22.635077,   -15.609007,
        -81.392456,  9.163384,    15.115301,   -5.619343,   78.093269,   -30.930626,  52.982533,
        -12.102489,  83.965424,   -33.006123,  16.182638,   -5.894431,   40.937752,   2.068236,
        25.618181,   17.828909,   -36.279888,  11.411593,   -66.563530,  15.390336,   39.604622,
        26.982365,   1.389619,    29.523804,   44.824467,   6.379107,    -43.558861,  -11.538239,
        -7.218288,   27.943918,   32.169022,   13.505372,   5.505829,    6.353328,    -0.520909,
        7.176127,    33.815701,   15.120367,   -108.285431, 43.192341,   -203.667786, -1.435584,
        43.258945,   -17.778618,  1.425614,    3.053187,    -38.917091,  1.310570,    -28.237787,
        8.290840,    -98.599480,  6.920882,    28.132257,   -26.086185,  -79.890495,  11.575649,
        -289.580261, -46.808475,  0.000000,    0.000000,    90.000000,   90.000000,   134.056320,
        124.275185,  73.163086,   65.072090,   50.082279,   11.649605,   60.970879,   -28.107443,
        65.467125,   -36.810253,  57.416416,   -3.008756,   11.944358,   24.562723,   9.804637,
        -2.073925,   29.109037,   -2.928716,   20.335043,   -1.655381,   10.017957,   -2.733515,
        0.000000,    0.000000,    -6.882260,   -4.896225,   -16.708921,  6.906397,    -42.238590,
        -46.433250,  137.093719,  -244.072571, 30.192867,   -2.691839,   40.432972,   -10.255954,
        27.466885,   -3.941096,   14.805264,   -4.831617,   -0.000000,   0.000000,    -8.140780,
        -16.026743,  -15.350336,  -7.162505,   -48.568310,  24.685593,   147.347168,  8.547197,
        45.492657,   79.926102,   12.251753,   9.861749,    -56.424332,  -45.798096,  17.754189,
        16.036528,   33.141132,   5.014712,    -384.505341, 46.601540,   -52.590992,  -42.766788,
        -4.871385,   -29.775600,  10.078270,   -14.252632,  0.000000,    0.000000,    1.035495,
        21.700199,   5.172098,    34.423149,   -0.134074,   59.146603,   -15.457736,  149.301636,
        -124.330147, -25.397619,  -64.357513,  -58.269199,  -40.053894,  -38.493919,  -29.687355,
        -22.020485,  0.000000,    0.000000,    22.607069,   16.793415,   25.682415,   50.513386,
        3.848503,    94.575714,   -65.698914,  129.965103,  -13.458325,  -941.055115, -445.091064,
        -44.704830,  -319.738678, 28.984219,   -129.597092, -57.743626,  0.000000,    0.000000,
        138.773956,  1.334925,    309.917664,  -15.987327,  568.907532,  -173.023956, 937.570068,
        -481.929199, 1.700988,    0.216380,    0.000000,    0.000000,    0.620911,    2.568918,
        3.154588,    5.401344,    3.943717,    4.362564,    2.166578,    7.778932,    0.000000,
        0.000000,    7.723005,    -0.729981,   -1.743268,   1.987677,    1.087543,    -2.790368,
        2.916024,    -0.712435,   4.551227,    1.851299,    13.203445,   -2.812915,   5.249047,
        2.749013,    0.215472,    12.686099,   2.182603,    -5.108303,   0.838292,    0.004611,
        -4.691862,   -1.230067,   13.036359,   -3.077038,   0.955551,    7.574705,    1.184022,
        -4.713423,   4.467203,    -7.594596,   2.609455,    -15.342469,  20.000000,   10.000000,
        3.912992,    -3.062047,   -9.933805,   -44.207573,  9.814338,    -13.417860,  8.341841,
        4.921256,    -43.339653,  -35.413433,  -3.924617,   -17.989281,  6.122149,    11.109948,
        -44.981075,  -45.582310,  -16.418533,  -18.590389,  6.129205,    10.018876,   -50.157185,
        -15.950674,  -7.172370,   -8.368373,   -1.903432,   36.179520,   -74.917152,  -43.866463,
        -64.619888,  5.418271,    0.000000,    0.000000,    21.497972,   -52.396900,  21.798161,
        -54.154259,  36.623020,   -51.651527,  69.219841,   -64.902954,  79.683449,   -72.292740,
        114.702942,  -77.263283,  147.572449,  -76.941788,  248.249710,  -81.399750,  0.000000,
        0.000000,    -37.873566,  38.627083,   -16.868984,  48.967644,   -15.596800,  54.014351,
        -18.676023,  43.893703,   -19.033808,  48.860416,   0.000000,    0.000000,    0.000000,
        0.000000,    1.244642,    -2.167276,   41.149708,   -49.934288,  93.671745,   -92.556564,
        115.702774,  -120.593475, 205.971695,  -165.142471, 0.264187,    0.204468,    0.294994,
        0.948382,    0.812090,    1.000000,    1.000000,    1.000000,    1.000000,    -0.003100,
        0.128339,    0.104950,    0.043681};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    return oss.str();
}
