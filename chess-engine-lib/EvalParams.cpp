#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.029219,   1.000000,    0.592578,    2.183934,    7.688072,     0.000000,    0.222898,
        0.193384,    0.370851,    0.678545,    0.914041,    2.188127,     1.000000,    1.000000,
        1.000000,    -0.005299,   0.116535,    0.083919,    0.041733,     -98.505859,  222.170074,
        466.189331,  475.354248,  474.378021,  545.328857,  636.669922,   941.491150,  1406.518311,
        1569.418945, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -40.173859,  1.533064,
        -50.863094,  -7.658945,   -42.425034,  -5.350855,   -41.714108,   -47.288475,  -11.373978,
        -6.432481,   20.562113,   -7.191093,   52.388775,   -12.068369,   -31.286119,  -29.147963,
        -11.413940,  -4.769386,   -24.152380,  -5.531393,   -30.667196,   -10.892301,  0.947074,
        -11.452799,  3.588409,    -4.256871,   16.058756,   -0.090583,    27.598911,   -2.111816,
        9.167302,    -21.820671,  -0.382102,   7.929995,    -17.958460,   7.352539,    -2.150611,
        -6.108344,   17.262753,   -3.198855,   3.589496,    8.686860,     14.450464,   9.335588,
        2.839684,    15.691299,   6.908265,    -2.854537,   21.030117,    44.300545,   2.316746,
        37.574100,   4.666754,    26.337608,   34.516659,   -11.051169,   44.968689,   -9.488057,
        8.614728,    14.625364,   -37.753719,  25.407890,   16.465195,    1.677628,    14.669860,
        82.084900,   7.583095,    80.501549,   45.841080,   50.422546,    49.519661,   2.948025,
        78.214470,   -41.529476,  132.604034,  -31.910526,  103.400223,   3.588262,    85.877731,
        -27.988579,  259.699371,  200.147995,  205.906784,  262.295746,   233.277893,  230.513809,
        271.313171,  152.205185,  175.057526,  149.290314,  82.395035,    153.304092,  -82.585342,
        232.115601,  28.218918,   179.972473,  0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -204.517548, -36.064323,
        -58.128712,  -98.324097,  -84.157501,  -46.315964,  -54.370533,   10.903469,   -31.951572,
        -30.579062,  -27.057093,  -44.099281,  -60.171818,  -54.924664,   -162.906509, -80.358597,
        -68.513229,  -51.108772,  -130.567154, 7.856974,    -22.169647,   -20.044052,  -0.935358,
        -10.917356,  -5.446891,   -26.157528,  -9.232674,   -31.377153,   16.823040,   -42.407867,
        -52.135616,  -40.050716,  -44.943970,  -33.607822,  8.666997,     -15.289738,  -21.716274,
        -19.748699,  19.652929,   20.596836,   37.254681,   26.155100,    7.220233,    -21.292013,
        25.230740,   -50.145424,  -43.920017,  -60.522575,  -8.466374,    -22.253347,  -2.805503,
        11.795738,   33.537098,   29.982496,   14.441264,   39.740467,    26.526375,   31.572397,
        28.799168,   7.264745,    36.287758,   -5.521112,   -5.095397,    -14.131766,  -16.727070,
        18.575150,   11.675879,   15.088921,   27.227085,   39.038536,    96.853973,   23.450628,
        16.950075,   39.860973,   90.541115,   11.720797,   15.991399,    8.935785,    35.839222,
        -11.192472,  -62.773125,  -36.872734,  34.558239,   7.525048,     61.322937,   11.060280,
        86.673241,   33.913754,   122.504913,  -2.254674,   173.971802,   5.025602,    27.410603,
        11.078659,   0.638395,    -30.338230,  -49.147560,  -4.212321,    -27.568851,  14.794127,
        25.489239,   -12.609839,  48.857574,   22.405899,   34.964600,    18.676464,   162.995575,
        -36.415020,  -0.409421,   -8.755961,   -171.396988, 2.434479,     -280.406555, -71.654358,
        -106.946587, -50.613766,  -137.216995, -1.505634,   -44.968590,   0.951861,    69.299149,
        -43.804958,  -32.856472,  -14.765159,  -17.661505,  -38.313087,   -162.585434, -134.586563,
        -48.097549,  -38.315994,  -35.762257,  -18.862169,  -37.781307,   3.642865,    -21.252172,
        19.333815,   -25.693735,  15.799772,   -35.323044,  -19.970676,   -46.853851,  -21.442259,
        43.413082,   12.007614,   -0.802673,   -50.897167,  -2.811829,    -17.170753,  -1.304651,
        -19.100033,  -10.996490,  10.903903,   4.801414,    6.055617,     22.528360,   11.817848,
        47.074455,   -38.638432,  -67.138992,  -12.694849,  -9.383357,    -20.323120,  22.709644,
        -26.005569,  17.428804,   10.919423,   21.619644,   -0.985475,    13.484237,   13.225492,
        39.038353,   -6.551964,   15.319790,   -24.883543,  -3.054068,    -36.299782,  9.647836,
        -56.415226,  10.383584,   1.818750,    25.425611,   3.727854,     29.059845,   12.265473,
        40.158165,   -7.827380,   12.630569,   9.133044,    35.892735,    -0.344922,   12.591071,
        -57.709469,  -0.600460,   -7.279953,   13.632104,   28.402458,    36.803658,   -3.155779,
        63.230049,   -5.346274,   40.092545,   21.625883,   77.206329,    5.171978,    -10.796521,
        17.696920,   -4.764365,   -13.685811,  29.692814,   -2.852357,    41.689354,   12.711181,
        56.581184,   5.974423,    119.296089,  -40.200504,  77.265999,    5.009962,    100.666954,
        0.149769,    30.493462,   -1.705643,   57.074162,   -17.145773,   5.208639,    -19.986584,
        -4.426001,   28.296288,   40.260262,   4.146447,    -10.632392,   19.719543,   33.498779,
        8.635953,    -44.690651,  29.159218,   62.918564,   1.476148,     -72.491058,  -63.807453,
        -78.893745,  -14.511001,  -65.202545,  -8.779966,   -57.982826,   14.738924,   -163.332733,
        26.375471,   -41.148243,  15.098461,   -61.148834,  0.921348,     103.661995,  -41.178661,
        140.471558,  -54.898048,  18.516136,   -12.940374,  9.099383,     -16.898050,  -2.659165,
        -6.959942,   9.229528,    -20.142317,  6.126713,    -27.016068,   -18.753353,  -2.026592,
        -48.168816,  -4.125975,   -31.574987,  -30.649012,  3.802430,     -4.108736,   -10.742622,
        -17.073910,  -18.681540,  -5.752599,   -13.305334,  -2.316383,    11.057144,   -14.348223,
        10.470605,   -31.743347,  -24.405970,  -11.853984,  -118.485046,  12.593364,   -37.638149,
        1.590340,    -46.505535,  -10.963429,  -35.214653,  -1.121576,    3.503560,    -10.438930,
        5.314509,    -26.598078,  -3.904776,   -17.455853,  4.056582,     -12.202687,  -27.270737,
        -31.274746,  -39.864246,  8.580675,    -8.236280,   3.003794,     -16.264626,  6.543347,
        0.126599,    -4.054454,   1.082669,    -3.859982,   -37.172215,   11.625676,   -20.834946,
        15.903283,   -40.499962,  12.777879,   -10.597515,  17.299440,    13.943807,   6.381701,
        2.740529,    9.224045,    34.709106,   -9.310016,   -31.342237,   18.591919,   20.300999,
        2.277884,    24.450441,   -3.813434,   -25.184017,  9.128605,     5.088939,    31.346972,
        -4.795651,   7.355565,    14.287662,   10.601461,   12.580394,    -1.270578,   57.946774,
        -11.246353,  20.176407,   -2.587990,   91.799675,   -0.904219,    51.515190,   6.411545,
        18.777464,   29.403521,   -3.204826,   36.710537,   28.947632,    34.301701,   61.607990,
        18.575020,   31.708061,   33.779346,   89.917084,   8.783710,     48.863850,   17.608667,
        158.905106,  -6.272923,   32.332981,   -11.459020,  36.606976,    4.368948,    30.388737,
        23.042158,   18.855637,   26.250532,   17.156971,   27.421518,    -44.913311,  44.331032,
        44.246052,   21.592478,   41.164322,   22.333757,   -18.833248,   11.154899,   1.795342,
        -0.025266,   5.959340,    -85.677498,  -3.819313,   -48.728931,   0.723193,    -61.782467,
        -54.646866,  -76.719139,  -150.929840, -2.863198,   -350.290955,  291.728363,  -3.913911,
        -35.955170,  -2.172849,   -34.132553,  11.731758,   -34.250225,   -4.889579,   -8.524911,
        19.480633,   -78.028404,  12.185025,   -97.770844,  -25.989048,   -141.218506, -15.921902,
        -94.070015,  -27.990704,  76.184166,   -4.525676,   21.737373,    -25.493904,  59.554031,
        2.731852,    -2.571957,   -15.614700,  28.799286,   12.576809,    -8.053140,   23.647276,
        -69.126045,  -39.320290,  50.793579,   0.213797,    -14.882747,   -10.931156,  42.161362,
        -18.484673,  30.258812,   13.476436,   2.628993,    1.674496,     36.977570,   -11.480984,
        50.431793,   -18.962215,  7.171523,    10.026846,   -41.515579,   -36.430222,  84.205338,
        -48.486938,  113.899010,  -36.087715,  82.936745,   13.402260,    35.748650,   17.732105,
        6.015185,    19.113758,   25.271240,   11.153111,   -4.719911,    2.761298,    -5.258557,
        -34.846107,  32.645813,   14.490014,   -4.067571,   -9.897362,    46.514008,   7.356157,
        15.451423,   -1.844867,   42.110474,   92.007278,   -19.738245,   121.987228,  -115.083443,
        30.054708,   -30.043772,  -38.088997,  45.847458,   -36.912445,   84.234795,   -1.653476,
        67.685448,   32.604023,   3.008407,    23.296856,   28.265778,    2.252646,    80.656494,
        128.138733,  -91.894684,  153.932571,  -128.674744, -76.444962,   170.170334,  -23.373100,
        71.542313,   -61.231949,  141.134262,  -11.506538,  45.140022,    -5.179302,   69.709206,
        10.858391,   47.956512,   104.846657,  -84.946266,  -53.176094,   181.278275,  25.632376,
        -11.297069,  8.803020,    -1.410743,   -2.189092,   16.736977,    -105.351616, 34.636139,
        -52.686314,  6.722577,    -77.701363,  32.231468,   24.219805,    23.887682,   37.709930,
        3.254264,    -13.334287,  6.738665,    36.350117,   4.343651,     -30.517471,  -14.647885,
        -116.464798, 17.448481,   -119.085670, 16.500010,   -82.097046,   12.977159,   7.172823,
        -0.749343,   21.522253,   -6.151718,   -12.955778,  -34.403870,   -8.825511,   -24.228655,
        -88.694878,  -15.357367,  -33.128208,  -14.651915,  -77.161896,   -1.234336,   -115.483589,
        0.641406,    -22.955412,  -27.965004,  -48.828194,  -32.917789,   -23.793352,  -51.759098,
        27.249474,   -36.343204,  32.474102,   -36.971077,  -36.424263,   -17.953915,  4.418938,
        -22.333414,  -57.713406,  -19.194839,  -19.447895,  -42.041573,   -93.118797,  -57.479420,
        -8.846606,   -36.126839,  -16.088326,  -1.101196,   -68.463394,   1.874201,    -63.311108,
        -0.679933,   -20.280519,  -20.296230,  59.614979,   -37.920288,   80.323349,   -40.948101,
        -0.928066,   -51.357178,  -0.035697,   -1.148654,   -46.613266,   30.494413,   12.391481,
        19.730957,   -64.076187,  7.467284,    14.403440,   -9.832567,    62.808605,   -0.149187,
        -34.799664,  19.335161,   -101.566216, 1.429239,    38.875725,    1.824682,    -39.287346,
        43.280369,   34.679657,   27.774237,   -31.796141,  34.113819,    42.739494,   4.469232,
        10.478600,   -29.309641,  -211.616013, 48.877926,   49.363453,    -47.797787,  69.946945,
        -84.239296,  31.627323,   11.884695,   35.258907,   10.115898,    32.681084,   -0.284647,
        -27.345211,  -2.309279,   109.054848,  -53.526421,  -264.818451,  46.743809,   -119.196381,
        -155.282349, 0.000000,    0.000000,    90.000000,   90.000000,    159.751083,  156.208084,
        89.209404,   73.983406,   72.899918,   12.608553,   72.401596,    -36.683044,  89.699806,
        -55.503342,  60.771248,   29.223230,   16.177988,   33.244492,    15.486705,   11.740583,
        30.727335,   -6.011763,   21.787071,   -6.041535,   12.222795,    -10.089028,  0.000000,
        0.000000,    -6.506247,   0.177259,    -15.301869,  -0.196002,    -38.947517,  -79.808014,
        34.981411,   -278.500000, 24.482409,   1.030557,    39.710770,    -7.586634,   25.634787,
        -8.557771,   11.272090,   -0.050681,   -0.000000,   0.000000,     -5.647280,   -3.324184,
        -5.335833,   -3.063259,   -38.035488,  28.169058,   51.959488,    108.651962,  40.114010,
        91.450684,   1.532242,    14.990749,   -32.366264,  -66.658882,   19.019695,   25.306906,
        40.354595,   5.813428,    -606.359009, 89.695259,   -16.168907,   -60.656513,  -19.811493,
        -34.244457,  36.311905,   -24.915737,  0.000000,    0.000000,     10.322284,   15.166828,
        11.787063,   24.093126,   10.102695,   57.145046,   -24.553354,   169.523575,  -234.784302,
        51.381744,   -118.382637, -29.738480,  -52.873554,  -30.570250,   -19.535976,  -24.837835,
        0.000000,    0.000000,    19.692818,   28.310045,   9.249379,     77.781708,   1.749915,
        127.990814,  -113.754723, 198.103012,  758.271301,  -1370.752563, -232.494080, -187.209885,
        -197.619080, -76.744026,  -128.396667, -48.846630,  0.000000,     0.000000,    113.903603,
        56.845894,   304.854492,  11.063408,   509.869446,  -76.559196,   987.989319,  -530.596558,
        1.916059,    0.744840,    0.000000,    0.000000,    1.568051,     3.485532,    3.646097,
        6.426275,    3.754087,    5.584629,    2.731597,    7.654555,     0.000000,    0.000000,
        5.580292,    -0.475983,   0.605591,    3.361168,    2.247508,     -1.441182,   3.782131,
        -1.225103,   1.477183,    3.211922,    13.361319,   -1.100345,    1.861744,    4.857432,
        -2.488703,   15.187047,   -3.029060,   -5.358624,   0.602196,     0.912161,    -3.697753,
        -1.506659,   7.461708,    -4.122474,   -0.574755,   11.415608,    -5.448395,   -3.004017,
        0.811062,    -9.110354,   -4.217608,   -15.744105,  20.000000,    10.000000,   1.969286,
        -3.089861,   -10.954188,  -53.230629,  12.261985,   -15.775395,   13.808307,   5.741279,
        -54.743057,  -35.348270,  -0.540177,   -16.750263,  5.230879,     13.473948,   -49.596401,
        -49.730061,  -21.903860,  -15.967811,  1.946346,    14.778790,    -68.579689,  -6.460273,
        -11.469510,  6.908036,    3.837446,    33.496613,   -96.484985,   -38.263630,  -65.429787,
        -2.576347,   0.000000,    0.000000,    -51.077187,  -44.478439,   -40.028412,  -46.669044,
        -27.801128,  -40.824680,  1.552920,    -53.274158,  30.034925,    -65.815948,  87.448013,
        -80.500717,  110.766266,  -74.803299,  243.440979,  -125.198318,  0.000000,    0.000000,
        71.643318,   29.071619,   94.539635,   29.655125,   92.922913,    42.925495,   87.065552,
        31.430479,   85.717087,   42.755707,   0.000000,    0.000000,     0.000000,    0.000000,
        -38.399292,  -1.457883,   -113.711021, -38.078056,  -148.947952,  -77.159607,  -204.307114,
        -94.995872,  -247.977707, -119.066719, -15.761914,  4.400804,     1.398043,    -99.937798,
        1.112902,    -74.190765,  -118.479309, 1.896457,    -65.128250,   -13.933702,  -28.046642,
        20.066841,   -8.042668,   9.957384};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nkingOpenFileAdjustment:\n\t{}", taperedTermToString(params.kingOpenFileAdjustment));
    oss << std::format(
            "\nkingFlankOpenFileAdjustment:\n\t{}",
            taperedTermToString(params.kingFlankOpenFileAdjustment));

    return oss.str();
}
