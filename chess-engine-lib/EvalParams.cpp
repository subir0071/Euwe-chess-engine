#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.289488,   1.000000,    1.574947,   2.855469,   8.475677,    0.000000,    -9.339905,
        92.405258,   331.075409,  307.043671, 347.018768, 356.112030,  415.176666,  560.660767,
        893.860596,  983.346619,  0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    -25.405338,
        14.808380,   -16.920618,  -2.143084,  -20.143351, 4.927596,    -19.188715,  -50.359932,
        -4.278773,   26.926500,   9.799373,   -5.235655,  30.858284,   -7.913885,   -5.988878,
        -13.097138,  -10.659535,  9.170075,   -9.395406,  1.986240,    -8.337749,   -2.070602,
        -8.082063,   1.933293,    -10.321137, 1.698298,   -0.362151,   3.097130,    33.241444,
        -11.766615,  10.571959,   -11.362737, -6.924659,  10.140736,   -11.211994,  11.918012,
        0.177075,    0.550483,    10.077623,  -16.154850, -5.914432,   -5.423140,   10.674191,
        -0.810147,   -8.138635,   1.114227,   -16.181360, -5.040506,   -6.163862,   37.430542,
        0.517183,    18.433983,   -7.318684,  3.055924,   1.084855,    -0.605418,   15.412565,
        0.278226,    4.277388,    -6.219549,  -6.145684,  4.932830,    -11.873919,  0.856077,
        -7.094734,   44.684647,   27.747383,  21.107721,  -14.195828,  19.941000,   20.221981,
        -13.536695,  37.267529,   -25.678699, 22.239441,  -4.029824,   91.968575,   11.298261,
        45.949844,   -20.159019,  113.438004, 55.639847,  51.917435,   90.495758,   79.974922,
        48.986595,   102.820786,  66.387383,  69.667885,  54.895187,   28.603107,   75.214447,
        28.682684,   120.873589,  34.924248,  59.608585,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,   0.000000,   0.000000,    0.000000,    -170.812958,
        -61.328629,  -31.498306,  -36.504398, -55.407635, -20.058720,  -16.587183,  -33.131645,
        -32.235401,  -25.718172,  -13.489133, -30.281393, -51.543369,  -67.549774,  -161.312729,
        -37.296715,  -67.764938,  -59.175156, -77.620499, -15.082435,  -29.472490,  -27.283041,
        -7.068035,   3.375303,    -3.362888,  -13.938369, 22.164999,   -13.953556,  -27.355551,
        -31.457617,  -43.901230,  -46.978828, -29.815207, -32.925350,  -12.133132,  -3.374290,
        -1.657129,   -3.889552,   -1.254774,  3.516934,   47.208317,   5.696753,    2.220522,
        -16.254278,  10.088745,   -12.591582, -39.377644, -9.018270,   -26.579607,  -11.732300,
        -37.887245,  -3.133015,   27.380035,  12.162395,  1.363420,    27.589632,   16.276789,
        22.413984,   34.785912,   2.227320,   10.646010,  16.137165,   -12.341043,  -12.558749,
        -20.125973,  -9.769539,   8.012131,   9.966049,   40.348930,   13.458835,   60.676987,
        17.761156,   25.987768,   18.279970,  59.875435,  16.979439,   3.150008,    9.615551,
        26.666161,   -24.835966,  -27.152691, -29.417582, 5.161973,    14.338070,   16.520641,
        32.866070,   78.620834,   17.685503,  118.896973, -18.303936,  108.730942,  -3.030982,
        26.538378,   0.712220,    -14.600024, -1.740922,  -27.978134,  -8.835411,   -36.289619,
        -3.221047,   11.768377,   1.546593,   51.327698,  9.844124,    32.808743,   2.876082,
        31.768270,   -1.858787,   -66.723450, -2.422535,  32.270943,   -21.424507,  -103.778534,
        -69.218666,  -51.782299,  -40.734982, -19.898458, -8.587090,   -56.933590,  -19.398106,
        8.814758,    -8.141850,   -61.822639, -11.760653, -51.059208,  13.779630,   -254.055893,
        -36.138569,  -13.787269,  -36.026100, -10.039488, -35.777702,  -2.942074,   -22.224443,
        -37.015205,  -1.061838,   5.536879,   -20.407623, -26.022490,  -33.700172,  -67.455688,
        -9.893102,   1.990048,    -5.255693,  -9.694429,  -28.282013,  7.128942,    -20.354095,
        5.872310,    -14.262024,  -0.053231,  1.865459,   1.676759,    -13.251660,  10.513638,
        -6.699023,   18.439072,   -36.992928, -42.273033, -49.423771,  1.113819,    -16.816406,
        9.725726,    -0.694662,   13.412163,  2.939373,   -0.989599,   4.919795,    5.193502,
        5.776764,    18.573929,   -15.170923, 1.783168,   -3.375422,   -15.616812,  -23.931568,
        13.901514,   -9.855426,   11.845064,  0.772929,   -3.808791,   22.083103,   32.210491,
        14.656987,   11.482914,   4.049348,   -5.019630,  5.738779,    8.796053,    7.315015,
        9.071246,    -4.775900,   -21.149796, 1.717121,   -7.972805,   12.556643,   5.544694,
        8.527258,    19.520220,   17.883945,  44.104794,  6.862188,    23.653896,   -0.789181,
        -17.690331,  10.923298,   -23.576672, 27.876347,  -26.841049,  -1.439816,   -9.127555,
        13.396199,   -0.941292,   18.709793,  8.434744,   -2.571731,   42.779484,   13.137370,
        90.572121,   11.468925,   82.746437,  -7.984354,  30.030575,   9.473305,    2.542105,
        -3.134760,   -32.036774,  22.708298,  -7.440372,  14.676029,   -59.143764,  26.878891,
        9.718977,    -1.667943,   -35.107407, 16.249035,  -34.042320,  -0.458047,   -72.875565,
        -11.930075,  -185.378937, 58.586727,  46.502678,  -4.748460,   -36.073307,  -11.343955,
        -19.160025,  1.233401,    -43.307564, 25.525652,  -138.416367, -4.314031,   82.246330,
        8.133306,    -58.124687,  -16.449549, 25.981876,  -23.242533,  10.863288,   -25.147024,
        -2.199767,   -13.691811,  0.614389,   -16.095695, -10.220384,  -19.100292,  -13.353979,
        -13.862017,  -30.627687,  -15.353388, -10.596581, -37.738235,  -31.666420,  -8.110136,
        -23.571957,  -9.741076,   -18.098867, -12.394274, -14.765671,  -13.313499,  -18.908886,
        -10.534727,  -32.140148,  -11.725754, -42.368683, -2.470941,   -55.349064,  -10.195896,
        -12.208207,  -13.397604,  -23.131149, -0.587573,  -36.760338,  7.040216,    -34.012005,
        1.381208,    -35.579346,  -3.644057,  -24.950256, -16.921425,  -8.950853,   -27.503458,
        -28.368336,  2.430574,    -8.371444,  3.282282,   -23.464176,  8.432723,    -31.286985,
        15.031054,   -31.037350,  10.719612,  -53.771450, 13.962810,   -38.992592,  7.355238,
        -32.977085,  -1.237685,   -41.825035, 1.773591,   -30.140985,  20.474287,   -30.213522,
        18.566261,   -50.207985,  17.927973,  -18.891806, 13.177832,   -101.069244, 31.292627,
        -9.203317,   0.065132,    -29.540184, 13.170042,  -72.705971,  19.300766,   -34.497849,
        31.574734,   -27.632315,  21.758854,  -40.860779, 25.149187,   -7.416136,   21.216198,
        -23.457956,  28.383585,   35.030888,  -0.519858,  101.487328,  -10.020020,  -24.049023,
        21.313000,   -18.877562,  16.849173,  -10.848315, 26.175205,   -2.156383,   27.036785,
        -15.918185,  28.667776,   1.381396,   21.810799,  46.823456,   15.649759,   2.068827,
        22.722736,   11.687594,   12.366412,  30.218410,  -7.564914,   16.591484,   20.587652,
        -3.538779,   21.737072,   0.057003,   28.550148,  3.551621,    31.247078,   64.207718,
        21.587751,   73.831375,   14.062613,  -87.878838, 33.158684,   15.600229,   -25.163656,
        21.228170,   -44.754185,  3.427351,   -11.982707, 19.238253,   -27.092695,  20.748129,
        -71.661713,  7.025368,    -62.458885, 2.694125,   -113.925011, -59.908920,  -8.910312,
        -14.085199,  -1.766376,   -5.871428,  20.686737,  0.155081,    -21.008383,  -2.590916,
        -4.918633,   7.206861,    -16.380550, 21.862741,  -67.081718,  19.087353,   -119.258240,
        24.547953,   -164.439453, -3.204341,  -58.295448, -19.266193,  -3.924355,   -33.287350,
        6.134678,    -20.113783,  -21.764578, -6.425551,  -32.037560,  -17.809839,  8.638853,
        2.505882,    -27.522486,  -11.432033, -29.079294, -23.388351,  0.794900,    -23.017286,
        15.388156,   -42.794910,  28.938356,  -10.921620, -29.100245,  -38.628948,  10.466878,
        -15.240140,  -10.331729,  -35.650028, 15.670360,  -33.458256,  45.764923,   -17.025606,
        8.160181,    -36.880966,  20.186232,  -38.836712, 57.258972,   -46.737045,  39.342907,
        -16.294029,  -4.810544,   -30.887964, 23.967234,  -64.134918,  91.836975,   -31.280941,
        35.424713,   -8.882055,   -3.769284,  4.110783,   -28.113527,  -56.405640,  55.577377,
        -65.531219,  52.039944,   -55.708183, 66.170914,  44.384205,   -18.855005,  13.277428,
        -10.960469,  -41.250408,  67.332481,  34.194241,  -48.165169,  -64.074532,  101.108047,
        -27.937922,  30.919462,   -63.803699, 61.800541,  -57.286644,  56.919548,   -62.002735,
        66.910896,   -56.100319,  73.298027,  -29.497967, 79.039001,   52.869545,   -0.106766,
        23.990023,   21.692019,   -63.298058, 76.548927,  -75.035004,  103.985771,  2.841338,
        22.078718,   146.451630,  -96.070091, -8.344470,  47.088932,   112.754623,  -73.971924,
        -30.983448,  -38.762962,  4.359663,   -29.936087, -15.568334,  -4.495789,   -62.185318,
        1.370325,    -0.844012,   -30.077076, -59.084019, -10.074053,  6.321550,    -25.922781,
        -28.726540,  -37.523796,  -36.047741, -30.507761, -14.584148,  -22.459040,  11.074463,
        -14.383358,  -27.440229,  6.340882,   -5.293648,  3.990632,    12.558496,   0.490109,
        22.373486,   -4.806017,   5.031710,   -25.621906, 19.255234,   -44.622978,  -32.276997,
        -13.014376,  31.063126,   -10.125954, 1.865761,   14.579318,   -18.883657,  23.918816,
        -6.442661,   13.953602,   -17.890156, 0.353513,   -61.399868,  -1.042542,   -75.710197,
        -1.531941,   -12.396116,  -2.776032,  -69.835526, 31.750732,   -57.930992,  35.590073,
        -40.158104,  27.183075,   -26.974955, 27.760946,  -45.276340,  19.784891,   -24.095661,
        -3.481326,   -50.776283,  21.149427,  -92.998444, 36.712482,   -58.576748,  29.292063,
        -139.246201, 45.778194,   -77.957840, 38.385723,  -71.200073,  34.492321,   -42.241318,
        35.426308,   -5.416038,   9.173932,   -6.778502,  -5.157028,   0.068140,    16.263569,
        8.357634,    37.711361,   -99.531837, 43.459240,  -127.511681, 52.744545,   -34.313229,
        50.071720,   -105.407700, 50.949116,  -49.152306, 19.772972,   53.527294,   -18.922472,
        -55.305988,  22.124706,   32.213062,  -6.070159,  -40.575043,  28.488230,   -16.760103,
        33.747070,   -19.139648,  37.342682,  -25.326601, 30.280733,   -245.325043, 37.385166,
        228.752945,  -106.201927, 66.739403,  -18.668522, 88.785912,   -40.852352,  37.964607,
        -31.214901,  145.388779,  -38.621162, 117.562988, -25.494797,  -46.874950,  30.956379,
        -354.159424, -31.826305,  0.000000,   0.000000,   90.000000,   90.000000,   77.206879,
        95.824257,   14.768440,   61.799728,  -10.156163, 38.937294,   -9.782407,   13.552691,
        -9.308308,   16.168140,   17.129063,  15.048116,  10.253757,   11.037024,   -3.964362,
        -9.734580,   22.459909,   72.498604,  -1.679296,  1.483881,    -23.543596,  -13.542661,
        19.995026,   7.444685,    32.949238,  -0.978416,  5.520577,    14.448606,   10.152255,
        24.516113,   66.610886,   29.860710,  3.169930,   1.307637,    0.000000,    0.000000,
        -0.920225,   1.295183,    3.242182,   2.902551,   2.950736,    3.423536,    1.698824,
        5.473147,    0.000000,    0.000000,   0.000000,   0.000000,    5.443916,    -2.327198,
        1.817245,    -2.782181,   10.319000,  -4.940803,  17.685656,   2.213572,    0.000000,
        0.000000,    20.000000,   10.000000,  3.554976,   -2.096722,   -5.127037,   -44.547249,
        11.678168,   -17.265118,  6.627392,   4.197698,   -48.138519,  -30.302851,  -3.386801,
        -14.488069,  7.450212,    4.783317,   -29.812092, -41.749401,  -13.086692,  -12.698454,
        5.053765,    9.483117,    -56.826988, -11.905109, -8.793661,   -6.954278,   1.670203,
        18.441372,   -70.999084,  -2.817363,  -53.091202, 18.655708};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
