#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.669594,   1.000000,    1.964343,    2.774440,    8.599006,    0.000000,    -109.946732,
        140.249557,  308.319336,  368.967377,  328.310913,  411.966797,  425.551422,  639.288330,
        885.553040,  1168.475586, 0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -22.396944,
        7.848115,    -23.156725,  -5.203487,   -18.349506,  -11.345901,  -24.959673,  -28.260025,
        -7.519975,   16.697371,   3.212519,    -7.606772,   24.691431,   -8.592211,   -12.175619,
        -22.474564,  -7.161149,   4.097458,    -3.832191,   2.217997,    -17.305401,  -0.237116,
        1.306786,    -5.653667,   -8.741855,   -1.793514,   4.210416,    -2.786460,   24.011143,
        -4.310829,   10.496724,   -22.902075,  8.462827,    7.615916,    -2.572366,   17.045094,
        10.753871,   3.262153,    18.112530,   -9.749837,   -8.204070,   2.983104,    11.728577,
        3.206728,    -0.782836,   5.242743,    -14.363701,  -4.003583,   24.093895,   31.051989,
        14.320463,   20.287348,   15.233597,   1.841649,    13.252547,   -0.019161,   24.610373,
        5.653304,    3.933577,    14.051702,   -26.691717,  12.245599,   -3.364678,   5.765303,
        17.583408,   54.492077,   44.944355,   40.373608,   3.157675,    33.703712,   38.962006,
        -5.853265,   56.999619,   -15.715707,  49.569469,   23.471758,   88.314278,   16.907007,
        33.943001,   6.535235,    170.942810,  119.570786,  121.894493,  159.185898,  238.119888,
        127.657776,  184.897507,  121.935448,  150.529251,  114.326225,  121.812256,  137.013992,
        -25.799568,  148.609375,  24.209641,   129.941406,  0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -300.465088,
        -40.090923,  -26.692169,  -54.276672,  -117.562424, -14.185555,  -40.658306,  -26.111168,
        -27.878168,  -8.370568,   -12.076075,  -20.505491,  -53.111366,  -78.476158,  -190.952057,
        12.300412,   -62.094620,  -61.816608,  -69.853798,  -0.709719,   -45.494305,  -28.103775,
        3.159453,    -2.554180,   -12.685863,  2.999898,    -1.901690,   0.103463,    -23.275751,
        -8.129630,   -31.651644,  -12.275833,  -27.109074,  -18.379824,  -8.608326,   -6.702484,
        -7.539870,   -4.215134,   11.110359,   16.078520,   33.689667,   12.096751,   1.554773,
        -11.988264,  -2.094640,   -21.460686,  -31.184788,  -23.192284,  -17.556686,  -20.133755,
        2.782276,    -6.844532,   26.727907,   18.399343,   12.311180,   24.619860,   6.976421,
        28.432009,   28.712317,   1.771800,    30.082735,   9.288016,    -8.422839,   -13.066491,
        -2.630828,   -33.956081,  13.428581,   -9.193933,   19.546110,   8.844640,    55.578960,
        19.238958,   19.514368,   16.960951,   63.931911,   13.639331,   -3.486977,   0.719377,
        -6.772720,   -4.860219,   -37.286205,  -34.208546,  10.860556,   10.209334,   51.152821,
        5.292340,    64.773468,   7.930266,    82.176834,   -7.927341,   134.236252,  0.969369,
        33.992111,   20.524305,   -31.997849,  -5.229355,   18.122480,   -29.244715,  -28.851107,
        -26.645287,  9.833145,    -6.011150,   60.397343,   5.115058,    17.258577,   3.402207,
        15.784018,   -19.583637,  -25.063330,  -19.022924,  -28.631838,  -26.403902,  -71.908508,
        -93.000298,  -74.975883,  -64.356384,  -14.150753,  -32.258026,  -59.307129,  -27.837187,
        17.688860,   7.034926,    -2.826045,   -5.081343,   -154.198318, -10.679695,  -184.350830,
        -95.701378,  -82.360542,  -45.940079,  -44.255264,  -52.279697,  -29.464203,  2.610189,
        -56.201000,  13.704852,   -23.299126,  -0.799792,   -32.842716,  -9.951564,   -40.993065,
        -9.766734,   -61.179165,  -1.176007,   -7.266562,   -34.375999,  -7.964761,   -20.742752,
        -12.262431,  -6.904751,   -13.321319,  6.127130,    7.019291,    1.652829,    -5.129989,
        -0.435741,   27.900455,   -26.082350,  -49.475052,  -19.791082,  -8.044879,   -14.418787,
        15.958725,   -7.703422,   15.127518,   4.380318,    10.021210,   17.545408,   11.165333,
        18.225943,   38.635590,   -21.546606,  14.682365,   -26.994545,  6.494721,    -39.649719,
        20.020760,   -32.141293,  -20.751160,  -0.368785,   17.038429,   8.080026,    32.645222,
        16.644609,   22.690197,   -7.121984,   16.580822,   -1.456866,   39.696602,   2.438577,
        14.425243,   -29.122465,  5.430691,    1.734103,    24.650585,   2.554853,    10.564713,
        6.486946,    51.120750,   12.649650,   47.494514,   20.886311,   55.425583,   -5.571170,
        3.573715,    14.529923,   -2.026136,   -6.533236,   26.860889,   -13.540759,  58.819504,
        -5.797656,   40.641201,   -15.079993,  18.690807,   -3.909444,   50.821915,   16.808981,
        102.496651,  28.003357,   79.914284,   -27.911472,  37.045940,   22.685131,   32.884537,
        -17.163355,  20.777401,   -10.992110,  31.853901,   -2.035480,   -77.046265,  15.543370,
        33.211399,   -7.196704,   34.027153,   10.808122,   15.486839,   1.465884,    -31.246937,
        -21.727564,  -43.157318,  15.519588,   40.696163,   -27.653522,  52.369698,   -9.984155,
        -20.879116,  8.346572,    -4.898645,   5.194283,    -65.073723,  -22.401903,  6.211298,
        17.468355,   -10.963581,  -23.829803,  25.559704,   -21.505840,  8.384210,    -9.626764,
        2.354542,    -8.558002,   2.930655,    -7.609506,   -11.631554,  -10.474566,  -17.281286,
        -8.979069,   -23.373095,  -8.916617,   -6.356289,   -35.068649,  -26.275631,  -12.620653,
        -11.533031,  -5.956055,   -9.656826,   -8.072607,   -24.078711,  -10.859265,  -17.055077,
        -17.138056,  -40.381588,  -18.888575,  -51.047501,  -12.348944,  -51.096386,  -12.774560,
        -14.964158,  -9.612997,   -27.659212,  -0.757146,   -37.609692,  -2.137697,   -17.669668,
        -2.621983,   -28.939657,  -10.834540,  -4.053623,   -36.848354,  -4.361658,   -25.084316,
        -29.218454,  -28.272505,  0.726121,    -4.777126,   5.961074,    -4.884479,   -14.241881,
        3.237553,    -12.893007,  13.164752,   -50.186867,  2.183600,    -45.418091,  2.954299,
        -30.876440,  7.012460,    -84.459099,  -2.104330,   -14.391341,  8.661815,    -36.286427,
        11.415368,   -54.761784,  6.458077,    -2.639581,   -2.151016,   -90.754616,  10.085227,
        -12.153012,  3.868317,    -26.330154,  12.652303,   -71.799141,  11.874644,   -20.637247,
        28.474628,   -36.017372,  11.656093,   -23.842850,  10.631780,   -21.071198,  8.889009,
        -8.556850,   17.719788,   20.387184,   9.681680,    103.494171,  -16.340767,  -49.641846,
        15.639579,   1.187157,    21.252167,   -48.504227,  30.140335,   -0.433298,   23.026299,
        -16.599396,  23.928391,   -9.104656,   15.575532,   26.592798,   20.863632,   7.803618,
        16.940174,   19.539066,   10.561149,   4.103823,    -0.730501,   -51.648983,  20.663326,
        -33.985394,  25.823513,   -29.112446,  22.324600,   -24.804005,  23.949169,   -43.542606,
        29.263054,   -2.563604,   26.066177,   -45.956608,  18.697990,   27.833054,   -25.518011,
        12.201421,   -0.022683,   24.118568,   -59.898167,  3.590895,    -16.697514,  -0.167779,
        -34.027031,  -56.123741,  -45.358475,  -24.923002,  -121.179573, -90.243309,  -46.040604,
        -22.818361,  5.396136,    19.824131,   -27.820364,  12.161172,   -18.684891,  2.613095,
        -33.194458,  4.934987,    -23.145655,  -1.232820,   -48.913185,  -8.268265,   -128.215912,
        -69.015228,  -81.219650,  -0.426711,   -26.815081,  2.366982,    -6.592929,   -21.342657,
        28.443783,   -6.513469,   -28.260614,  -8.247935,   -27.344381,  -11.896027,  -20.612919,
        4.086962,    -39.200161,  2.877303,    -75.571686,  6.015164,    -32.173878,  4.760659,
        -5.045142,   -12.495503,  18.673082,   10.726090,   -5.275321,   -21.382219,  18.702486,
        -11.104274,  -5.776498,   -21.312038,  12.959444,   -23.429558,  46.069950,   -5.314170,
        -11.825525,  -30.534355,  26.313786,   -35.296299,  62.302296,   -15.670989,  48.462364,
        -1.805343,   28.793766,   -11.746908,  23.190849,   -34.070763,  56.339230,   -10.179041,
        0.689399,    -14.541952,  5.811239,    -9.119734,   30.054802,   -1.992162,   14.715420,
        -17.546339,  34.161369,   4.042799,    33.298271,   68.409966,   -45.910679,  73.968727,
        -103.246674, -15.102757,  34.833275,   15.242002,   -21.051777,  -47.854012,  84.689491,
        -27.419441,  89.754707,   4.129977,    69.761772,   -64.988792,  107.686127,  -33.673058,
        87.261009,   -17.324024,  31.947815,   -26.615452,  74.402046,   12.611039,   36.288254,
        31.469749,   20.823502,   -59.776642,  133.561615,  -64.106148,  97.758842,   -18.654371,
        73.757820,   57.151615,   -12.728932,  105.059929,  -57.375126,  106.439308,  -33.370762,
        -3.600879,   43.884777,   33.405678,   1.334427,    -37.244484,  13.027800,   -115.103958,
        29.318579,   -42.609543,  0.062430,    -72.912720,  13.196651,   21.980576,   6.932976,
        24.240805,   -11.342521,  -25.186380,  19.767111,   13.583965,   2.315511,    -36.224583,
        -10.964937,  -80.566322,  9.143163,    -86.021637,  5.294360,    -37.120457,  5.555647,
        -10.171246,  5.309218,    -2.218455,   1.495452,    54.490471,   -49.227066,  -41.733440,
        -22.940327,  -50.097469,  -10.083691,  -48.503014,  -7.687366,   -38.514908,  -1.132403,
        -50.450066,  -9.611689,   -35.940155,  -18.517229,  -49.419800,  -11.016242,  -123.417969,
        -38.895206,  -11.199099,  -30.565512,  -46.159069,  -10.305457,  -71.898140,  -8.464285,
        -82.292595,  -4.927850,   -36.557034,  -11.195327,  -19.341885,  -21.510958,  -70.312851,
        -36.298519,  -30.107994,  -16.894993,  -93.196297,  6.327053,    -58.632294,  -1.826077,
        -175.026794, 8.387026,    -106.999832, 4.315748,    -55.142429,  -3.603981,   -14.713862,
        -5.348805,   -1.937422,   -16.718817,  -106.351967, -9.915170,   -47.692932,  1.271547,
        -90.330734,  22.225317,   -89.126678,  13.268586,   -161.681137, 15.306048,   -10.756313,
        19.376249,   -78.801384,  22.367908,   -87.564514,  13.691747,   -94.779099,  -10.008782,
        -63.494129,  8.505614,    -51.309689,  -5.916517,   -76.370987,  0.319142,    -112.981255,
        21.940231,   -150.527252, 30.699829,   -148.704773, 45.337242,   -284.985504, 6.857861,
        -4.859978,   -31.144262,  7.998165,    -0.950373,   -31.287487,  -15.821733,  -64.470749,
        -0.541501,   -153.435715, -10.508551,  87.387535,   -36.201344,  -61.235401,  17.568411,
        -269.690735, -60.460098,  0.000000,    0.000000,    90.000000,   90.000000,   115.789108,
        120.086853,  69.139359,   64.517906,   45.388710,   19.249569,   57.717075,   -14.602367,
        64.245476,   -27.470598,  38.068455,   28.973011,   11.419985,   19.080339,   -1.991788,
        2.540293,    -4.473036,   4.328917,    31.539688,   66.795189,   5.221924,    -10.212407,
        -53.316723,  -13.006063,  17.233065,   15.078192,   32.850060,   1.069816,    6.224619,
        18.050053,   18.854490,   20.534790,   100.478851,  42.557983,   1.741357,    0.391461,
        0.000000,    0.000000,    -0.432995,   2.538148,    3.399136,    3.756844,    2.828425,
        4.406745,    2.825789,    3.002583,    0.000000,    0.000000,    5.930114,    -0.331542,
        1.130896,    -2.148792,   3.155262,    -2.422648,   0.966530,    -0.324302,   1.879638,
        3.340877,    9.223551,    -0.921601,   4.325905,    2.828094,    -0.298362,   10.309931,
        -0.993739,   -3.828072,   1.181281,    2.567516,    -4.923642,   -0.553566,   10.209082,
        -1.535905,   4.931177,    3.193608,    -1.931853,   -0.581373,   0.626975,    -6.447545,
        -1.366239,   -12.573348,  20.000000,   10.000000,   5.938147,    -2.623114,   -8.875300,
        -37.172348,  12.479910,   -12.107356,  9.107042,    6.677528,    -43.047485,  -34.579395,
        -4.833519,   -13.559181,  6.705051,    13.096540,   -36.386818,  -41.676624,  -15.805339,
        -11.059982,  5.895070,    8.050795,    -53.923496,  -14.169708,  -5.392853,   -6.504736,
        2.287656,    13.279699,   -76.565262,  -21.997803,  -55.556164,  6.145802,    0.000000,
        0.000000,    -0.888282,   10.911956,   -13.961672,  13.122019,   -35.192432,  13.054229,
        -59.288074,  20.463362,   -76.999748,  25.060694,   -92.548912,  17.344864,   -155.616806,
        26.843552,   -212.125778, 9.449038,    0.000000,    0.000000};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            taperedTermToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format(
            "\nknightPawnAdjustment:\n\t{}", taperedTermToString(params.knightPawnAdjustment));

    oss << std::format(
            "\nrookPawnAdjustment:\n\t{}", taperedTermToString(params.rookPawnAdjustment));

    oss << std::format(
            "\nqueenPawnAdjustment:\n\t{}", taperedTermToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\nenemyControlNearKing:\n\t{}", arrayToString(params.enemyControlNearKing));

    return oss.str();
}
