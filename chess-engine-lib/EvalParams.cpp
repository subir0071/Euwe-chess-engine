#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        -0.295082,   1.000000,    0.294416,    2.345736,    7.906034,    0.000000,     -182.989807,
        198.914551,  399.937531,  428.489075,  412.622650,  501.458099,  522.561768,   838.110413,
        1259.530518, 1402.846069, 0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -19.268669,
        -0.223382,   -18.004692,  -16.638727,  -27.758400,  -3.532068,   -40.990952,   -33.122219,
        -22.306469,  2.053898,    3.123348,    -8.233914,   33.531792,   -10.779668,   -34.293159,
        -24.958216,  6.460325,    4.346133,    1.694992,    -2.788429,   -13.188260,   1.216323,
        -3.324780,   -6.004283,   -11.403161,  -4.479837,   -1.382329,   -10.549586,   25.770939,
        -8.507786,   -4.814805,   -23.725643,  20.684082,   8.011746,    4.937711,     19.215712,
        6.369697,    -0.375417,   18.879519,   -1.890547,   -5.996411,   11.405814,    10.232774,
        1.419810,    -6.487717,   7.410676,    -18.542797,  -3.079702,   42.051083,    28.943588,
        27.231270,   28.809822,   22.422871,   6.235045,    16.567120,   1.178103,     19.798512,
        6.937631,    -1.391499,   18.250612,   -25.384380,  18.972084,   -18.802605,   15.044089,
        39.420589,   62.315361,   32.458447,   53.116840,   27.277426,   39.451397,    48.636181,
        -2.564478,   43.103130,   -17.054092,  71.943771,   26.172077,   38.353638,    32.218525,
        -2.776368,   30.154339,   240.163803,  161.095490,  200.592224,  187.995514,   200.402008,
        152.329453,  202.841354,  133.712494,  158.396484,  125.383003,  168.729736,   167.267960,
        -123.046272, 209.476959,  -64.779785,  183.338745,  0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,     -320.125427,
        -53.642189,  -35.387131,  -65.927612,  -148.780930, -0.726082,   -24.719242,   2.132512,
        -23.256496,  -41.355621,  0.445690,    -54.722317,  -69.525505,  -72.040604,   -158.566132,
        -30.984531,  -73.922745,  -48.130440,  -79.888443,  14.395845,   -16.218296,   -37.878056,
        5.606987,    -12.041565,  -9.154467,   -33.521004,  -14.782077,  -12.945200,   -22.170317,
        -26.857950,  -18.849680,  -30.832558,  -32.055477,  -16.613848,  -20.790455,   -10.164804,
        -11.635225,  -13.935299,  12.843304,   13.245168,   53.199997,   12.193635,    3.343486,
        -16.774435,  10.896854,   -42.263245,  -38.585117,  -12.606353,  -19.961199,   -4.331093,
        7.656873,    19.357660,   27.278299,   25.221155,   6.707871,    24.081369,    21.305277,
        37.690506,   37.277214,   -1.972619,   38.957340,   -6.774036,   -3.064817,    -8.664770,
        -13.391277,  8.110855,    24.561275,   6.141415,    14.005273,   20.996088,    55.945995,
        32.568806,   1.138556,    19.840599,   57.807693,   13.816163,   -28.191996,   1.101654,
        -19.690281,  5.022733,    3.546084,    -21.004738,  2.460072,    12.757701,    49.891911,
        12.646556,   82.303375,   27.957939,   117.232918,  -38.600208,  116.634338,   16.024536,
        28.808922,   5.471813,    -71.963181,  15.367640,   -50.346294,  -10.808175,   13.578458,
        -15.206183,  61.138866,   -20.013077,  45.110241,   31.250805,   6.868748,     19.412544,
        40.943184,   -14.480856,  -48.101364,  -25.918964,  -108.879921, -27.159538,   -17.220287,
        -44.324257,  -140.078186, -41.500053,  -143.570938, -8.734997,   -46.490429,   -27.678955,
        -22.378674,  1.254234,    83.517426,   7.572978,    -134.575378, 39.384804,    -107.623260,
        -180.305145, -95.279007,  -50.395535,  -58.170994,  -32.672916,  -31.710379,   -4.338648,
        -41.033318,  21.060827,   -18.067787,  1.966042,    -29.970194,  -0.991243,    11.739511,
        13.743185,   -124.129631, 33.477043,   -5.579844,   -30.241577,  -9.669420,    -24.276457,
        -0.782658,   -12.274076,  -13.462400,  9.714495,    4.231396,    9.751802,     -5.696722,
        -6.843085,   39.464436,   -16.162317,  -47.527126,  20.471617,   -20.432331,   -16.516411,
        20.035494,   -15.386162,  19.210787,   -1.924213,   9.332333,    8.046907,     13.973083,
        20.599710,   39.014023,   -11.124571,  20.652351,   -27.182686,  -8.119558,    -52.161869,
        27.085091,   -69.724449,  -11.995497,  -0.674327,   17.127684,   9.613808,     38.483402,
        9.980005,    29.638371,   -13.735158,  18.531130,   0.250981,    54.882797,    4.863989,
        23.387819,   -34.434769,  -13.799325,  -8.061964,   18.667006,   13.607130,    20.541073,
        -0.647966,   64.063828,   6.396162,    42.770775,   17.670788,   58.760155,    12.733227,
        8.659782,    -4.761315,   -11.950056,  -5.962778,   12.832586,   -1.656179,    28.239014,
        7.636003,    41.190273,   -5.380984,   48.097332,   -16.877455,  53.256676,    22.121347,
        145.899155,  16.816339,   114.336731,  -28.774210,  64.761009,   -20.080660,   8.119739,
        -45.782589,  -10.980438,  0.421276,    -6.054937,   -6.471499,   -21.249174,   44.353771,
        16.954636,   -15.259346,  54.421406,   -2.089143,   50.709045,   5.721062,     25.036715,
        -32.635921,  -85.637062,  3.337255,    -69.211693,  -39.546383,  -23.682098,   -10.183699,
        -259.799011, -1.574503,   -78.826271,  17.401638,   -40.339134,  1.098626,     25.790907,
        1.655227,    57.425217,   -18.725168,  44.008617,   -21.585964,  24.442135,    -11.871008,
        7.498057,    -11.335990,  8.733462,    -17.744007,  -10.859543,  -22.450640,   -30.778675,
        -9.600712,   -59.761215,  -8.952582,   -41.229397,  -19.492455,  11.838494,    -16.673512,
        -23.040426,  -11.390318,  -24.418413,  -4.176620,   -15.687382,  -14.886415,   -1.153984,
        -32.758339,  -34.144909,  -15.605027,  -65.320816,  -6.561370,   -154.908951,  21.909309,
        -20.055782,  -8.264020,   -13.215287,  -6.996072,   -46.790813,  3.501493,     -19.116707,
        -14.278583,  -25.178888,  -22.671213,  -22.558969,  -36.723701,  -30.663008,   -27.264936,
        -74.025925,  -23.256826,  10.069428,   -5.147760,   38.220898,   -9.072447,    -7.572720,
        4.995824,    -17.626848,  -3.512174,   -61.491245,  4.205207,    -56.287998,   -3.636681,
        -47.608238,  -4.898306,   -117.435509, 21.878967,   -6.946734,   10.333209,    -6.331230,
        9.254678,    -41.373486,  7.672376,    14.125880,   -11.496204,  -93.182228,   8.137092,
        -20.179100,  18.742115,   -49.799603,  12.048509,   -76.767700,  14.410033,    -28.642029,
        30.123474,   -21.375586,  12.432006,   -25.830139,  10.263366,   -20.842203,   -4.284376,
        -16.137436,  5.594445,    -23.302395,  18.340315,   74.262459,   -18.319746,   -61.632347,
        21.327141,   21.729439,   25.556187,   -23.721748,  30.819599,   -18.678156,   29.158703,
        -19.428730,  33.793533,   -39.535885,  31.040226,   3.960525,    29.509186,    -8.656713,
        22.334957,   56.503548,   3.158999,    6.480247,    3.830302,    -26.263048,   16.279610,
        -64.355156,  26.166588,   -46.005142,  34.850681,   -33.791950,  27.293205,    -50.245850,
        41.358639,   -38.180054,  39.821369,   -91.064484,  27.526627,   -18.301136,   44.077938,
        -14.823859,  -5.400530,   21.531275,   -144.334549, -2.864968,   -24.157303,   -6.248387,
        -56.529732,  -43.716850,  -105.440224, -62.439812,  -118.716728, -223.787460,  230.386337,
        -23.835419,  -54.552357,  -7.253789,   -1.959458,   5.448852,    -33.027584,   -4.232076,
        -6.571764,   5.587070,    -84.863785,  -8.851121,   -71.138657,  -21.346611,   -115.342941,
        -26.172808,  -178.441818, -27.959040,  64.328720,   5.991923,    1.139809,     -15.698586,
        32.115025,   6.156066,    -30.780832,  0.451770,    -47.640408,  -4.783269,    -6.476130,
        12.838763,   -31.726973,  -6.673375,   -52.668922,  14.899169,   -56.775452,   7.096965,
        35.464191,   -7.928136,   3.493803,    19.423765,   -31.539719,  3.413829,     18.861750,
        6.769187,    5.755190,    1.447513,    -50.267113,  4.358298,    -20.901514,   -33.057316,
        77.491646,   -29.583641,  117.612228,  -30.889009,  89.811050,   8.105464,     50.232082,
        -16.423927,  86.165695,   12.097800,   36.633984,   -6.517110,   39.128807,    -7.814286,
        23.253059,   -21.266018,  25.994865,   24.112673,   7.647572,    1.301318,     60.360306,
        6.070807,    30.864113,   10.072131,   71.901413,   54.494854,   11.034897,    84.304100,
        -131.229797, 35.054020,   -34.742577,  13.723548,   -12.586880,  -32.142841,   109.476326,
        -2.228868,   113.621231,  32.077152,   23.064796,   5.376513,    59.147667,    30.310091,
        0.461605,    6.172488,    18.093777,   44.907986,   -5.335022,   -2.723069,    73.222015,
        60.671543,   5.130417,    -30.726185,  114.749893,  4.042056,    51.083454,    -27.365133,
        117.403854,  -6.378049,   84.337067,   129.789124,  -133.143585, -27.006199,   154.432312,
        -12.021444,  16.994137,   22.844072,   7.318806,    -34.810127,  26.337748,    -278.431122,
        75.945786,   -35.830479,  -1.406441,   -65.510841,  18.599661,   14.692104,    14.131552,
        6.270456,    0.660225,    23.185734,   10.701143,   -69.529778,  19.558479,    -1.493665,
        -7.927570,   -77.291023,  16.871843,   -85.259857,  7.753636,    -36.321377,   6.786479,
        8.105346,    6.158629,    5.639816,    0.318917,    53.336823,   -31.083508,   -2.365110,
        -28.092850,  -37.454273,  -13.184445,  -45.378166,  -11.792364,  -24.924456,   -8.952347,
        -53.414066,  -7.376807,   -11.619166,  -23.965733,  -43.638294,  -22.899000,   65.036980,
        -42.238819,  53.830261,   -40.610855,  -7.638339,   -15.526915,  -6.904998,    -9.243452,
        -6.250980,   -10.811504,  2.887204,    -15.413193,  25.522675,   -40.042297,   -40.143024,
        -49.509342,  4.721224,    -24.896593,  47.703110,   -8.631274,   44.126858,    -23.213230,
        -98.739082,  12.892968,   9.818934,    -9.952861,   77.744759,   -27.251604,   78.567543,
        -16.163614,  76.520226,   -37.219894,  11.871268,   -2.670708,   24.753017,    14.241160,
        25.930346,   21.587132,   -24.366760,  10.659494,   -19.154825,  13.459122,    30.198494,
        31.601286,   -20.877079,  35.993114,   4.474339,    12.319437,   -55.424980,   -12.193768,
        -1.853421,   31.646051,   71.863754,   7.671422,    50.024998,   -9.091053,    -29.405890,
        16.473555,   33.954597,   21.864340,   -90.927094,  51.642105,   -191.706650,  -18.872875,
        57.727322,   -41.987614,  43.706615,   -6.370090,   -20.651983,  7.438292,     -29.566027,
        12.070642,   -77.544792,  -12.774672,  31.956795,   -23.393167,  -90.838074,   19.667110,
        -285.798370, -88.862122,  0.000000,    0.000000,    90.000000,   90.000000,    139.745712,
        131.008820,  82.423119,   64.881683,   56.392723,   12.594033,   59.144749,    -28.940706,
        68.560127,   -39.402802,  47.489822,   2.250920,    16.575512,   24.935768,    4.218642,
        3.209622,    23.642742,   -0.990309,   14.899360,   -2.408917,   5.251652,     0.810937,
        0.000000,    0.000000,    -10.208163,  -8.479095,   -19.230839,  -5.444957,    -30.892506,
        -58.387997,  146.170822,  -270.941437, 20.814142,   -3.658184,   35.601624,    -11.005121,
        21.971004,   -7.635552,   9.910644,    -5.889038,   -0.000000,   0.000000,     -11.877292,
        -18.526472,  -20.980398,  -24.947718,  -37.894562,  -2.647111,   154.866745,   10.831787,
        41.683689,   80.636993,   10.424779,   7.939088,    -60.057983,  -55.971596,   17.183550,
        18.759348,   35.481888,   8.252250,    -428.505341, 38.509483,   -56.923534,   -44.170860,
        -6.416034,   -31.849249,  4.800632,    -15.065651,  0.000000,    0.000000,     1.186307,
        22.669701,   6.036671,    37.575909,   1.855089,    62.045967,   -13.227235,   163.854645,
        -146.950165, -20.812874,  -117.472435, -53.656487,  -57.772957,  -36.786674,   -39.674358,
        -20.100819,  0.000000,    0.000000,    8.042501,    23.503494,   18.225014,    55.329559,
        11.439955,   93.378563,   -90.683998,  139.061646,  9.974673,    -1067.966675, -404.342041,
        -138.253220, -307.526459, -31.653347,  -121.219513, -96.180649,  0.000000,     0.000000,
        181.120422,  -39.391430,  346.506744,  -28.722641,  579.959412,  -123.068947,  1021.341125,
        -432.042175, 2.107932,    0.360185,    0.000000,    0.000000,    1.121042,     3.308199,
        3.927315,    5.007668,    3.960882,    4.750734,    1.891031,    8.980292,     0.000000,
        0.000000,    8.115666,    -0.797585,   0.078072,    2.802664,    1.373769,     -2.375970,
        3.744687,    -0.648143,   3.413970,    2.544490,    12.752830,   -2.832786,    6.049837,
        2.382740,    0.625861,    13.321073,   1.637499,    -5.294747,   0.998021,     -0.136672,
        -4.965555,   -1.052822,   13.967775,   -3.403910,   0.410047,    3.594378,     0.402627,
        -4.351985,   4.225418,    -7.486731,   2.020006,    -16.061647,  20.000000,    10.000000,
        4.214015,    -3.071950,   -10.094131,  -48.594376,  10.765211,   -15.163332,   7.905412,
        4.024246,    -35.792377,  -38.044868,  -5.109684,   -13.976657,  6.154618,     14.480808,
        -47.551346,  -44.420166,  -16.071365,  -13.875586,  6.327209,    11.681149,    -55.637100,
        -16.571169,  -5.232138,   -6.116945,   -0.609030,   33.379265,   -80.056900,   -62.773640,
        -68.563606,  27.568817,   0.000000,    0.000000,    9.052923,    -41.439083,   10.763896,
        -41.861534,  33.945038,   -39.389732,  69.560921,   -51.941689,  92.403885,    -61.144573,
        132.256500,  -66.128052,  157.742859,  -58.924652,  206.630112,  -43.279400,   0.000000,
        0.000000,    -17.564821,  23.990507,   8.693542,    36.650707,   -1.564827,    39.197376,
        -3.382957,   28.438011,   -1.164872,   38.396446,   0.000000,    0.000000,     0.000000,
        0.000000,    -3.921592,   -2.012420,   15.247387,   -37.052422,  52.964386,    -65.733368,
        48.869724,   -80.894722,  112.834145,  -107.597580, 0.256515,    0.192172,     0.302855,
        0.970346,    0.895009,    1.000000,    1.000000,    1.000000,    1.000000,     -0.003465,
        0.124653,    0.122840,    0.035199,    -5.571351,   0.189259,    -11.345540,   -71.802032,
        -21.701832,  -55.064663,  -65.767059,  -11.104106,  -57.885834,  -82.095459};

std::string evalCalcTToString(const EvalCalcT term) {
    return std::format("{:>6.1f}", term);
}

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

template <std::size_t N>
std::string arrayToString(const std::array<EvalCalcT, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(evalCalcTToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopPawnSameColorAdjustment));

    oss << std::format(
            "\nbishopEnemyPawnSameColorAdjustment:\n\t{}",
            arrayToString(params.bishopEnemyPawnSameColorAdjustment));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    const auto getTropismPieceType = [](int idx) -> std::string {
        if (idx == EvalParams::kDoubledPawnTropismIdx) {
            return "Doubled pawn";
        } else if (idx == EvalParams::kIsolatedPawnTropismIdx) {
            return "Isolated pawn";
        } else if (idx == EvalParams::kPassedPawnTropismIdx) {
            return "Passed pawn";
        } else {
            return pieceToString((Piece)idx);
        }
    };

    oss << "\nownKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.ownKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << "\nenemyKingTropism: {\n";
    for (int pieceIdx = 0; pieceIdx < EvalParams::kNumTropismPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                getTropismPieceType(pieceIdx),
                taperedTermToString(params.enemyKingTropism[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format("\ncontrolNearEnemyKing:\n\t{}", arrayToString(params.controlNearEnemyKing));

    oss << "\n\nkingAttackWeight: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.kingAttackWeight[pieceIdx]));
    }
    oss << "}\n";

    oss << std::format(
            "\nnumKingAttackersAdjustment:\n\t{}",
            arrayToString(params.numKingAttackersAdjustment));

    oss << std::format(
            "\noppositeColoredBishopFactor:\n\t{}",
            arrayToString(params.oppositeColoredBishopFactor));

    oss << std::format("\nsingleMinorFactor:\n\t{}", evalCalcTToString(params.singleMinorFactor));
    oss << std::format("\ntwoKnightsFactor:\n\t{}", evalCalcTToString(params.twoKnightsFactor));
    oss << std::format("\nrookVsMinorFactor:\n\t{}", evalCalcTToString(params.rookVsMinorFactor));
    oss << std::format(
            "\nrookAndMinorVsRookFactor:\n\t{}",
            evalCalcTToString(params.rookAndMinorVsRookFactor));

    oss << "\n\npiecePinnedAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                taperedTermToString(params.piecePinnedAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
