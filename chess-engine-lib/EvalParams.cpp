#include "EvalParams.h"

#include "Piece.h"

#include <ranges>
#include <sstream>

namespace {

constexpr EvalParamArray kDefaultParams = {
        0.204272,    1.000000,    1.892669,    3.755643,    8.460752,    0.000000,    15.606586,
        99.963402,   386.596436,  279.467926,  379.609283,  300.173950,  497.412781,  555.271790,
        1062.547241, 931.966553,  0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -30.286831,
        22.593884,   -20.342266,  3.804340,    -26.946732,  6.964850,    -25.618923,  -42.995972,
        -13.372436,  44.695908,   11.077754,   -5.252801,   38.730190,   -13.744987,  -4.963978,
        -12.461638,  -17.586306,  16.411535,   -10.513740,  3.858777,    -10.148958,  -3.488714,
        -9.014754,   2.955962,    -12.274330,  1.753129,    1.590150,    1.969934,    42.680218,
        -18.927057,  10.517200,   -10.545636,  -14.979930,  14.876785,   -13.463866,  16.759747,
        0.527714,    -2.764460,   11.914069,   -27.489891,  -5.403746,   -5.689249,   17.297260,
        -6.125218,   2.812323,    0.073082,    -15.258000,  -1.598255,   -15.269712,  45.763588,
        -3.433900,   18.443319,   -16.756443,  7.614666,    5.701138,    1.347001,    19.580334,
        -3.752195,   8.015693,    -3.533212,   2.573870,    6.821219,    -5.155872,   -3.996211,
        -8.984947,   52.162365,   51.512077,   9.692090,    -23.640650,  21.800816,   35.343563,
        -15.662478,  42.364880,   -34.970467,  26.392914,   -6.556386,   127.115822,  -4.160771,
        60.918243,   -35.630512,  162.836197,  57.350651,   80.347809,   86.580162,   82.351280,
        56.816559,   119.706963,  64.842155,   17.607960,   80.435295,   38.086170,   68.206665,
        -0.447189,   125.751640,  66.401291,   54.591290,   0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,
        0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    0.000000,    -186.530380,
        -37.401157,  -30.641390,  -58.327614,  -49.663601,  -19.327078,  -21.780319,  -23.750578,
        -47.044849,  -16.917898,  -11.176611,  -26.340841,  -51.611267,  -62.619762,  -171.879913,
        -30.855896,  -63.052216,  -39.425518,  -85.320953,  6.483840,    -14.126463,  -27.456381,
        -6.900814,   9.275505,    -4.097075,   -11.737831,  23.421835,   -14.750472,  -16.401047,
        -56.649834,  -51.779121,  -36.638123,  -29.915676,  -39.290752,  -11.707749,  1.548509,
        -2.580785,   -4.082969,   -2.778238,   4.952493,    53.150185,   0.168290,    2.130530,
        -19.006094,  13.238247,   -23.408882,  -53.464973,  10.763865,   -27.559856,  -8.892937,
        -40.886765,  1.053864,    26.058191,   14.382806,   -0.477286,   32.382866,   13.109509,
        28.077108,   26.060762,   2.137999,    7.290204,    12.365260,   -8.576525,   -5.274729,
        -11.110549,  -19.690176,  11.744983,   4.437068,    31.966801,   15.718972,   65.928703,
        11.313892,   23.724312,   23.304396,   62.531849,   10.918429,   -4.047140,   21.477917,
        42.490849,   -13.338772,  -48.036728,  -16.161764,  4.164968,    17.621477,   24.107922,
        30.978930,   91.622215,   9.078330,    128.578049,  -30.478607,  125.488930,  -10.373318,
        39.998756,   8.765444,    -2.397575,   8.753375,    -73.191635,  8.659719,    -41.264477,
        11.585474,   9.027632,    7.193811,    57.756577,   10.899498,   45.214432,   -3.397542,
        41.247349,   -0.775182,   -51.275944,  -24.108210,  48.713612,   -28.002232,  -143.486786,
        -39.958344,  -82.146721,  -25.769205,  -19.449732,  -10.765714,  -43.142605,  -24.067175,
        -50.888649,  -2.414784,   -140.435379, 6.419940,    93.409760,   12.822701,   -248.226089,
        -15.828814,  -17.448498,  -32.386406,  -1.588438,   -42.551643,  -0.671981,   -26.085546,
        -31.058775,  4.283425,    15.143999,   -32.937916,  -24.016851,  -39.508518,  -74.933022,
        3.678227,    6.284410,    -29.929932,  -5.965127,   -33.333443,  5.665933,    -12.745112,
        15.124625,   -22.074610,  0.065153,    4.692252,    0.495373,    -19.942717,  20.988894,
        -10.506494,  21.562183,   -47.657803,  -28.297689,  -59.282459,  7.186588,    -9.972089,
        7.623996,    -4.004906,   14.186172,   1.690609,    -1.832424,   3.393297,    4.744100,
        8.681986,    20.772573,   -13.784863,  -1.936601,   4.265373,    -17.819677,  -21.278702,
        14.197938,   -8.000404,   18.456139,   -3.380186,   -12.003611,  30.983339,   33.007137,
        10.901252,   9.166233,    7.191531,    -2.386753,   9.508410,    4.357475,    1.860826,
        5.910310,    -15.874177,  -11.278996,  1.821895,    -13.533478,  14.985629,   9.613753,
        3.999351,    20.371138,   19.988476,   47.101559,   4.385816,    18.060394,   -4.302788,
        -25.055803,  26.410362,   -45.226395,  27.255262,   -40.182705,  10.762357,   4.656429,
        9.579828,    4.597970,    18.940350,   13.954772,   -4.698695,   37.888100,   11.761567,
        98.096939,   12.777273,   97.968559,   -15.046006,  16.579006,   19.782272,   -0.436062,
        -11.910175,  -40.825516,  29.696424,   -7.338435,   17.311792,   -45.127159,  31.289591,
        -1.562314,   5.571300,    -45.468998,  24.515701,   -59.778130,  7.094906,    -78.854538,
        14.397387,   -231.212173, 84.217567,   91.554642,   -10.652415,  -32.113335,  -6.736632,
        -55.158321,  14.581055,   -46.247040,  30.562794,   -116.501495, 4.138200,    129.674637,
        7.045121,    -96.404358,  -6.720634,   24.557844,   -30.582474,  7.753208,    -28.992626,
        -0.841203,   -11.744651,  0.873965,    -20.307322,  -8.684825,   -19.644945,  -11.299100,
        -13.355943,  -30.200609,  -14.906217,  -14.039243,  -46.039333,  -40.463577,  6.268827,
        -28.540060,  -4.054281,   -17.131804,  -14.509011,  -6.566482,   -16.931509,  -17.357054,
        -11.831030,  -33.663200,  -12.905907,  -54.823574,  12.965987,   -64.793480,  -2.029516,
        -6.977612,   -9.948386,   -28.338686,  5.985712,    -47.127728,  21.774687,   -31.024519,
        -4.015778,   -42.167564,  1.498042,    -40.997959,  -10.975977,  -5.973042,   -29.773872,
        -40.752975,  5.148478,    -11.656253,  9.928930,    -35.102451,  19.786360,   -36.410236,
        21.697723,   -26.840673,  20.349724,   -57.064365,  26.397228,   -49.757259,  19.500898,
        -28.064596,  1.770805,    -49.486103,  12.077302,   -32.320007,  25.543812,   -28.599024,
        25.284306,   -47.621761,  29.018600,   -1.477185,   13.951276,   -97.613976,  43.651085,
        -7.306918,   7.035491,    -13.600848,  10.705653,   -73.550911,  30.268158,   -30.289114,
        36.110386,   -28.231607,  27.360622,   -32.026741,  27.152386,   5.658494,    14.617438,
        -11.514197,  24.427151,   34.784828,   -1.012882,   132.792328,  -21.002390,  7.423819,
        13.432117,   -15.173705,  20.374105,   5.500114,    26.166988,   4.317213,    28.920185,
        -9.157363,   33.846985,   11.391743,   23.876875,   80.757797,   6.756972,    33.832069,
        15.603486,   15.083533,   11.082480,   36.293892,   -13.914413,  41.941032,   20.962898,
        14.529085,   23.972105,   30.925180,   23.149158,   32.314556,   31.856026,   78.754379,
        21.007227,   111.391953,  6.536671,    -42.904140,  25.884983,   16.047693,   -7.546409,
        3.324869,    -4.310958,   6.006922,    2.308964,    20.447779,   -23.601696,  25.449572,
        -69.740387,  17.382334,   -78.208374,  -13.607573,  -63.258629,  -121.053772, 66.761368,
        -22.198133,  12.642926,   5.443362,    4.978932,    0.270357,    -11.208659,  -1.985014,
        5.000493,    8.173143,    -12.340980,  25.591280,   -52.411816,  38.795162,   -146.220108,
        24.333567,   -138.997482, 1.129168,    -61.869011,  -22.501966,  -1.797794,   -32.560131,
        1.500905,    -19.590544,  -27.015514,  -6.799818,   -16.319248,  -19.889936,  5.462239,
        -1.866018,   -16.150562,  -18.116713,  -10.362384,  -22.320845,  2.901066,    -27.625639,
        17.038670,   -50.384792,  29.429729,   -24.611555,  -12.580874,  -46.935665,  7.433850,
        -19.094221,  -10.670573,  -37.380672,  12.111798,   -40.144619,  60.812252,   -11.155325,
        0.157513,    -33.503811,  -0.263629,   -33.972347,  32.133389,   -46.600307,  7.095517,
        -19.268721,  -11.489589,  -33.043087,  2.291417,    -58.823895,  71.007477,   -29.421812,
        38.398388,   -23.376936,  28.433239,   15.648073,   -26.392296,  -58.530605,  26.262280,
        -79.484268,  38.562977,   -65.639862,  46.116970,   66.048500,   -44.101662,  37.579693,
        -36.449100,  -43.342953,  53.783276,   25.604425,   -8.644244,   -66.817780,  92.626175,
        -37.777843,  42.141537,   -68.070572,  39.959408,   -69.717133,  55.836124,   -65.605362,
        42.793179,   -64.692413,  54.143864,   -35.510723,  83.463989,   38.638477,   36.542736,
        44.541355,   8.964459,    -61.904354,  67.196671,   -107.655975, 104.864807,  32.137096,
        -7.646877,   166.521530,  -80.662880,  11.688089,   53.859737,   107.379593,  -36.323280,
        -31.731310,  -40.856361,  12.631539,   -34.729111,  -17.121553,  4.366664,    -70.897362,
        4.113772,    -0.702057,   -30.798590,  -61.047142,  0.302564,    4.813111,    -27.969723,
        -28.631411,  -40.590374,  -33.272881,  -25.431387,  15.980453,   -21.988262,  35.939194,
        -21.405279,  -12.453991,  9.981265,    3.879779,    6.340937,    14.612926,   -0.617216,
        18.274994,   -4.600092,   7.976896,    -31.468782,  -142.025574, -16.112328,  -21.884138,
        -5.802849,   60.131630,   -14.078349,  33.358051,   10.699925,   -9.711904,   26.247427,
        -10.828832,  16.840712,   -18.065878,  1.954721,    -55.668373,  -7.486763,   -104.583267,
        -0.147042,   -26.026709,  4.922014,    18.572367,   24.006804,   -12.373976,  36.319218,
        25.497732,   20.180662,   -23.103712,  26.940475,   -40.304230,  22.102285,   -16.560524,
        -6.544181,   -79.977188,  24.382605,   -140.426315, 49.587730,   3.559580,    28.571709,
        -75.931747,  44.467224,   -58.483727,  41.165962,   -95.751945,  46.620136,   -27.216049,
        36.785793,   -33.399208,  16.057741,   -88.770126,  15.009410,   -51.007462,  27.203913,
        40.336395,   37.757675,   -46.485558,  43.098030,   -95.373405,  53.599949,   -57.796253,
        56.714882,   -118.474358, 55.989273,   -199.089325, 36.551537,   11.134238,   -4.313708,
        -25.811518,  22.616777,   68.432877,   -3.002633,   4.990272,    29.119474,   34.966621,
        25.894299,   -8.512845,   41.422737,   -51.401367,  30.682716,   -407.911133, 58.255322,
        252.349472,  -67.571136,  122.105247,  -18.588711,  152.997772,  -51.326515,  116.549362,
        -38.236794,  252.239471,  -69.139259,  160.372482,  -26.552589,  -26.792376,  32.232315,
        -582.298035, -0.040576,   0.000000,    0.000000,    90.000000,   90.000000,   78.006310,
        100.347580,  15.153424,   65.294708,   -1.768741,   39.066570,   -5.409608,   11.938519,
        -3.077304,   15.008694,   22.192158,   10.238354,   10.429888,   10.242466,   18.658249,
        53.568516,   12.689003,   24.243635,   7.731020,    23.691320,   -0.311156,   12.595671,
        0.000000,    0.000000,    2.188210,    -11.361223,  -10.308781,  -15.295196,  -12.097610,
        1.937340,    9.923736,    -115.224182, 18.266338,   84.729446,   0.395513,    3.297662,
        -29.603384,  4.975786,    24.052458,   6.392717,    36.337627,   -4.969548,   -517.315796,
        14.699184,   47.399731,   -41.372372,  -39.422211,  -6.326762,   3.474581,    -2.784459,
        0.000000,    0.000000,    -4.734223,   26.267078,   0.782906,    46.066547,   0.381401,
        77.942528,   -2.260277,   146.232574,  -1.568860,   -113.789452, -20.144701,  -67.660522,
        -58.583443,  -20.442484,  -40.662827,  -2.108503,   0.000000,    0.000000,    -8.094560,
        31.072844,   1.990141,    58.176361,   -23.190741,  115.228783,  133.642288,  34.581501,
        647.111145,  -648.764587, -84.175385,  -125.654228, -0.224332,   -116.941605, 18.337206,
        -93.758812,  0.000000,    0.000000,    81.530464,   -21.322304,  127.100639,  6.634629,
        255.319824,  -73.045502,  39.397266,   103.723839,  3.020927,    1.374874,    0.000000,
        0.000000,    -0.348574,   1.903510,    3.231553,    3.565121,    3.086737,    3.339248,
        1.155093,    6.969284,    0.000000,    0.000000,    0.000000,    0.000000,    5.727870,
        -3.036399,   3.395916,    -4.027833,   9.905467,    -6.638567,   19.339876,   7.272182,
        0.000000,    0.000000,    20.000000,   10.000000,   4.103021,    -2.246498,   -4.768301,
        -49.295387,  13.826701,   -21.908934,  6.906213,    6.986214,    -56.299343,  -24.933088,
        -3.085300,   -14.400973,  6.477484,    5.369962,    -30.764393,  -40.073048,  -15.055477,
        -8.881555,   4.182074,    11.719296,   -65.306259,  -5.944044,   -11.937240,  -3.646494,
        3.522868,    13.059075,   -71.208885,  -12.747756,  -50.437756,  -5.598471};

std::string taperedTermToString(const TaperedTerm& term) {
    return std::format("{{{:>6.1f}, {:>6.1f}}}", term.early, term.late);
}

void writeSquareTable(const SquareTable& squareTable, std::ostream& out) {
    for (int rank = kRanks - 1; rank >= 0; --rank) {
        out << "\t\t";
        for (int file = 0; file < kFiles; ++file) {
            const auto& value = squareTable[rank * kFiles + file];
            out << std::format("{}, ", taperedTermToString(value));
        }
        out << "\n";
    }
}

void writePieceSquareTables(const PieceSquareTables& pieceSquareTables, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << "\t" << pieceToString((Piece)pieceIdx) << ": {\n";
        writeSquareTable(pieceSquareTables[pieceIdx], out);
        out << "\t}\n";
    }
}

template <std::size_t N>
std::string arrayToString(const std::array<TaperedTerm, N>& valueArray) {
    std::string inner = valueArray | std::ranges::views::transform(taperedTermToString)
                      | std::ranges::views::join_with(std ::string(", "))
                      | std::ranges::to<std::string>();
    return "{" + inner + "}";
}

void writeTaperedTermPerPiece(
        const std::array<TaperedTerm, kNumPieceTypes>& terms, std::ostream& out) {
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        out << std::format(
                "\t{}: {}\n", pieceToString((Piece)pieceIdx), taperedTermToString(terms[pieceIdx]));
    }
}

}  // namespace

EvalParams EvalParams::getEmptyParams() {
    return EvalParams{};
}

EvalParams EvalParams::getDefaultParams() {
    return evalParamsFromArray(kDefaultParams);
}

EvalParamArray evalParamsToArray(const EvalParams& params) {
    EvalParamArray array;
    std::memcpy(array.data(), &params, sizeof(EvalParams));
    return array;
}

EvalParams evalParamsFromArray(const EvalParamArray& array) {
    EvalParams params = EvalParams::getEmptyParams();
    std::memcpy(&params, array.data(), sizeof(EvalParams));
    return params;
}

std::string evalParamsToString(const EvalParams& params) {
    std::ostringstream oss;

    oss << "phaseMaterialValues: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes; ++pieceIdx) {
        oss << std::format(
                "\t{}: {:>6.1f}\n",
                pieceToString((Piece)pieceIdx),
                params.phaseMaterialValues[pieceIdx]);
    }
    oss << "}\n";

    oss << "\npieceValues: {\n";
    writeTaperedTermPerPiece(params.pieceValues, oss);
    oss << "}\n";

    oss << "\npieceSquareTablesWhite: {\n";
    writePieceSquareTables(params.pieceSquareTablesWhite, oss);
    oss << "}\n";

    oss << std::format("\npassedPawnBonus:\n\t{}", arrayToString(params.passedPawnBonus));

    oss << std::format(
            "\ndoubledPawnPenalty:\n\t{}", taperedTermToString(params.doubledPawnPenalty));

    oss << std::format(
            "\nisolatedPawnPenalty:\n\t{}", taperedTermToString(params.isolatedPawnPenalty));

    oss << std::format(
            "\nbishopPawnSameColorBonus:\n\t{}", arrayToString(params.bishopPawnSameColorBonus));

    oss << std::format("\nbishopPairBonus:\n\t{}", taperedTermToString(params.bishopPairBonus));

    oss << std::format("\nknightPairBonus:\n\t{}", taperedTermToString(params.knightPairBonus));

    oss << std::format("\nrookPairBonus:\n\t{}", taperedTermToString(params.rookPairBonus));

    oss << std::format(
            "\nrookSemiOpenFileBonus:\n\t{}", taperedTermToString(params.rookSemiOpenFileBonus));

    oss << std::format("\nrookOpenFileBonus:\n\t{}", taperedTermToString(params.rookOpenFileBonus));

    oss << std::format("\nknightPawnAdjustment:\n\t{}", arrayToString(params.knightPawnAdjustment));

    oss << std::format("\nrookPawnAdjustment:\n\t{}", arrayToString(params.rookPawnAdjustment));

    oss << std::format("\nqueenPawnAdjustment:\n\t{}", arrayToString(params.queenPawnAdjustment));

    oss << std::format(
            "\nkingVirtualMobilityPenalty:\n\t{}",
            taperedTermToString(params.kingVirtualMobilityPenalty));

    oss << "\n\nmobilityBonus: {\n";
    writeTaperedTermPerPiece(params.mobilityBonus, oss);
    oss << "}\n";

    oss << "\nkingTropismBonus: {\n";
    writeTaperedTermPerPiece(params.kingTropismBonus, oss);
    oss << "}\n";

    oss << std::format("\ntempoBonus:\n\t{}", taperedTermToString(params.tempoBonus));

    oss << "\n\nattackDefendAdjustment: {\n";
    for (int pieceIdx = 0; pieceIdx < kNumPieceTypes - 1; ++pieceIdx) {
        oss << std::format(
                "\t{}: {}\n",
                pieceToString((Piece)pieceIdx),
                arrayToString(params.attackDefendAdjustment[pieceIdx]));
    }
    oss << "}\n";

    return oss.str();
}
